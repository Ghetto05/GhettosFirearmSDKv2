<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThunderRoad</name>
    </assembly>
    <members>
        <member name="M:ThunderRoad.Skill.Spell.SpellCastLightning.HitBreakable(ThunderRoad.ColliderGroup,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Hits a breakable, breaks it if force is enough and apply the force to the broken pieces
            </summary>
            <param name="colliderGroup">Target colliderGroup</param>
            <param name="position">Position of the hit</param>
            <param name="velocity">Velocity of the hit</param>
        </member>
        <member name="M:ThunderRoad.Skill.Spell.SpellHandlerGravity.OnPush(ThunderRoad.ThunderEntity,ThunderRoad.Skill.Spell.SpellCastGravity,UnityEngine.Vector3)">
            <summary>
            Triggered when an entity is pushed.
            </summary>
            <param name="entity">The <see cref="T:ThunderRoad.ThunderEntity"/> pushed</param>
            <param name="spell">The <see cref="T:ThunderRoad.Skill.Spell.SpellCastGravity"/> spell that pushed it</param>
            <param name="velocity">The push velocity of the hand</param>
            <returns><c>true</c> if the entity should be pushed as normal, <c>false</c> if it should be skipped</returns>
        </member>
        <member name="M:ThunderRoad.Skill.Spell.SpellHandlerGravity.OnStaffSlamPush(ThunderRoad.ThunderEntity,ThunderRoad.Skill.Spell.SpellCastGravity,ThunderRoad.Imbue,ThunderRoad.CollisionInstance)">
            <summary>
            Triggered when an entity is pushed by the staff slam.
            </summary>
            <param name="entity">The <see cref="T:ThunderRoad.ThunderEntity"/> pushed</param>
            <param name="spell">The <see cref="T:ThunderRoad.Skill.Spell.SpellCastGravity"/> spell that pushed it</param>
            <param name="imbue">The <see cref="T:ThunderRoad.Imbue"/> attached to the staff</param>
            <param name="collisionInstance">The <see cref="T:ThunderRoad.CollisionInstance"/> of the staff slam</param>
            <returns><c>true</c> if the entity should be pushed as normal, <c>false</c> if it should be skipped</returns>
        </member>
        <member name="M:ThunderRoad.Skill.Spell.SpellHandlerGravity.OnStaffTryPickup(ThunderRoad.ThunderEntity,ThunderRoad.Skill.Spell.SpellCastGravity,ThunderRoad.Imbue)">
            <summary>
            Triggered when an entity is attempted to be grabbed by the Gravity staff.
            </summary>
            <param name="entity">The grabbed <see cref="T:ThunderRoad.ThunderEntity"/></param>
            <param name="spell">The <see cref="T:ThunderRoad.Skill.Spell.SpellCastGravity"/> spell attempting to grab</param>
            <param name="imbue">The <see cref="T:ThunderRoad.Imbue"/> attached to the staff</param>
            <returns><c>true</c> if the entity should be grabbed as normal, <c>false</c> if it should be skipped</returns>
        </member>
        <member name="M:ThunderRoad.Skill.Spell.SpellHandlerGravity.OnImbueHit(ThunderRoad.ThunderEntity,ThunderRoad.Skill.Spell.SpellCastGravity,ThunderRoad.Imbue,ThunderRoad.CollisionInstance)">
            <summary>
            Triggered when an entity is hit by a Gravity-imbued weapon.
            </summary>
            <param name="entity">The hit <see cref="T:ThunderRoad.ThunderEntity"/></param>
            <param name="spell">The <see cref="T:ThunderRoad.Skill.Spell.SpellCastGravity"/> spell on the imbued weapon</param>
            <param name="imbue">The <see cref="T:ThunderRoad.Imbue"/> attached to the weapon</param>
            <param name="collision">The <see cref="T:ThunderRoad.CollisionInstance"/> of the collision</param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.Skill.TkSkillData.OnTkHandSkillLoad(ThunderRoad.Creature,ThunderRoad.Skill.SpellPower.SpellTelekinesis)">
            <summary>
            Called once per hand, given each hand's TK instance
            </summary>
        </member>
        <member name="M:ThunderRoad.Skill.TkSkillData.OnTkHandSkillUnload(ThunderRoad.Creature,ThunderRoad.Skill.SpellPower.SpellTelekinesis)">
            <summary>
            Called once per hand, given each hand's TK instance
            </summary>
        </member>
        <member name="M:ThunderRoad.Skill.DiveDetector.ScalePointVector(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Scale a held item's point velocity down to a player-velocity-agnostic value,
            that behaves as if the point were to the player's hand.
            </summary>
        </member>
        <member name="M:ThunderRoad.Skill.SkillSecondWind.FadeMusic(System.Single,System.Single,System.Single)">
            <summary>
            Lerp the game's music volume between two values over time.
            </summary>
            <param name="start">[0-100] Start volume percentage</param>
            <param name="end">[0-100] Target volume percentage</param>
            <param name="time">Fade duration in seconds</param>
            <returns></returns>
        </member>
        <member name="T:ThunderRoad.DragArea.Fluid">
            <summary>
            Struct used to define fluids (air, water, etc.).
            The higher the density, the higher the drag.
            Flow is made to simulate world space "current".
            </summary>
        </member>
        <member name="P:ThunderRoad.DragArea.Fluid.MassDensity">
            <summary>
            Over simplification of the real world mass densities.
            Simplified to return the density only.
            </summary>
        </member>
        <member name="M:ThunderRoad.DragArea.CheckIfIsItemAndCacheValues">
            <summary>
            Caches the parent item, and hooks itself to its callbacks
            </summary>
        </member>
        <member name="M:ThunderRoad.DragArea.UpdateWater">
            <summary>
            Updates the water handler
            </summary>
        </member>
        <member name="M:ThunderRoad.DragArea.OnWaterEnter">
            <summary>
            When the water handler detects that the area is immersed, set the fluid to water.
            </summary>
        </member>
        <member name="M:ThunderRoad.DragArea.OnWaterExit">
            <summary>
            When the water handler detects that the area is not immersed anymore, set the fluid back to default.
            </summary>
        </member>
        <member name="M:ThunderRoad.DragArea.OnSnap(ThunderRoad.Holder)">
            <summary>
            Called when the parent item snaps to an holder.
            </summary>
            <param name="holder"></param>
        </member>
        <member name="M:ThunderRoad.DragArea.OnObjectGrabbed(ThunderRoad.Handle,ThunderRoad.RagdollHand)">
            <summary>
            Called when the parent item is grabbed.
            Caches the grabbing creature to the different values (if used).
            </summary>
            <param name="handle"></param>
            <param name="ragdollhand"></param>
        </member>
        <member name="M:ThunderRoad.DragArea.OnObjectReleased(ThunderRoad.Handle,ThunderRoad.RagdollHand,System.Boolean)">
            <summary>
            Called when the parent item is released.
            un-caches the grabbing creature to the different values (if used).
            </summary>
            <param name="handle"></param>
            <param name="ragdollhand"></param>
        </member>
        <member name="M:ThunderRoad.DragArea.CheckIfCreatureIsTurning">
            <summary>
            Checks if the player is currently turning with the thumbstick
            </summary>
            <returns>True if the player is turning, false otherwise</returns>
        </member>
        <member name="M:ThunderRoad.DragArea.GetVelocity">
            <summary>
            Get the velocity of the area using the velocityType.
            </summary>
            <returns>The velocity of the area, using the velocityType</returns>
        </member>
        <member name="M:ThunderRoad.DragArea.GetDragForce(UnityEngine.Vector3)">
            <summary>
            Estimate and convert the drag as a convenient float that depends on the angle between the area velocity and the area normal.
            Eased by the dragAngleEasing curve.
            </summary>
            <param name="velocity">Velocity of the area in the current fluid.</param>
            <returns>The current drag "amount".</returns>
        </member>
        <member name="M:ThunderRoad.DragArea.GetDrag(UnityEngine.Vector3,ThunderRoad.DragArea.Fluid)">
            <summary>
            Used to quantify the drag or resistance of an object in a fluid environment, such as air or water.
            This is a big simplification of real life drag, for gameplay purposes.
            </summary>
            <param name="velocity">Velocity of the area.</param>
            <param name="fluid">Current fluid the area is in</param>
            <returns>The estimated drag force in the direction of the area normal.</returns>
        </member>
        <member name="M:ThunderRoad.DragArea.GetLift">
            <summary>
            Estimate the lift, hugely simplified to be the drag force multiplied by a ratio.
            This allows to move creatures and objects in the drag direction (ie. the inverted area velocity)
            </summary>
            <returns>The lift force.</returns>
        </member>
        <member name="M:ThunderRoad.DragArea.SetFluidAir">
            <summary>
            Set the current fluid to air (defined in gamedata)
            </summary>
        </member>
        <member name="M:ThunderRoad.DragArea.SetFluidWater">
            <summary>
            Set the current fluid to water (defined in gamedata)
            </summary>
        </member>
        <member name="M:ThunderRoad.DragArea.SetFluid(ThunderRoad.DragArea.Fluid)">
            <summary>
            Set the current fluid to the one given.
            </summary>
            <param name="fluid">Fluid to set.</param>
        </member>
        <member name="M:ThunderRoad.DragArea.BeginEstimatingVelocity">
            <summary>
            Reset velocity samples and start estimating the velocity of the hand.
            </summary>
        </member>
        <member name="M:ThunderRoad.DragArea.FinishEstimatingVelocity">
            <summary>
            Stops the velocity estimation routine.
            </summary>
        </member>
        <member name="M:ThunderRoad.DragArea.GetAccelerationEstimate">
            <summary>
            Compute the acceleration estimation from the taken samples
            </summary>
            <returns>Acceleration estimation</returns>
        </member>
        <member name="M:ThunderRoad.DragArea.GetVelocityEstimate">
            <summary>
            Compute the velocity estimation from the taken samples
            </summary>
            <returns>Velocity estimation</returns>
        </member>
        <member name="M:ThunderRoad.DragArea.EstimateVelocityCoroutine">
            <summary>
            Routine that samples and estimate linear velocity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.LiquidContainer.SetUpDisplay">
            <summary>
            Sets up the content level, effect and text display
            </summary>
        </member>
        <member name="M:ThunderRoad.LiquidContainer.UpdateContentsFromCustomData">
            <summary>
            Resets the liquid contents from the current item custom content data.
            </summary>
        </member>
        <member name="M:ThunderRoad.LiquidContainer.AddContentCustomDataLiquidContainer(ThunderRoad.Container)">
            <summary>
            Creates and add (or replace the current one) content custom data liquid container on the item
            </summary>
            <param name="_">Unused container</param>
        </member>
        <member name="M:ThunderRoad.AI.Control.Sequence.#ctor(System.Collections.Generic.List{ThunderRoad.AI.Node})">
            Must provide an initial set of children nodes to work 
        </member>
        <member name="M:ThunderRoad.AI.Blackboard.UpdateVariable``1(System.String,``0)">
            <summary>
            Add a variable of name s or update it's value 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s"></param>
            <param name="variable"></param>
        </member>
        <member name="M:ThunderRoad.AI.ChildTreeNode.#ctor(ThunderRoad.AI.Blackboard,System.String)">
            <summary>
            If you want child to dynamically change
            </summary>
        </member>
        <member name="M:ThunderRoad.AI.ChildTreeNode.#ctor(ThunderRoad.AI.Blackboard,System.Type)">
            <summary>
            If you want to force a treeType as a child
            </summary>
        </member>
        <member name="M:ThunderRoad.CatalogData.CatalogEditorRefresh">
            <summary>
            Called by odin when the catalog editor is refreshed
            </summary>
        </member>
        <member name="M:ThunderRoad.Pools.EffectVfxPoolManager.CreatePooledItem">
            <summary>
            Creates a EffectVFX instance which is configured using the pools EffectModuleVfx
            </summary>
            <returns></returns>
        </member>
        <member name="P:ThunderRoad.Pools.LazyListPool`1.Instance">
            <summary>
            Gets the singleton instance of the LazyListPool class
            </summary>
        </member>
        <member name="M:ThunderRoad.Pools.LazyListPool`1.Get(System.Int32)">
            <summary>
            Retrieves a list from the pool if one is available, otherwise creates a new one
            </summary>
            <param name="size">Size of the list on creation only</param>
            <returns>A List of type T</returns>
        </member>
        <member name="M:ThunderRoad.Pools.LazyListPool`1.Return(System.Collections.Generic.List{`0})">
            <summary>
            Returns a list to the pool, clearing its contents before doing so
            </summary>
            <param name="list">The list to return to the pool</param>
        </member>
        <member name="T:ThunderRoad.Pools.PoolManager`1">
            <summary>
            A generic pool built on top of unity 2021s pooling api
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:ThunderRoad.Pools.ThunderRoad.Pools.LazyDictPool`2.Instance">
            <summary>
            Gets the singleton instance of the LazyDictionaryPool class
            </summary>
        </member>
        <member name="M:ThunderRoad.Pools.ThunderRoad.Pools.LazyDictPool`2.Get(System.Int32)">
            <summary>
            Retrieves a list from the pool if one is available, otherwise creates a new one
            </summary>
            <param name="size">Size of the list on creation only</param>
            <returns>A Dictionary of type TK,TV</returns>
        </member>
        <member name="M:ThunderRoad.Pools.ThunderRoad.Pools.LazyDictPool`2.Return(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Returns a list to the pool, clearing its contents before doing so
            </summary>
            <param name="dict">The list to return to the pool</param>
        </member>
        <member name="T:ThunderRoad.Pools.LinkedPool`1">
            <summary>
              <para>A linked list version of Pool.IObjectPool.</para>
            </summary>
        </member>
        <member name="T:ThunderRoad.Pools.ObjectPool`1">
            <summary>
              <para>A stack based Pool.IObjectPool.</para>
            </summary>
        </member>
        <member name="M:ThunderRoad.Pools.EffectAudioPoolManager.CreateEffectAudio">
            <summary>
            Creates a configured EffectAudio instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.UIProcessingOperationWindow.ShowWindow(System.String,UnityEngine.Events.UnityAction,System.Boolean,UnityEngine.Events.UnityAction)">
            <summary>
            Show processing operation window
            </summary>
            <param name="title">Type of operation that is being executed</param>
            <param name="onSuccessCallback">Callback to be executed if the operation was completed with success</param>
            <param name="hasCancelButton">True, iIf the cancel button is available. False, otherwise</param>
            <param name="onCancelCallback">Callback to be executed if the operation was canceled by the user</param>
        </member>
        <member name="M:ThunderRoad.UIProcessingOperationWindow.HideWindow(System.Boolean,UnityEngine.Events.UnityAction)">
            <summary>
            Hide the confirmation window.
            The class that calls the ShowWindow method, is responsible to also call the HideWindow when the action is completed
            </summary>
            <param name="wasOperationResultSuccess">True if the operation ended with success. False, otherwise</param>
            <param name="onHideCallback">Callback to be executed when this window is closed</param>
        </member>
        <member name="M:ThunderRoad.UIProcessingOperationWindow.HideWindow">
            <summary>
            Window was shown for the minimum visible time and its ready to be hidden
            </summary>
        </member>
        <member name="M:ThunderRoad.UIProcessingOperationWindow.Cancel">
            <summary>
            Executed from the cancel button OnClick callback
            </summary>
        </member>
        <member name="M:ThunderRoad.EventMessage.LoadMediaAssetsCoroutine">
            <summary>
            Load image and/or video assets for this message
            </summary>
        </member>
        <member name="M:ThunderRoad.EventMessage.ResetMessage">
            <summary>
            Reset the state of this event message
            </summary>
        </member>
        <member name="F:ThunderRoad.GameModeSaveData.savedGameModeOptionsValue">
            <summary>
            Saved game mode option value
            </summary>
        </member>
        <member name="M:ThunderRoad.GameModeSaveData.SetAllGameModeOptions(ThunderRoad.GameModeData)">
            <summary>
            Save all option value from there current value.
            </summary>
            <param name="gameMode"></param>
        </member>
        <member name="M:ThunderRoad.GameModeSaveData.InitialiseSaveData">
            <summary>
            Called when the gamemode is selected and loaded into play
            </summary>
        </member>
        <member name="M:ThunderRoad.GameModeSaveData.UnloadSaveData">
            <summary>
            Called when the gamemode is unloaded
            </summary>
        </member>
        <member name="M:ThunderRoad.Telemetry.CodecksCardCreator.CreateNewCard(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{System.Byte[],ThunderRoad.Telemetry.CodecksCardCreator.CodecksFileType}},ThunderRoad.Telemetry.CodecksCardCreator.CodecksSeverity,System.String,ThunderRoad.Telemetry.CodecksCardCreator.CardCreationResultDelegate)">
            <summary>
            Call this method to send a data request to Codecks.
            </summary>
            <param name="token">The token to use for the request.</param>
            <param name="text">The text that will appear on the card.</param>
            <param name="files">The files to be sent with the report (e.g. savegame).</param>
            <param name="severity">The severity of the card (optional).</param>
            <param name="userEmail">The email of the user to receive updates (optional)</param>
            <param name="resultDelegate"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:ThunderRoad.PlayerControl.GetFBTTrackersDefaultPositions(System.Single,ThunderRoad.Creature)">
            <summary>
            Get or compute the default position of FBT trackers
            </summary>
            <param name="height">The real height of the user</param>
            <param name="creature">The creature we are going to calibrate against</param>
            <returns>An array of default tracker position containing {LeftFoot, RightFoot, Waist}</returns>
        </member>
        <member name="M:ThunderRoad.PlayerControl.GetFBTTrackersDefaultRotations(System.Single,ThunderRoad.Creature)">
            <summary>
            Get or compute the default rotation of FBT trackers
            </summary>
            <param name="height">The real height of the user</param>
            <param name="creature">The creature we are going to calibrate against</param>
            <returns>An array of default tracker rotation containing {LeftFoot, RightFoot, Waist}</returns>
        </member>
        <member name="M:ThunderRoad.PlayerControl.ToggleMenu(System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},UnityEngine.Transform,System.Single,System.Collections.Generic.List{UnityEngine.Transform},System.Collections.Generic.List{UnityEngine.Transform})">
            <summary>
            Toggle the visibility of the player menu
            </summary>
            <param name="isChainAction"></param>
            <param name="enableToggleNames">Name of the toggle buttons that should be enabled. Item1 are the menu toggles and item2 list are the internal navigation toggles for each menu.
            If this list is null or empty, it means all the menu toggles should be enabled. Same for the internal toggles list.</param>
            <param name="parentObject">Pin the menu to a specific game object or to the player (null)</param>
            <param name="scale">Scale of the player menu</param>
            <param name="enableOnClose">List of objects to enable when the menu closes, if it was pinned to a stationary UI menu</param>
            <param name="disableOnClose">List of objects to disable when the menu closes, if it was pinned to a stationary UI menu</param>
        </member>
        <member name="M:ThunderRoad.ThunderScript.#ctor">
            <summary>
            Can only be instantiated by the game
            </summary>
        </member>
        <member name="M:ThunderRoad.ThunderScript.ScriptLoaded(ThunderRoad.ModManager.ModData)">
            <summary>
            Executed once when the instance is created by the mod manager
            </summary>
            <param name="modData"></param>
        </member>
        <member name="M:ThunderRoad.ThunderScript.Enable">
            <summary>
            Registers the mod with the manager
            </summary>
        </member>
        <member name="M:ThunderRoad.ThunderScript.Disable">
            <summary>
            Unregisters the mod with the manager
            </summary>
        </member>
        <member name="M:ThunderRoad.ThunderScript.ScriptEnable">
            <summary>
            Executed when the mod is activated
            </summary>
        </member>
        <member name="M:ThunderRoad.ThunderScript.ScriptDisable">
            <summary>
            Executed when the mod is temporarily disabled, but not destroyed
            </summary>
        </member>
        <member name="M:ThunderRoad.ThunderScript.ScriptFixedUpdate">
            <summary>
            Executed each Fixed Update frame
            </summary>
        </member>
        <member name="M:ThunderRoad.ThunderScript.ScriptUpdate">
            <summary>
            Executed each Update frame
            </summary>
        </member>
        <member name="M:ThunderRoad.ThunderScript.ScriptLateUpdate">
            <summary>
            Executed each Late frame
            </summary>
        </member>
        <member name="M:ThunderRoad.ThunderScript.ScriptUnload">
            <summary>
            Executed when a mod is completely unloaded and destroyed
            </summary>
        </member>
        <member name="M:ThunderRoad.UISelectionListButtonsColor.CheckEthnicGroupValues(ThunderRoad.Creature,ThunderRoad.CreatureData.EthnicGroup)">
            <summary>
            Makes sure current colors are allowed by the current ethnic group.
            If the current color isn't available in the ethnic group ones, pick the closest one.
            </summary>
            <param name="creature">Current creature.</param>
            <param name="ethnicGroup">Current ethnic group.</param>
        </member>
        <member name="F:ThunderRoad.ItemMagicAreaProjectile.areaLayer">
            <summary>Layer that the area of effect trigger is set to</summary>
        </member>
        <member name="F:ThunderRoad.ItemMagicAreaProjectile.explosionEffectData">
            <summary>Explosion effect, played at the point of collision</summary>
        </member>
        <member name="F:ThunderRoad.ItemMagicAreaProjectile.areaRadius">
            <summary>Max radius of the area of effect trigger</summary>
        </member>
        <member name="F:ThunderRoad.ItemMagicAreaProjectile.areaExpandDuration">
            <summary>The duration over which the area of effect trigger expands</summary>
        </member>
        <member name="M:ThunderRoad.UIErrorWindow.ShowWindow(System.String,System.String,UnityEngine.Events.UnityAction,UnityEngine.Events.UnityAction)">
            <summary>
            Show operation error window
            </summary>
            <param name="title">Type of operation that failed</param>
            <param name="error">Error description</param>
            <param name="onBackCallback">Callback to be executed if the user clicked the back button</param>
            <param name="onRetryCallback">Callback to be executed if the user clicked the retry button</param>
        </member>
        <member name="M:ThunderRoad.UIErrorWindow.UpdateText(System.String)">
            <summary>
            Update the error text, this can be used to display realtime information.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIErrorWindow.HideWindow">
            <summary>
            Hide this window.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIErrorWindow.Back">
            <summary>
            Executed from the back button OnClick callback
            </summary>
        </member>
        <member name="M:ThunderRoad.UIErrorWindow.Retry">
            <summary>
            Executed from the retry button OnClick callback
            </summary>
        </member>
        <member name="M:ThunderRoad.LevelData.IsLevelDataAllowedInGameMode(ThunderRoad.GameModeData)">
            <summary>
            Returns true if this levelData has any mode which is allowed in the specified gameMode
            </summary>
            <param name="gameModeData"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.LevelData.GetGameModeAllowedModes">
            <summary>
            get all LevelModes which are valid for the current game mode 
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.LevelData.CalculateWorldMapHash">
            <summary>
            The worldmap hash is what determines the uniqueness of a worldmap, it could be a combination of different properties.
            This allows us and modders to reuse the same worldmap prefab with a different texture for example.
            </summary>
        </member>
        <member name="M:ThunderRoad.Item.OverrideCustomData(System.Collections.Generic.List{ThunderRoad.ContentCustomData})">
            <summary>
            Replace current content custom data with the given list.
            </summary>
            <param name="newContentCustomData">Content list to replace contentCustomData with.</param>
        </member>
        <member name="M:ThunderRoad.Item.RemoveCustomData``1">
            <summary>
            Removes all occurrences of the ContentCustomData with the type T
            </summary>
            <typeparam name="T">Type of the ContentCustomData to remove</typeparam>
        </member>
        <member name="M:ThunderRoad.Item.CacheSpawnTransformation">
            <summary>
            Cache the position and rotation of the item (implicitly during spawn)
            Does the same for child skinned meshes
            </summary>
        </member>
        <member name="M:ThunderRoad.Item.CheckIfItemIsMoving">
            <summary>
            Check if the item is currently moving by looking at its rigidbody velocity, and if moving is not ignored.
            </summary>
        </member>
        <member name="M:ThunderRoad.Item.GetItemPointVelocity(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Gets the item's velocity at the given world space position. Used to determine impact velocity for both real and manufactured collisions.
            </summary>
        </member>
        <member name="M:ThunderRoad.Item.AddRecoil(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.ForceMode,UnityEngine.Vector3,UnityEngine.AnimationCurve,System.Boolean)">
            <summary>
            Adds a recoil force to the item, and a lingering force if the item is held after the initial force is applied.
            </summary>
            <param name="forcePosAndDir">The position and rotation for the force. This can be any transform and can even be parented to this item.</param>
            <param name="initialForce">The amount of force to apply, relative to the force position and direction transform.</param>
            <param name="initialForceMode">How to apply initial force, usually impulse or velocity change works best here.</param>
            <param name="lingeringForce">How much force should be applied to prevent "weapon snapping". Also relative to the force position and direction transform.</param>
            <param name="lingerCurve">How much of that initial force to apply over time. Should usually be an ease-in-east-out curve or straight 1-to-0 line.</param>
        </member>
        <member name="M:ThunderRoad.Item.ToggleImbueDrainOnSnap(System.Boolean)">
            <summary>
            Start imbue decreasing on snap
            Stop imbue decreasing on un-snap
            </summary>
            <param name="snapped">Did the item snap or un-snap ?</param>
        </member>
        <member name="M:ThunderRoad.Item.DecreaseImbueRoutine(UnityEngine.AnimationCurve)">
            <summary>
            Decrease imbues energy gradually according to the given curve
            </summary>
            <param name="imbueEnergyOverTimeOnSnap">Curve to follow for energy decrease</param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.Item.InvokeOnTKRepel(ThunderRoad.Handle,ThunderRoad.Skill.SpellPower.SpellTelekinesis,ThunderRoad.EventTime)">
            <summary>
            Invoked when the TK held item is repeled away from the player
            </summary>
            <param name="handle"></param>
            <param name="spellTelekinesis"></param>
            /// <param name="eventTime"></param>
        </member>
        <member name="M:ThunderRoad.Item.InvokeOnTKPull(ThunderRoad.Handle,ThunderRoad.Skill.SpellPower.SpellTelekinesis,ThunderRoad.EventTime)">
            <summary>
            Invoked when the TK held item is pulled towards the player
            </summary>
            <param name="handle"></param>
            <param name="spellTelekinesis"></param>
            <param name="eventTime"></param>
        </member>
        <member name="M:ThunderRoad.Item.InvokeOnContainerAddEvent(ThunderRoad.Container)">
            <summary>
            Invoke the OnContainerAddEvent event from another class
            </summary>
            <param name="container">Container in which the item was added</param>
        </member>
        <member name="M:ThunderRoad.Item.ResetToSpawningTransformation">
            <summary>
            Assign the position and rotation of the item to the spawning cached values.
            Stops the physic body from moving.
            </summary>
        </member>
        <member name="F:ThunderRoad.GameModeData.playerInventoryStart">
            <summary>
            At character creation the player can select the start inventory from this list
            If no choice thhen just make a list of 1 element withh the default values
            This can not be null or empty
            </summary>
        </member>
        <member name="M:ThunderRoad.GameModeData.GetDifficultyOptions">
            <summary>
            This will return all difficulty options set in the data class, and also allow modders to override the options in code
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.GameModeData.NewGameModeSaveData">
            <summary>
            This returns a new instance of the save data for this gamemode
            It should be overridden by each gamemode to return the correct type
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.GameModeData.GetLevelInstances">
            <summary>
            Provides a list of LevelInstances which should be shown on the world map
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.RagdollHandSwim.BeginEstimatingVelocity">
            <summary>
            Reset velocity samples and start estimating the velocity of the hand.
            </summary>
        </member>
        <member name="M:ThunderRoad.RagdollHandSwim.FinishEstimatingVelocity">
            <summary>
            Stops the velocity estimation routine.
            </summary>
        </member>
        <member name="M:ThunderRoad.RagdollHandSwim.GetAccelerationEstimate">
            <summary>
            Compute the acceleration estimation from the taken samples
            </summary>
            <returns>Acceleration estimation</returns>
        </member>
        <member name="M:ThunderRoad.RagdollHandSwim.GetVelocityEstimate">
            <summary>
            Compute the velocity estimation from the taken samples
            </summary>
            <returns>Velocity estimation</returns>
        </member>
        <member name="M:ThunderRoad.RagdollHandSwim.EstimateVelocityCoroutine">
            <summary>
            Routine that samples and estimate linear velocity.
            The estimation is using hand position relative to the player rigidbody
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.RagdollHandSwim.CheckIfPushMotionIsValid(System.Single)">
            <summary>
            Checks if the current hand motion is a valid swimming motion
            (ie: is the creature pushing in the correct direction?)
            </summary>
            <param name="localProjectedForce">Current hand velocity, projected on the palm vector</param>
            <returns>True if the hand moves in a valid swimming motion, false otherwise</returns>
        </member>
        <member name="M:ThunderRoad.RagdollHandSwim.ComputeVelocityToApply(UnityEngine.Vector3)">
            <summary>
            Compute the velocity to apply to the creature's locomotion
            </summary>
            <param name="rawHandVelocity">Hand velocity before tweaking it with config values</param>
            <returns>The velocity to apply to the creature's locomotion</returns>
        </member>
        <member name="M:ThunderRoad.RagdollHandSwim.CheckIfPlayerIsTurning">
            <summary>
            Checks if the player is currently turning with the thumbstick
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.MusicSourceSegmentAlternator.SetVolume(System.Single)">
            <summary>
            Set the volume of all player
            </summary>
            <param name="volume">The volume of the audio source (0.0 to 1.0).</param>
        </member>
        <member name="M:ThunderRoad.CollisionHandler.TouchTargetCreature(ThunderRoad.ColliderGroup,UnityEngine.Collider,ThunderRoad.ColliderGroup,UnityEngine.Collider)">
            <summary>
            This triggers a collision on a target creature for the purposes of stealth detection
            </summary>
        </member>
        <member name="P:ThunderRoad.MusicManager.Volume">
            <summary>
            Music volume (0.0 to 1.0)
            </summary>
        </member>
        <member name="M:ThunderRoad.MusicManager.VolumeTranstion(System.Single,System.Single)">
            <summary>
            Ttransition from current volume to another
            </summary>
            <param name="nextVolume">The volume at the end of transition (0.0 to 1.0)</param>
            <param name="timeTransition">Time to transtion</param>
        </member>
        <member name="M:ThunderRoad.MusicManager.SetAllVolume(System.Single)">
            <summary>
            Set the volume of all player
            </summary>
            <param name="volume">The volume of the audio source (0.0 to 1.0).</param>
        </member>
        <member name="T:ThunderRoad.Option">
            <summary>
            This is a reusable class to create options for levels or gamemodes
            </summary>
        </member>
        <member name="T:ThunderRoad.LoreFaction">
            <summary>
            Used to retain information about a faction's lore.
            </summary>
        </member>
        <member name="F:ThunderRoad.UILoreJournal._availableLore">
            <summary>
            All lore packs for the CURRENT SELECTED FACTION.
            </summary>
        </member>
        <member name="F:ThunderRoad.UILoreJournal._entries">
            <summary>
            All entries for the CURRENT SELECTED ENTRY.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreJournal.TogglePage(UnityEngine.GameObject)">
            <summary>
            Toggle a lore book page.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreJournal.ReturnToIndex">
            <summary>
            Return to index page.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreJournal.NextLorePage">
            <summary>
            Try open the next lore page.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreJournal.PreviousLorePage">
            <summary>
            Try open the previous lore page.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreJournal.SelectEntry(ThunderRoad.UIJournalEntry)">
            <summary>
            Select an entry to display.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreJournal.LoadFactionPack(ThunderRoad.LoreDisplayTypeScriptableObject)">
            <summary>
            Loads a factions lore collection.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreJournal.LoadEntry(System.Int32)">
            <summary>
            This requires <see cref="M:ThunderRoad.UILoreJournal.SelectEntry(ThunderRoad.UIJournalEntry)"/> to select and load an entry.
            It will allow navigation through all related entries.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreJournal.ToggleTranslation">
            <summary>
            Toggle translations.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreJournal.ClearEntryPage">
            <summary>
            Clear all text from the entry page.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreJournal.CreateBookmark(ThunderRoad.LoreDisplayTypeScriptableObject,System.Action)">
            <summary>
            Register a faction in the journal,
            this will generate an overview and bookmark,
            which will then allow the viewing of that lore.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreJournal.CreateEntry(ThunderRoad.LoreScriptableObject.LorePack,ThunderRoad.LoreScriptableObject.LoreData,ThunderRoad.LoreDisplayTypeScriptableObject)">
            <summary>
            Create a lore entry.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreJournal.RebuildUI">
            <summary>
            Rebuild the journal.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreJournal.ReadEntry(ThunderRoad.UIJournalEntry)">
            <summary>
            Mark an entry as read.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreJournal.IsEntryRead(System.String)">
            <summary>
            Is the target entry read?
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreJournal.GetEntryFromData(ThunderRoad.LoreScriptableObject.LoreData)">
            <summary>
            Get a journal entry by its entry index.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreJournal.ConstructSprite(System.String)">
            <summary>
            Construct a singular sprite image, used usually by lore data.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreJournal.ConstructPage(System.String)">
            <summary>
            Construct visual elements of a page.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreJournal.GenerateEntries(ThunderRoad.LoreDisplayTypeScriptableObject)">
            <summary>
            Generate journal entries.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreJournal.GenerateCategories(System.Action{ThunderRoad.LoreDisplayTypeScriptableObject})">
            <summary>
            Generate the base categories.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreJournal.ClearChildren(UnityEngine.Transform,System.Int32)">
            <summary>
            Clear all children of a transform.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreJournal.HandleLoreRead(System.Int32)">
            <summary>
            Invoked when new lore is read.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIButtonList.SetState(System.Boolean)">
            <summary>
            If this option is enabled => switch to outline font and highlight button
            </summary>
            <param name="isOn"></param>
        </member>
        <member name="M:ThunderRoad.TutorialManager.StartTutorial">
            <summary>
            Called from the Tutorial Player Spawner on the home level
            </summary>
        </member>
        <member name="M:ThunderRoad.TutorialManager.SectionCompleted(ThunderRoad.TutorialSection)">
            <summary>
            This section of the tutorial is done
            </summary>
        </member>
        <member name="M:ThunderRoad.TutorialManager.SaveTutorialNotes">
            <summary>
            Used to add all tutorial lore notes to the journal if the game intro was skipped or to add the missed notes while the player was doing the tutorial
            </summary>
        </member>
        <member name="M:ThunderRoad.TutorialManager.OnPlayerEnterBoat">
            <summary>
            Called from the tutorial boat zone trigger
            </summary>
        </member>
        <member name="M:ThunderRoad.TutorialManager.OnPlayerExitBoat">
            <summary>
            Called from the tutorial boat zone trigger
            </summary>
        </member>
        <member name="M:ThunderRoad.TutorialManager.OnPlayerWaterEnter">
            <summary>
            Display a tutorial message when entering water
            </summary>
        </member>
        <member name="M:ThunderRoad.TutorialManager.OnPlayerWaterEnterCoroutine">
            <summary>
            Check Player water depth
            </summary>
        </member>
        <member name="M:ThunderRoad.TutorialManager.DisplaySwimMessage(UnityEngine.Video.VideoClip)">
            <summary>
            Display a swim related message
            </summary>
            <param name="videoClip">Video clip to link to the message</param>
        </member>
        <member name="M:ThunderRoad.TutorialManager.SetSwimTutorialFlag(ThunderRoad.DisplayMessage.MessageData)">
            <summary>
            Sets the swim tutorial flag to true
            </summary>
        </member>
        <member name="M:ThunderRoad.TutorialManager.SetSwimTutorialFlag">
            <summary>
            Sets the swim tutorial flag to true
            </summary>
        </member>
        <member name="M:ThunderRoad.TutorialManager.TutorialIntroCompleted">
            <summary>
            The game intro on the home level is done
            </summary>
        </member>
        <member name="M:ThunderRoad.TutorialManager.CompletedTutorialDungeon">
            <summary>
            The special dungeon for the tutorial is done. Completing the dungeon also means the tutorial is now done
            </summary>
        </member>
        <member name="M:ThunderRoad.TutorialManager.RemoveTutorialSpawner">
            <summary>
            Remove the tutorial spawner from the level options
            </summary>
        </member>
        <member name="M:ThunderRoad.UIArrowListOptions.OnOptionValueChanged(ThunderRoad.UIArrowListOptions.Option)">
            <summary>
            Add options dependencies here for the values that need to be updated if another option value is changed
            </summary>
            <param name="updatedOption">The option that was changed</param>
        </member>
        <member name="F:ThunderRoad.EffectModuleMesh.pools">
            <summary>
            A pool of each EffectMesh objects for each effectModule configuration. 
            </summary>
        </member>
        <member name="M:ThunderRoad.EffectModuleMesh.GetOrCreateEffectMeshPoolManager(ThunderRoad.EffectModuleMesh)">
            <summary>
            This will get or create the EffectMeshPoolManager for this EffectModuleMesh
            </summary>
        </member>
        <member name="M:ThunderRoad.EffectModuleMesh.CreateEffectMesh">
            <summary>
            Creates a configured, non pooled EffectMesh instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.EffectModuleMesh.Configure(ThunderRoad.EffectMesh)">
            <summary>
            Configures an EffectMesh with values from this EffectModuleMesh
            </summary>
            <param name="effect"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.Modules.CrystalHuntProgressionModule.SetEndGameState(ThunderRoad.Modules.CrystalHuntProgressionModule.EndGameState)">
            <summary>
            Update the end game state
            </summary>
            <param name="endGameState">New end game state</param>
        </member>
        <member name="P:ThunderRoad.Modules.LevelInstancesModule.loadedLevelInstance">
            <summary>
            The currently loaded level instance
            </summary>
        </member>
        <member name="M:ThunderRoad.Modules.LevelInstancesModule.RemoveLevelInstanceByGUID(System.String)">
            <summary>
            Remove a level instance by guid.
            </summary>
        </member>
        <member name="M:ThunderRoad.Modules.LevelInstancesModule.RemoveLevelInstance(ThunderRoad.LevelInstance)">
            <summary>
            Remove a level instance directly.
            </summary>
        </member>
        <member name="M:ThunderRoad.Modules.LevelInstancesModule.TryGetCurrentLevelInstance(ThunderRoad.LevelInstance@)">
            <summary>
            Helper method to get the current loaded level instance data
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.Modules.LoreModule.TryGetLorePack(System.Int32,ThunderRoad.LorePackCondition.Visibility,System.String[],System.String[],System.Int32@,System.Collections.Generic.List{ThunderRoad.LoreScriptableObject.LoreData}@,ThunderRoad.LoreScriptableObject.LorePack@)">
            <summary>
            Use this methods to ask for a lore pack. The lore pack will not be available after for other GetLorePack until ReleaseLre is called.
            </summary>
            <param name="maxText"></param>
            <param name="maxTexture"></param>
            <param name="loreId">The lore Id. Needed for ReleaseLore</param>
            <param name="data">The lore data pack</param>
        </member>
        <member name="M:ThunderRoad.Modules.LoreModule.TryPickSpecificLore(System.String,System.Int32@,System.Collections.Generic.List{ThunderRoad.LoreScriptableObject.LoreData}@,ThunderRoad.LoreScriptableObject.LorePack@)">
            <summary>
            Try get a lore pack using it's name
            </summary>
            <param name="lorePackName">lore name must have the lore pack folder name at the beginning</param>
            <param name="loreId">Lore Id. You'll need this to release the lore</param>
            <param name="data">The data from the pack</param>
            <returns>true if the lore has not been read and exist</returns>
        </member>
        <member name="M:ThunderRoad.Modules.LoreModule.ReleaseLore(System.Int32,System.Boolean)">
            <summary>
            Return the lore pack to the available pool if it has not been read or save it as read and update available lore that required this lore to be read.
            </summary>
            <param name="lorePackId">The id of the lore pack</param>
            <param name="hasRead">Specify if the lore has been read</param>
        </member>
        <member name="M:ThunderRoad.Modules.LoreModule.TryGetLoreSoFromLorePackId(System.Int32,ThunderRoad.LoreScriptableObject@)">
            <summary>
            Check wich lore so contain the lore pack id
            </summary>
            <param name="lorePackId">the lore pack id</param>
            <returns>true if found the lore</returns>
        </member>
        <member name="M:ThunderRoad.Modules.LoreModule.GetAllDisplayType">
            <summary>
            Return all display type in each lore currently loaded in this module
            </summary>
            <returns>List of all display type in each lore</returns>
        </member>
        <member name="M:ThunderRoad.Modules.LoreModule.GetReadLoreCount(System.String)">
            <summary>
            Return all read count for a display type
            </summary>
            <param name="displayTypeName"> the name of the displaytype. format : "groupId/textId" </param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.Modules.LoreModule.GetLoreCount(System.String)">
            <summary>
            Get lore count for a display type
            </summary>
            <param name="displayTypeName">  the name of the displaytype. format : "groupId/textId"</param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.Modules.LoreModule.GetAllReadLorePack(System.String)">
            <summary>
            Get all the read lore pack from a display type
            </summary>
            <param name="displayTypeName"> the name of the displaytype. format : "groupId/textId"</param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.Modules.LoreModule.InitLoreState">
            <summary>
            Initialize all state for Lore from player save data. (create thhe available lore list and the lore not read dictionary)
            </summary>
        </member>
        <member name="M:ThunderRoad.Modules.LoreModule.SetLoreState(ThunderRoad.LoreScriptableObject,ThunderRoad.GameModeSaveData.LoreSaved,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Populate lore not read and lore available (all lore requirment already read) from the lore tree and the player save data.
            </summary>
            <param name="node">The root node tree (recursif)</param>
            <param name="parentHashId">Use to specify that the next node need to check if this node id can be available when the next node has been read</param>
            <returns>return true if the lore has been added to the loreNotRead, or false if it's already been read (and not added to the dictionary)</returns>
        </member>
        <member name="M:ThunderRoad.Modules.LoreModule.CheckLoreAvailable(System.Int32)">
            <summary>
            Check if all the lore requirement has been read. And if so add this lore to the available lore list
            </summary>
            <param name="loreState">The lore state to check</param>
        </member>
        <member name="T:ThunderRoad.Modules.CrystalHuntLevelInstancesModule">
            <summary>
            Handles creating and updating the level instances for the Crystal Hunt game mode
            </summary>
        </member>
        <member name="M:ThunderRoad.Modules.CrystalHuntLevelInstancesModule.GeneratePossibleFactionTiersAndLengths(System.Int32)">
            <summary>
            Tries to generate unique pairs of faction tiers and dungeon lengths for the pins
            </summary>
            <param name="possiblePinsToGenerate"></param>
            <returns>Tuple of FactionTier and DungeonLength</returns>
        </member>
        <member name="M:ThunderRoad.Modules.CrystalHuntLevelInstancesModule.RemoveLevelInstance(ThunderRoad.LevelInstance)">
            <summary>
            Remove a level instance directly.
            </summary>
        </member>
        <member name="M:ThunderRoad.Modules.CrystalHuntLevelInstancesModule.BuildLevelInstances">
            <summary>
            This method is just responsible for returning the level instances that are currently active in our lists
            </summary>
            <returns></returns>
        </member>
        <member name="F:ThunderRoad.ItemModuleReturnInInventory.returnsToLastHolder">
            <summary>
            Item Should return to last holder instead of inventory
            </summary>
        </member>
        <member name="F:ThunderRoad.ItemModuleReturnInInventory.returnsOnItemRelease">
            <summary>
            Should the item return when the player ungrab item
            </summary>
        </member>
        <member name="F:ThunderRoad.ItemModuleReturnInInventory.returnsWhenNotLookingAtIt">
            <summary>
            Should the item return when the player doesn't look at it for X seconds ?
            </summary>
        </member>
        <member name="F:ThunderRoad.ItemModuleReturnInInventory.returnsAfterReachingMaxDistance">
            <summary>
            Should the item return when the item goes beyond ea distance threshold ?
            </summary>
        </member>
        <member name="F:ThunderRoad.ItemModuleReturnInInventory.maxDistanceBeforeReturning">
            <summary>
            Distance under which the item stays still
            </summary>
        </member>
        <member name="F:ThunderRoad.ItemModuleReturnInInventory.timeAfterWhichItemReturn">
            <summary>
            Time after which the item returns (when not looked)
            </summary>
        </member>
        <member name="F:ThunderRoad.ItemModuleReturnInInventory.useReturningAnimation">
            <summary>
            Set true to have a returning animation.
            </summary>
        </member>
        <member name="F:ThunderRoad.ItemModuleReturnInInventory.returningVelocityValue">
            <summary>
            the velocity magnitude whern returning
            </summary>
        </member>
        <member name="M:ThunderRoad.ItemModuleReturnInInventory.OnItemLoaded(ThunderRoad.Item)">
            <summary>
            When the item is loaded, attach a ItemAlwaysReturnsInInventory component on it
            </summary>
            <param name="item">item to attach the component on</param>
        </member>
        <member name="M:ThunderRoad.UIWorldMapLevelPresentation.Travel">
            <summary>
            Load the level for the selected location and mode
            </summary>
        </member>
        <member name="M:ThunderRoad.UIWorldMapLevelPresentation.NextMode">
            <summary>
            Change to the next mode for the selected map
            </summary>
        </member>
        <member name="M:ThunderRoad.UIWorldMapLevelPresentation.PreviousMode">
            <summary>
            Change to the previous mode for the selected map
            </summary>
        </member>
        <member name="M:ThunderRoad.UIWorldMapLevelPresentation.NextOptions">
            <summary>
            Change to the next options page for the selected map and selected mode
            </summary>
        </member>
        <member name="M:ThunderRoad.UIWorldMapLevelPresentation.PreviousOptions">
            <summary>
            Change to the previous options page for the selected map and selected mode
            </summary>
        </member>
        <member name="M:ThunderRoad.UIWorldMapLevelPresentation.SetEnemyConfig">
            <summary>
            Find if there is an enemy config in level options (from level instance).
            </summary>
        </member>
        <member name="M:ThunderRoad.UIWorldMapLevelPresentation.SetupLevelInfo">
            <summary>
            SetUp the correct Level Title, description and banner.
            They can change according to the faction;
            </summary>
        </member>
        <member name="M:ThunderRoad.UIWorldMapLevelPresentation.ClearBanner">
            <summary>
            Release texture from banner and reset the banner data
            </summary>
        </member>
        <member name="M:ThunderRoad.UIWorldMapLevelPresentation.ToggleRightPanelContent(System.Boolean)">
            <summary>
            Toggle each panels active state.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIWorldMapLevelPresentation.BuildOptions">
            <summary>
            Create the options selection panel
            </summary>
        </member>
        <member name="M:ThunderRoad.UIWorldMapLevelPresentation.ShowOption">
            <summary>
            Update all options informations
            </summary>
        </member>
        <member name="M:ThunderRoad.UIWorldMapLevelPresentation.BuildAttributeGroups">
            <summary>
            Create level attribute for specific level instance
            </summary>
        </member>
        <member name="M:ThunderRoad.UIWorldMapLevelPresentation.CreateAttributeGroupDisplay(UnityEngine.Transform)">
            <summary>
            Create an attribute group display on the board.
            This is for the right-panel to display attribute data visually.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIWorldMapLevelPresentation.ClearAttributeDisplayGroups">
            <summary>
            Clear all attribute display groups from the group anchor.
            </summary>
        </member>
        <member name="F:ThunderRoad.Damager.shieldSweepRayHits">
            <summary>
            Buffer to hold raycast hits from the shield sweeptest.
            </summary>
        </member>
        <member name="M:ThunderRoad.Damager.ShieldSweep(ThunderRoad.CollisionInstance)">
            <summary>
            Make a sweep test to check if the hit arm is holding a shield, and should have parried the hit.
            </summary>
            <param name="collisionInstance">Collision instance to check for.</param>
            <returns>True if the sweep test should have hit a shield, false otherwise.</returns>
        </member>
        <member name="M:ThunderRoad.Damager.SweepTestCheckForHits(System.Int32,ThunderRoad.RagdollHand)">
            <summary>
            Checks in the shieldSweepRayHits buffer if any hit is containing the held shield.
            </summary>
            <param name="hitCount">Number of hits returned by the raycast</param>
            <param name="hitHand">Hand of the creature that received the hit</param>
            <returns>True if we hit the shield, false otherwise</returns>
        </member>
        <member name="T:ThunderRoad.Gravity">
            <summary>
            This component applies custom gravity to a collisionHandlers physic body
            </summary>
        </member>
        <member name="M:ThunderRoad.Tower.StartKhemenetEnding">
            <summary>
            The player grabbed the sword in the center of the room which triggers the Khemenet Ending final cutscene,
            where the player is killed and the tower is seen exploding from the space scene.
            </summary>
        </member>
        <member name="M:ThunderRoad.Tower.StartAnnihilationEnding">
            <summary>
            In the process of withdrawing the sword, the structure starts to collapse and crumble as the final remains 
            of power are sucked out of the PMN (as if pulling the sword out of the building is harming it). 
            </summary>
        </member>
        <member name="M:ThunderRoad.Tower.ShockTarget(UnityEngine.Transform,System.Single)">
            <summary>
            Shoot an electric shock against the one trying to steal the sword
            </summary>
            <param name="source">Transform from where the shock is being shot</param>
            <param name="damage">Damage give with the electric shock</param>
        </member>
        <member name="F:ThunderRoad.UICrystalHuntCurrency.shardCounter">
            Only used for player inventory to show the shard and coin count
        </member>
        <member name="M:ThunderRoad.EffectParticle.FakeDespawn">
            <summary>
            This is used by the pooling system to sort of fake despawn the effect without returning it to the pool, because we are going to use it again right away
            </summary>
        </member>
        <member name="M:ThunderRoad.UIScrollController.SetVerticalScrollBarSize(System.Single)">
            <summary>
            Unity UI default behavior changes the scrollbar size while we are scrolling, which messes up the scroll handle
            position, so we need to set the scrollbar size, each time the scroll value changes, to keep its size constant.
            </summary>
            <param name="size">Size of the vertical scroll</param>
        </member>
        <member name="M:ThunderRoad.UIScrollController.AdjustContentPosition">
            <summary>
            Adjust the scroll content position, according to the scrollbars visibility,
            if the visibility setting is set to Auto-hide
            </summary>
        </member>
        <member name="M:ThunderRoad.UIScrollController.SetContentAnchoredPosition(UnityEngine.Vector2)">
            <summary>
            ScrollRect.LateUpdate calls SetContentAnchoredPosition with very tiny values every frame,
            only if scrolling is not needed and even when velocity is zero.
            SetContentAnchoredPosition makes text jitter. Check before setting position.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIScrollController.SetNormalizedPosition(System.Single,System.Int32)">
            <summary>
            Called when scrolling would occur.
            Prevent setting when vertical scrollbar is disabled and scrolling is not needed to prevent jittering.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIScrollController.LayoutGroupValueChanged">
            <summary>
            Control scroll max speed. The scroll rect default behavior is to increase the scroll speed proportionally
            to the amount of content present in the scroll. This means that if the scroll has a lot of content, it is
            almost impossible to scroll small portions at a time.
            </summary>
        </member>
        <member name="E:ThunderRoad.LightmapBakeHelper.onBakeStarted">
            <summary>
            Called when bake complete. Return false if bake has been canceled.
            </summary>
        </member>
        <member name="E:ThunderRoad.LightmapBakeHelper.onBakeCompleted">
            <summary>
            Called when bake complete. Return false if bake has been canceled and true if succesfull
            </summary>
        </member>
        <member name="E:ThunderRoad.LightmapBakeHelper.onBakeLateCompleted">
            <summary>
            Called when bake complete after onBakeCompleted ran. Return false if bake has been canceled and true if succesfull
            </summary>
        </member>
        <member name="M:ThunderRoad.Utils.Shuffle``1(``0[],System.Int32)">
            <summary>
            Shuffle the first <c>length</c> elements of an array using the Fisher-Yates shuffle
            </summary>
            <param name="array">Input array</param>
            <param name="length">Number of elements to shuffle</param>
            <returns>A reference to the same, now-shuffled array</returns>
        </member>
        <member name="M:ThunderRoad.Utils.TryGetSmallestRadius(UnityEngine.Collider,System.Single@)">
            <summary>
            Returns the smallest radius or axis of a collider
            </summary>
            <param name="collider"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.Utils.IsNullOrEmpty(System.Collections.ICollection)">
            <summary>
            Is the target collection null or empty?
            </summary>
        </member>
        <member name="M:ThunderRoad.Utils.IsNullOrEmpty(System.Array)">
            <summary>
            Is the target array null or empty?
            </summary>
        </member>
        <member name="M:ThunderRoad.Utils.TryGetCloserTarget(UnityEngine.Vector3,UnityEngine.Vector3,System.Single@)">
            <summary>
            This will return true if the distanceSqr between position and targetPosition is less than closestDistanceSqr and will update closestDistanceSqr with the new distanceSqr
            </summary>
            <param name="position"></param>
            <param name="targetPosition"></param>
            <param name="closestDistanceSqr"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.Utils.DecibelsToPercentage(System.Single)">
            <summary>
            Convert audio mixer volume decibels in the scale [-80,0] to [0-100]%
            </summary>
            <param name="decibels">Decibels = [-80,0]</param>
            <returns>[0,100] percentage value</returns>
        </member>
        <member name="M:ThunderRoad.Utils.PercentageToDecibels(System.Single)">
            <summary>
            Convert audio mixer volume slider value in the scale [0-100]% to [-80,0] decibels
            </summary>
            <param name="percentage">Percentage = [0,100]</param>
            <returns>[-80,0] decibel value</returns>
        </member>
        <member name="M:ThunderRoad.Utils.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Clone a directory.
            </summary>
        </member>
        <member name="M:ThunderRoad.Utils.FlatDistance(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns the flat distance (ignoring the y axs) between two positions. 
            </summary>
        </member>
        <member name="M:ThunderRoad.Utils.IsNullOrEmptyOrWhitespace(System.String)">
            <summary>
            Returns true if this string is null, empty, or contains only whitespace.
            </summary>
            <param name="str">The string to check.</param>
            <returns>True if this string is null, empty, or contains only whitespace. Otherwise, it returns false.</returns>
        </member>
        <member name="M:ThunderRoad.Utils.RemoveTabs(System.String)">
            <summary>
            Remove the tab characters from a string
            </summary>
            <returns>The same text with the tab characters replaced by empty space characters.</returns>
        </member>
        <member name="M:ThunderRoad.AreaCollectionDungeon.GetDungeonPlacementArea(System.Random,ThunderRoad.AreaCollectionDungeon.DungeonBlueprint,ThunderRoad.AreaCollectionDungeon.PathGroup,ThunderRoad.AreaTable.AreaSettings,ThunderRoad.AreaCollectionDungeon.AreaPlacement,System.Boolean,System.Collections.Generic.List{ThunderRoad.AreaCollectionDungeon.AreaPlacement})">
            <summary>
            Chose room settings (entrance, exit, rotation)
            </summary>
            <param name="area">The area we need to set the settings</param>
            <param name="previousArea">The previous area that need to be connected</param>
            <param name="allowNoExit">boolean allow area without exit (dungeon ends)</param>
            <param name="deadEndAreas">List of all area's settings that has been tested and end up in a dead end. Areas' settings in this list will not be consider as a valid choice</param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.AreaCollectionDungeon.GetDungeonPlacementStartArea(System.Random,ThunderRoad.AreaCollectionDungeon.PathGroup,ThunderRoad.AreaTable.AreaSettings,System.Collections.Generic.List{ThunderRoad.AreaCollectionDungeon.AreaPlacement})">
            <summary>
            Chose area settings (entrance, exit, rotation) without considering entrance
            </summary>
            <param name="area">The area we need to chose the settings</param>
            <param name="deadEndAreaSettings">List of area's setting that end up as a dead end. Settings on this list will not be consider as a valid choice</param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.Logger.ThunderLogger.GetCallingMethod">
            <summary>
            Gets the calling method for this log message
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.ExposureSetterZone.ResetPlayerExposure">
            <summary>
            Reset the player exposure to 0
            </summary>
        </member>
        <member name="P:ThunderRoad.Equipment.OnArmourEquippedEvent">
            <summary>
            Invoked when armour has been equipped.
            </summary>
        </member>
        <member name="P:ThunderRoad.Equipment.OnArmourUnEquippedEvent">
            <summary>
            Invoked when armour has been unequipped.
            </summary>
        </member>
        <member name="M:ThunderRoad.Equipment.GetWornContentLowerLayer(System.String,System.String[])">
            <summary>
            Get the lowest layer of equipment on the target manikin channel.
            </summary>
        </member>
        <member name="M:ThunderRoad.Equipment.GetWornContentsLowerLayer(System.String,System.String[])">
            <summary>
            Get all equipment on a specific manikin channel, filtered by layers
            </summary>
        </member>
        <member name="M:ThunderRoad.Equipment.GetWornContentsLowerLayer(System.String)">
            <summary>
            Get all equipment on a specific manikin channel.
            </summary>
        </member>
        <member name="M:ThunderRoad.Equipment.GetEquipmentOnPart(ThunderRoad.RagdollPart.Type)">
            <summary>
            Get the equipment on a specific part.
            </summary>
        </member>
        <member name="M:ThunderRoad.CharacterSelection.MoveCreature(UnityEngine.Vector2)">
            <summary>
            Translate and rotate the creature with the thumbstick axis
            </summary>
            <param name="axis">Thumbstick axis [-1; 1].</param>
        </member>
        <member name="M:ThunderRoad.CharacterSelection.RotateCreature(System.Single,System.Boolean)">
            <summary>
            Rotates the creature.
            </summary>
            <param name="degrees">Angle in degrees.</param>
            <param name="overTime">Uses delta time and speed if true, pure angle value otherwise.</param>
        </member>
        <member name="M:ThunderRoad.CharacterSelection.StartRotating(System.Boolean)">
            <summary>
            Make the creature rotate by one degrees overtime, until StopRotating is called
            </summary>
            <param name="clockWise">Should it rotate clockwise or counterClockwise?</param>
        </member>
        <member name="M:ThunderRoad.CharacterSelection.StopRotating">
            <summary>
            Make the creature stop rotating
            </summary>
        </member>
        <member name="M:ThunderRoad.CharacterSelection.CheckCharacterMovement">
            <summary>
            The character movement UI is active only if there's a creature
            </summary>
        </member>
        <member name="M:ThunderRoad.CharacterSelection.UpdateCharacterHeight(System.Single)">
            <summary>
            Update character height and persist this value on the character data
            </summary>
            <param name="height">New selected height</param>
        </member>
        <member name="M:ThunderRoad.CharacterSelection.ValidateCalibration">
            <summary>
            Called from the character height calibration screen - 'Play' button
            </summary>
        </member>
        <member name="M:ThunderRoad.CharacterSelection.WarningMessageContinue">
            <summary>
            Called from Waring Message Screen - 'Yes' Button. Check if do not show again is checked
            </summary>
        </member>
        <member name="M:ThunderRoad.CharacterSelection.WarningMessageBack">
            <summary>
            Called from Installed Mods Waring Screen 'No' Button
            </summary>
        </member>
        <member name="M:ThunderRoad.CharacterSelection.ValidateMapSelection">
            <summary>
            Called from the Map Selection screen - Play Button
            </summary>
        </member>
        <member name="M:ThunderRoad.Spectator.CanPerformActions">
            <summary>
            Can the spectator move/shoot/etc?
            </summary>
        </member>
        <member name="M:ThunderRoad.PlayerTeleporter.Teleport">
            <summary>
            Teleport the player to the target transform. If use Fading is set to true, fades in a coroutine.
            </summary>
        </member>
        <member name="M:ThunderRoad.PlayerTeleporter.FadeAndTeleportPlayer">
            <summary>
            Fades in, teleport the player, then fades out.
            Uses the fadeInDuration and fadeOutDuration fields.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIAttributeGroupDisplay.WithTitle(System.String,System.String)">
            <summary>
            Set the attribute display title.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIAttributeGroupDisplay.WithDescription(System.String,System.String)">
            <summary>
            Set the attribute description.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIAttributeGroupDisplay.WithIcons(UnityEngine.Texture,UnityEngine.Color,System.Int32,System.Single)">
            <summary>
            spawn thhe number of icons
            </summary>
        </member>
        <member name="M:ThunderRoad.UIAttributeGroupDisplay.WithIcons(System.Collections.Generic.List{System.ValueTuple{UnityEngine.Texture,UnityEngine.Color}},System.Single)">
            <summary>
            spawn thhe list of icons
            </summary>
        </member>
        <member name="M:ThunderRoad.UIAttributeGroupDisplay.WithProgressionIcons(System.Collections.Generic.List{System.ValueTuple{UnityEngine.Texture,UnityEngine.Color}},System.Collections.Generic.List{System.ValueTuple{UnityEngine.Texture,UnityEngine.Color}},System.Int32,System.Single)">
            <summary>
            Spawns Icons from the list (0 to iconProgression) and then from bgIcons list (iconProgression to size of bgIcons list)
            icons and bgIcons must be the same size.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIAttributeGroupDisplay.WithProgressionIcons(UnityEngine.Texture,UnityEngine.Color,UnityEngine.Texture,UnityEngine.Color,System.Int32,System.Int32,System.Single)">
            <summary>
            Spawn same Icons and same background Icons according to the number of icon and the progression.
            </summary>
            <param name="icon">the icon texture</param>
            <param name="color">the icon color</param>
            <param name="bgIcon"> the icon background (to see that icons are missing / progression)</param>
            <param name="bgColor"> the icon bakcground color</param>
            <param name="count"> max icons (number of background to show = count - progression)</param>
            <param name="progression"> icon  progression (number of icons to show)</param>
            <param name="aspectRatio">the aspect ratio of icons (they must ahve the same)</param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.UIAttributeGroupDisplay.WithSeparator">
            <summary>
            Set active the separator.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIAttributeGroupDisplay.SetIconCount">
            <summary>
            Set the amount of icons to display.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIAttributeGroupDisplay.ClearIcons">
            <summary>
            Clears all currently listed icons.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIAttributeGroupDisplay.CreateIcon">
            <summary>
            Create an icon from the cache address.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIPlayerMenu.MoveToMasterScene">
            <summary>
            Send the menu game object to the master scene to avoid its destruction when the current level is unloaded
            </summary>
        </member>
        <member name="M:ThunderRoad.UIPlayerMenu.RefreshContent(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            Update navigation bar toggle menu buttons and each menu navigation pane toggle buttons interactable state
            </summary>
            <param name="enableToggleNames">Name of the toggle buttons that should be enabled. If this list is null, it means all the toggles should be enabled</param>
        </member>
        <member name="M:ThunderRoad.UIPlayerMenu.FindElements(UnityEngine.Transform)">
            <summary>
            Use this to dynamically find the UI elements that need to be updated
            when we change the options style between medieval and modern.
            This method will recursively look out for components on the children objects.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIPlayerMenu.AddOption(ThunderRoad.UIList)">
            <summary>
            Initialize and create a reference for each new option
            </summary>
            <param name="option">Option found in the menu to be tracked and initialized+</param>
        </member>
        <member name="M:ThunderRoad.UIPlayerMenu.ClearContent">
            <summary>
            Clear old content
            </summary>
        </member>
        <member name="M:ThunderRoad.UIPlayerMenu.ToggleMenu(System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},UnityEngine.Transform,System.Single,System.Collections.Generic.List{UnityEngine.Transform},System.Collections.Generic.List{UnityEngine.Transform})">
            <summary>
            Toggle player menu visibility
            </summary>
            <param name="show">True if we want to show the menu. False to hide it</param>
            <param name="animateHiding">Set this argument to false if the menu should close in one frame, without doing the closing animamtion</param>
            <param name="enableToggleNames">Name of the toggle buttons that should be enabled. Item1 are the menu toggles and item2 list are the internal navigation toggles for each menu.
            If this list is null or empty, it means all the menu toggles should be enabled. Same for the internal toggles list.</param>
            <param name="parentObject">Pin the menu to a specific game object or to the player (null)</param>
            <param name="scale">Scale of the player menu</param>
            <param name="enableOnClose">List of objects to enable when the menu closes, if it was pinned to a stationary UI menu</param>
            <param name="disableOnClose">List of objects to disable when the menu closes, if it was pinned to a stationary UI menu</param>
        </member>
        <member name="M:ThunderRoad.UIPlayerMenu.Close">
            <summary>
            Use this to close the player menu, when its pinned to a stationary UI, with the close button
            </summary>
        </member>
        <member name="M:ThunderRoad.UIPlayerMenu.PlaySound(ThunderRoad.AudioContainer,System.Single)">
            <summary>
            Plays a sound on the menu
            </summary>
            <param name="audioContainer">Audio container with the audio clips to play</param>
            <param name="volumeDb">Volume of the sound (in DB)</param>
        </member>
        <member name="T:ThunderRoad.LoreTranslator">
            <summary>
            Provides methods to translate lore notes.
            </summary>
        </member>
        <member name="M:ThunderRoad.LoreTranslator.Translate(System.String)">
            <summary>
            Translate text based on what the player has learnt.
            </summary>
        </member>
        <member name="M:ThunderRoad.Credits.Show">
            <summary>
            Show the game credits movie
            </summary>
        </member>
        <member name="M:ThunderRoad.Credits.Show(System.Action)">
            <summary>
            Show the game credits movie. Invoke callback when it's done
            </summary>
            <param name="endCallback">Callback that is executed at the end of the credits roll</param>
        </member>
        <member name="E:ThunderRoad.LiquidReceiver.OnReceptionEvent">
            <summary>
            Invoked when liquid is consumed.
            </summary>
        </member>
        <member name="P:ThunderRoad.LiquidReceiver.Relay">
            <summary>
            This mouth relay.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIAttributeDisplay.Setup(ThunderRoad.UIAttributeData)">
            <summary>
            Setup this display from the attribute target.
            </summary>
        </member>
        <member name="F:ThunderRoad.UpdateManager.frameCount">
            <summary>
            Time.frameCount
            </summary>
        </member>
        <member name="F:ThunderRoad.UpdateManager.fixedFrameCount">
            <summary>
            Fixed update frame count since startup
            </summary>
        </member>
        <member name="P:ThunderRoad.GolemAbility.HeadshotInterruptable">
            <summary>
            Whether a headshot should interrupt and <c>End()</c> this ability.
            </summary>
        </member>
        <member name="P:ThunderRoad.GolemAbility.OverrideLook">
            <summary>
            Whether the golem should ask this ability where to look.
            Runs <c>GolemAbility.LookAt()</c> during the golem's <c>LookAtCoroutine</c> if true.
            </summary>
        </member>
        <member name="M:ThunderRoad.GolemAbility.ForceRun">
            <summary>
            Force-run this ability, cancelling whatever the golem was doing before. Not a particularly safe method.
            </summary>
        </member>
        <member name="M:ThunderRoad.GolemAbility.LookAt">
            <summary>
            If <c>OverrideLook</c> is true, this is called during the golem's <c>LookAtCoroutine</c> instead of the default behaviour.
            </summary>
        </member>
        <member name="M:ThunderRoad.GolemAbility.Allow(ThunderRoad.GolemController)">
            <summary>
            Whether this ability should be allowed to run.
            </summary>
            <param name="golem"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.GolemAbility.Begin(ThunderRoad.GolemController)">
            <summary>
            Called when the ability first starts. Load data and tell the golem to play animations here.
            </summary>
            <param name="golem"></param>
        </member>
        <member name="M:ThunderRoad.GolemAbility.TryAbilityStep(UnityEngine.AnimationEvent)">
            <summary>
            Called when the golem's current animation triggers an AbilityStep event.
            </summary>
            <param name="step"></param>
        </member>
        <member name="M:ThunderRoad.GolemAbility.AbilityStep(System.Int32)">
            <summary>
            Called when the golem's current animation triggers an AbilityStep event.
            </summary>
            <param name="step"></param>
        </member>
        <member name="M:ThunderRoad.GolemAbility.OnCycle(System.Single)">
            <summary>
            This is called once every Golem update cycle (every 0.5 seconds by default).
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:ThunderRoad.GolemAbility.OnUpdate">
            <summary>
            This is called once every ManagedUpdate.
            </summary>
        </member>
        <member name="M:ThunderRoad.GolemAbility.Interrupt">
            <summary>
            This is called when the ability is interrupted by a crystal being broken.
            </summary>
        </member>
        <member name="M:ThunderRoad.GolemAbility.End(System.Boolean)">
            <summary>
            Call this to kindly ask the GolemController to safely end this ability.
            </summary>
        </member>
        <member name="M:ThunderRoad.GolemAbility.OnEnd">
            <summary>
            Called when the ability should end. Put code to end and clean up your ability here,
            but do not call this directly - use <c>GolemAbility.End()</c> instead.
            </summary>
        </member>
        <member name="T:ThunderRoad.ThunderBehaviour">
             <summary>
             Scripts which use this implementation of MonoBehaviour will be subscribed to the managed update loops
             </summary>
            https://docs.unity3d.com/Manual/ExecutionOrder.html
        </member>
        <member name="P:ThunderRoad.ThunderBehaviour.gameObject">
            <summary>
            Overrides Unitys gameObject engine call and gets the cached gameObject for this ThunderBehaviour
            </summary>
        </member>
        <member name="P:ThunderRoad.ThunderBehaviour.transform">
            <summary>
            Overrides Unitys transform engine call and gets the cached transform for this ThunderBehaviour
            </summary>
        </member>
        <member name="P:ThunderRoad.ThunderBehaviour.EnabledManagedLoops">
            <summary>
            Defines which loops will be executed on this behaviour. It is checked during OnEnable and OnDisable
            </summary>
        </member>
        <member name="M:ThunderRoad.Pointer.PlayOneShot(System.Object,System.Single)">
            <summary>
            Will attempt to load and play a one shot audio clip from the address location if its an AudioContainer
            </summary>
            <param name="addressLocation"></param>
            <param name="volumeLinear"></param>
        </member>
        <member name="M:ThunderRoad.Pointer.PlayOneShot(ThunderRoad.AudioContainer,System.Single)">
            <summary>
            Will attempt to play a one shot audio clip from the audio container
            </summary>
            <param name="audioContainer"></param>
            <param name="volumeLinear"></param>
        </member>
        <member name="M:ThunderRoad.Pointer.PlayOneShot(UnityEngine.AudioClip,System.Single)">
            <summary>
            Will play a one shot audio clip
            </summary>
            <param name="clip"></param>
            <param name="volumeLinear"></param>
        </member>
        <member name="M:ThunderRoad.TMPWarper.Refresh">
            <summary>
            Refresh the curved text.
            </summary>
        </member>
        <member name="M:ThunderRoad.TMPWarper.Warp(System.Single)">
            <summary>
            Curve the target text.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIQAMenu.ResetLevelSettings">
            <summary>
            Reset previously selected settings
            </summary>
        </member>
        <member name="M:ThunderRoad.UIQAMenu.ToggleLevelSettings(ThunderRoad.LevelData)">
            <summary>
            Show/hide general level settings and dungeon levels settings
            </summary>
            <param name="levelData">Level data of the selected level. Null if no level is selected</param>
        </member>
        <member name="M:ThunderRoad.UIQAMenu.ToggleDungeonSeedKeyboard(System.Boolean)">
            <summary>
            Show/hide the numpad keyboard to enter the dungeon seed, and show/hide other UI elements
            </summary>
        </member>
        <member name="T:ThunderRoad.CreatureMouthRelay">
            <summary>
            This script allows events based around a creatures mouth(s) to be triggered and hooked into.
            </summary>
        </member>
        <member name="F:ThunderRoad.CreatureMouthRelay.creature">
            <summary>
            The creature this relay is for.
            </summary>
        </member>
        <member name="F:ThunderRoad.CreatureMouthRelay.OnParticleCollideEvent">
            <summary>
            Invoked when a particle collides.
            
            This gets invoked from LiquidReciever, here just for the sake of consistency.
            </summary>
        </member>
        <member name="E:ThunderRoad.CreatureMouthRelay.OnObjectTouchMouthEvent">
            <summary>
            Invoked when an object touches the mouth.
            </summary>
        </member>
        <member name="E:ThunderRoad.CreatureMouthRelay.OnObjectLeaveMouthEvent">
            <summary>
            Invoked when an object touches the mouth.
            </summary>
        </member>
        <member name="E:ThunderRoad.CreatureMouthRelay.OnItemTouchMouthEvent">
            <summary>
            Invoked when an item touches the mouth.
            </summary>
        </member>
        <member name="E:ThunderRoad.CreatureMouthRelay.OnItemLeaveMouthEvent">
            <summary>
            Invoked when an item leaves the mouth.
            </summary>
        </member>
        <member name="E:ThunderRoad.CreatureMouthRelay.OnRelayUpdateEvent">
            <summary>
            Invoked each frame when the relay updates, its useful for relay hooks like the LiquidReciever to reduce the update call count.
            </summary>
        </member>
        <member name="M:ThunderRoad.CreatureMouthRelay.OnCreatureDied(ThunderRoad.CollisionInstance,ThunderRoad.EventTime)">
            <summary>
            Invoked when this creature dies.
            </summary>
        </member>
        <member name="M:ThunderRoad.CreatureMouthRelay.OnCreatureDespawn(ThunderRoad.EventTime)">
            <summary>
            Invoked when this creature is despawned.
            </summary>
        </member>
        <member name="M:ThunderRoad.CreatureMouthRelay.OnRagdollStateChange(ThunderRoad.Ragdoll.State,ThunderRoad.Ragdoll.State,ThunderRoad.Ragdoll.PhysicStateChange,ThunderRoad.EventTime)">
            <summary>
            Invoked when the state of this ragdoll changes.
            </summary>
        </member>
        <member name="F:ThunderRoad.Catalog.baseTypeCategories">
            <summary>
            A mapping of all of the base types to their catalog Categories
            </summary>
        </member>
        <member name="M:ThunderRoad.Catalog.Init">
            <summary>
            Init the catalog on game start
            </summary>
        </member>
        <member name="M:ThunderRoad.Catalog.OnLanguageChanged(System.String)">
            <summary>
            Method to update data when the language changes
            </summary>
            <param name="language">Language key</param>
        </member>
        <member name="M:ThunderRoad.Catalog.GetPreCatalogLoadText(System.String)">
            <summary>
            Use this just for strings that need to be displayed in the UI when the game starts and before the catalog is loaded.
            Note: Add new entries (some are in Unicode) when new languages are added
            </summary>
            <param name="stringId">String id from the Default text group</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:ThunderRoad.Catalog.InstantiateCoroutine``1(System.Object,System.Action{``0},System.String)">
            <summary>
            Instantiates a prefab and returns either the prefab itself if the Type param is GameObject or a component on the gameobject of type T
            </summary>
            <param name="location"></param>
            <param name="callback"></param>
            <param name="handlerName"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.ItemSpawner.GetItemData(System.Random)">
            <summary>
            Returns the item data linked to this ID int the catalog.
            If we use a loot table, use the random Pick() method.
            </summary>
            <returns>The item data in the catalog, null if not found</returns>
        </member>
        <member name="M:ThunderRoad.ItemSpawner.AlignAndPlaceItem(ThunderRoad.Item,System.Random)">
            <summary>
            Places the item.
            Using a separate method allows for correctly placed gizmos
            </summary>
            <param name="item">item to place and align.</param>
        </member>
        <member name="M:ThunderRoad.ItemSpawner.ResetSpawnedItems(System.Boolean)">
            <summary>
            Resets "unused" items transformations.
            Useful for resetting props, as if they were spawning again
            </summary>
            <param name="forceDisallowDespawn">If true, ignore disallow despawn and spawn times equal to zero. Used by item spawners</param>
        </member>
        <member name="M:ThunderRoad.ItemSpawner.UnloadFromSpawner(ThunderRoad.Item)">
            <summary>
            Remove item from spawned items list (Used to keep track of what has been spawned).
            Automatically called on item despawn
            </summary>
            <param name="item">Item to remove from the list</param>
        </member>
        <member name="M:ThunderRoad.InputBase.GetFBTTrackersDefaultPositions(System.Single,ThunderRoad.Creature)">
            <summary>
            Get or compute the default position of FBT trackers
            </summary>
            <param name="height">The real height of the user</param>
            <param name="creature">The creature we are going to calibrate against</param>
            <returns>An array of default tracker position containing {LeftFoot, RightFoot, Waist}</returns>
        </member>
        <member name="M:ThunderRoad.InputBase.GetFBTTrackersDefaultRotations(System.Single,ThunderRoad.Creature)">
            <summary>
            Get or compute the default rotation of FBT trackers
            </summary>
            <param name="height">The real height of the user</param>
            <returns>An array of default tracker rotation containing {LeftFoot, RightFoot, Waist}</returns>
        </member>
        <member name="F:ThunderRoad.InventorySlot.itemContent">
            <summary>
            The itemContent data for the snapped item
            </summary>
        </member>
        <member name="F:ThunderRoad.InventorySlot.holderIndex">
            <summary>
            The index of this holder in reference to what page it is on in the inventory
            </summary>
        </member>
        <member name="M:ThunderRoad.Mirror.SetEditMode(System.Boolean)">
            <summary>
            Toggle the armour edit mode.
            This is used in the Lever event for the bench.
            </summary>
        </member>
        <member name="M:ThunderRoad.UICatalogModDisplay.SetupTags">
            <summary>
            Show tags according to the selected language
            </summary>
        </member>
        <member name="M:ThunderRoad.UICatalogModDisplay.TryInstall">
            <summary>
            Try install this mod.
            </summary>
        </member>
        <member name="M:ThunderRoad.UICatalogModDisplay.IsCompatible">
            <summary>
            This method checks this mods tags and returns if mod can be used on the current game version.
            </summary>
        </member>
        <member name="M:ThunderRoad.IKControllerFIK.GetLocomotionWeight">
            LOCOMOTION
        </member>
        <member name="M:ThunderRoad.IKControllerFIK.GetLookAtWeight">
            EYES
        </member>
        <member name="M:ThunderRoad.IKControllerFIK.SetHeadAnchor(UnityEngine.Transform)">
            HEAD
        </member>
        <member name="M:ThunderRoad.IKControllerFIK.SetHipsAnchor(UnityEngine.Transform)">
            HIPS
        </member>
        <member name="M:ThunderRoad.IKControllerFIK.SetShoulderAnchor(ThunderRoad.Side,UnityEngine.Transform)">
            UPPER ARM / SHOULDER
        </member>
        <member name="M:ThunderRoad.IKControllerFIK.SetHandAnchor(ThunderRoad.Side,UnityEngine.Transform,UnityEngine.Quaternion)">
            HANDS
        </member>
        <member name="M:ThunderRoad.IKControllerFIK.SetFootAnchor(ThunderRoad.Side,UnityEngine.Transform,UnityEngine.Quaternion)">
            FOOTS
        </member>
        <member name="M:ThunderRoad.LootTable.DropLevel.AssessLevel(System.Boolean)">
            <summary>
            Calculates the percentage and asigns the probabilities how many times
            the items can be picked. Function used also to validate data when tweaking numbers in editor.
            </summary>	
        </member>
        <member name="M:ThunderRoad.LoreScriptableObject.GetLoreHashId(System.String)">
            <summary>
            Get the lore hash id of a specific lore pack from the lore tree 
            </summary>
            <param name="lorePackName">Lore pack name must be composed by the lore pack folder name</param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.UIMenu.UpdateTogglesTextTransform">
            <summary>
            Update TMP rect transform height according to the amount of lines used by the toggle name
            </summary>
        </member>
        <member name="M:ThunderRoad.EffectModule.CheckQualityLevel">
            <summary>
            Checks if this effect should be spawned on the current running platform
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.SphereCenterSolver.#ctor(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Computes the centre of a sphere such that all four specified points in
            3D space lie on the sphere's surface.
            </summary>
            <param name="p1">The first point</param>
            <param name="p2">The second point</param>
            <param name="p3">The third point</param>
            <param name="p4">The fourth point</param>
        </member>
        <member name="M:ThunderRoad.SphereCenterSolver.Compute(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Evaluate the determinant.
            </summary>
        </member>
        <member name="M:ThunderRoad.SphereCenterSolver.Determinant(System.Double[0:,0:],System.Double)">
            <summary>
            Recursive definition of determinate using expansion by minors.
            </summary>
        </member>
        <member name="T:ThunderRoad.ItemAlwaysReturnsInInventory">
            <summary>
            An item with this component will be stored when too far from the player
            The item need to be grabbed once in order to work
            </summary>
        </member>
        <member name="F:ThunderRoad.ItemAlwaysReturnsInInventory.returnsToLastHolder">
            <summary>
            Item Should return to last holder instead of inventory
            </summary>
        </member>
        <member name="F:ThunderRoad.ItemAlwaysReturnsInInventory.targetItem">
            <summary>
            Item to return in inventory
            </summary>
        </member>
        <member name="F:ThunderRoad.ItemAlwaysReturnsInInventory.returnsOnItemRelease">
            <summary>
             Should the item return when the player ungrab item
            </summary>
        </member>
        <member name="F:ThunderRoad.ItemAlwaysReturnsInInventory.maxDistanceBeforeReturning">
            <summary>
            Distance under which the item stays still
            </summary>
        </member>
        <member name="F:ThunderRoad.ItemAlwaysReturnsInInventory.returnsWhenNotLookingAtIt">
            <summary>
            Should the item return when the player doesn't look at it for X seconds ?
            </summary>
        </member>
        <member name="F:ThunderRoad.ItemAlwaysReturnsInInventory.returnsAfterReachingMaxDistance">
            <summary>
            Should the item return when the item goes beyond a distance threshold ?
            </summary>
        </member>
        <member name="F:ThunderRoad.ItemAlwaysReturnsInInventory.timeAfterWhichItemReturn">
            <summary>
            Time after which the item returns (when not looked)
            </summary>
        </member>
        <member name="F:ThunderRoad.ItemAlwaysReturnsInInventory.useReturningAnimation">
            <summary>
            Set true to have a returning animation.
            </summary>
        </member>
        <member name="F:ThunderRoad.ItemAlwaysReturnsInInventory.returningVelocityValue">
            <summary>
            the velocity magnitude whern returning
            </summary>
        </member>
        <member name="F:ThunderRoad.ItemAlwaysReturnsInInventory.active">
            <summary>
            Is the return constraint active ?
            </summary>
        </member>
        <member name="F:ThunderRoad.ItemAlwaysReturnsInInventory.lastLookTime">
            <summary>
            Time at which the item was last looked
            </summary>
        </member>
        <member name="F:ThunderRoad.ItemAlwaysReturnsInInventory.isReturning">
            <summary>
            True when the item is returning to the backpack
            </summary>
        </member>
        <member name="F:ThunderRoad.ItemAlwaysReturnsInInventory.lastHolder">
            <summary>
            lastholder is used for item that return to holders
            </summary>
        </member>
        <member name="M:ThunderRoad.ItemAlwaysReturnsInInventory.Init(ThunderRoad.Item,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Single,System.Boolean,System.Single)">
            <summary>
            Inits the constraint
            </summary>
            <param name="item">Item to be hooked on</param>
            <param name="returnsWhenNotLookingAtIt">The item returns in the backpack when the player is not looking at it</param>
            <param name="maxDistanceBeforeReturning">Max distance from the player before the item gets stored</param>
        </member>
        <member name="M:ThunderRoad.ItemAlwaysReturnsInInventory.OnLevelUnload(ThunderRoad.LevelData,ThunderRoad.LevelData.Mode,ThunderRoad.EventTime)">
            <summary>
            When level unload return item to inventory to avoid losing it
            </summary>
            <param name="levelData"></param>
            <param name="eventTime"></param>
        </member>
        <member name="M:ThunderRoad.ItemAlwaysReturnsInInventory.OnGrab(ThunderRoad.Handle,ThunderRoad.RagdollHand)">
            <summary>
            When the player grabs this item, the constraint resets
            </summary>
            <param name="handle">Unused</param>
            <param name="ragdollHand">Unused</param>
        </member>
        <member name="M:ThunderRoad.ItemAlwaysReturnsInInventory.OnUnGrab(ThunderRoad.Handle,ThunderRoad.RagdollHand,System.Boolean)">
            <summary>
            When the player un-grabs this item, the constraint activate
            </summary>
            <param name="handle">Unused</param>
            <param name="ragdollHand">Hand the un-grabbed the item</param>
            <param name="throwing">Unused</param>
        </member>
        <member name="M:ThunderRoad.ItemAlwaysReturnsInInventory.OnHandleReleases(ThunderRoad.Handle,ThunderRoad.RagdollHand,System.Boolean)">
            <summary>
            After the player releases the item handle (happens after OnUngrab)
            </summary>
            <param name="handle"></param>
            <param name="ragdollHand"></param>
            <param name="throwing"></param>
        </member>
        <member name="M:ThunderRoad.ItemAlwaysReturnsInInventory.ManagedUpdate">
            <summary>
            Tracks the variable to check when to return in inventory
            </summary>
        </member>
        <member name="M:ThunderRoad.ItemAlwaysReturnsInInventory.ReturnItem">
            <summary>
            start return animation or store item to backpack 
            </summary>
        </member>
        <member name="M:ThunderRoad.ItemAlwaysReturnsInInventory.AngleInPlane(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Compute the angle between a transform and a vector in a plane
            </summary>
            <param name="fromTransform">Transform to base plane from</param>
            <param name="toPosition">Position of the object to measure angle against</param>
            <param name="planeNormal">Normal of the plane</param>
            <returns>The angle in degrees</returns>
        </member>
        <member name="M:ThunderRoad.ItemAlwaysReturnsInInventory.Project(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Project a point onto a plane
            </summary>
            <param name="vectorToProject">Vector to project onto the plane</param>
            <param name="plane">plane to project on</param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.ItemAlwaysReturnsInInventory.OnDestroy">
            <summary>
            Unhook events on destroy
            </summary>
        </member>
        <member name="M:ThunderRoad.StatusManager.Register(ThunderRoad.StatusData)">
            <summary>
            Register status data to a particular status type
            </summary>
        </member>
        <member name="F:ThunderRoad.ItemMagicProjectile.guidanceAmount">
            <summary>Amount that the player hands influence the direction of the projectile in partial guidance mode</summary>
        </member>
        <member name="M:ThunderRoad.LoadingCamera.SetPercentageYield(System.Int32)">
            <summary>
            Encapsulates a yield
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.LoadingCamera.SetPercentageYield">
            <summary>
            Encapsulates a yield
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.LoadingCamera.SetPercentage">
            <summary>
            This will calculate the percentage based on the current stage in the flow
            </summary>
        </member>
        <member name="M:ThunderRoad.LoadingCamera.SetPercentage(System.Int32)">
            <summary>
            This will take in a percentage 0-100, from an external process,
            and scale it down to fit into the allocated percentage range it should have in the overall flow
            </summary>
            <param name="percentage"></param>
        </member>
        <member name="M:ThunderRoad.LoadingCamera.SetAdditionalLoadingTextInfoYield(System.String)">
            <summary>
            This texts gets appended onto the current loading text message, for things like appending mod names or sub stage names
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ThunderRoad.LoadingCamera.SetAdditionalLoadingTextInfo(System.String)">
            <summary>
            This texts gets appended onto the current loading text message, for things like appending mod names or sub stage names
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ThunderRoad.LoadingCamera.SetLoadingStage(ThunderRoad.LoadingCamera.Stage,System.Boolean)">
            <summary>
            This sets the loading stage, the stages are fixed on defined flows.
            The method will return the current stage number, and the total number of stages in this current loading Type
            </summary>
            <param name="stage"></param>
            <param name="setAutomaticPercentage"></param>
            <returns>(currentStage, totalStages)</returns>
        </member>
        <member name="M:ThunderRoad.CanvasFollowPlayerForward.AngleInPlane(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Compute the angle between a transform and a vector in a plane
            </summary>
            <param name="fromTransform">Transform to base plane from</param>
            <param name="toPosition">Position of the object to measure angle against</param>
            <param name="planeNormal">Normal of the plane</param>
            <returns>The angle in degrees</returns>
        </member>
        <member name="M:ThunderRoad.CanvasFollowPlayerForward.Project(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Project a point onto a plane
            </summary>
            <param name="vectorToProject">Vector to project onto the plane</param>
            <param name="plane">plane to project on</param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.CanvasFollowPlayerForward.UpdateLookAtEvents">
            <summary>
            Calls "look at" events based on the player head direction and the canvas position.
            </summary>
        </member>
        <member name="M:ThunderRoad.SkillTreeCrystal.OnUnGrabEvent(ThunderRoad.Handle,ThunderRoad.RagdollHand,System.Boolean)">
            Stop effects (and prevent merge in the early stages) on ungrab
        </member>
        <member name="M:ThunderRoad.SkillTreeCrystal.CrystalDespawned(ThunderRoad.EventTime)">
            Tidy up after ourselves
        </member>
        <member name="M:ThunderRoad.SkillTreeCrystal.TestMerge">
            Test if we can merge, and set up the conditions for the merge to start
        </member>
        <member name="M:ThunderRoad.SkillTreeCrystal.ConnectMergeVFX(UnityEngine.Transform)">
            Connect this crystal to its merge point
        </member>
        <member name="M:ThunderRoad.SkillTreeCrystal.DisconnectMergeVFX">
            Stop all merge VFX
        </member>
        <member name="M:ThunderRoad.SkillTreeCrystal.IsSkillOnTree(ThunderRoad.SkillData)">
            <summary>
            Returns true if the skill is on the same tree or on a combining tree
            </summary>
            <param name="skill"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.SkillTreeCrystal.UpdateCrystalsLink">
            <summary>
            Update link and merge VFX, this is also where the actual merge is triggered
            (because we want to sync up the VFX and the start of the merge)
            </summary>
        </member>
        <member name="M:ThunderRoad.SkillTreeCrystal.MergeCrystal(ThunderRoad.SkillTreeCrystal,ThunderRoad.SkillTreeCrystal)">
            Static method to merge two crystals
        </member>
        <member name="M:ThunderRoad.SkillTreeCrystal.MergeCoroutine(ThunderRoad.SkillTreeCrystal,ThunderRoad.SkillTreeCrystal,ThunderRoad.ItemData,System.String,System.Int32)">
            <summary>
            Where the merge-y magic happens. Brings crystals close together, plays an effect, then calls FinishMerge once done.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.SkillTreeCrystal.FinishMerge(ThunderRoad.SkillTreeCrystal,ThunderRoad.SkillTreeCrystal,ThunderRoad.ItemData,System.String,System.Int32)">
            <summary>
            Finish the merge, despawn old crystals, spawn new crystals and leftover shards.
            </summary>
        </member>
        <member name="M:ThunderRoad.LoreDisplayTypeScriptableObject.Create(System.String,UnityEngine.Color32)">
            <summary>
            Can be deleted after we have some specified, just used to generate dummy data.
            See: LoreModule @ 233 (GetAllDisplayType)
            If it's not using dummy data this can be deleted.
            </summary>
        </member>
        <member name="M:ThunderRoad.BrainModuleHitReaction.IsCreatureGrounded">
            <summary>
            Check if the creature is touching the ground by BrainModuleHitReaction's standards
            </summary>
            <returns>True if either foot is touching the ground, false if neither is</returns>
        </member>
        <member name="M:ThunderRoad.BrainModuleHitReaction.SetStagger(System.Single)">
            <summary>
            Sets stagger state based on recoil float
            </summary>
            <param name="staggerRecoil"></param>
            <returns>True if the stagger is fully handled (Destabilized or none), false if greater stagger necessary</returns>
        </member>
        <member name="M:ThunderRoad.CreatureData.GetPrimaryHairColors(ThunderRoad.CreatureData.EthnicGroup,System.Boolean)">
            <summary>
            Returns the full list of available primary hair colors for the ethnic group.
            </summary>
            <param name="ethnicGroup">Ethnic group to get the colors from.</param>
            <param name="useSharedColors">If true, adds the colors from the shared colors list.</param>
            <returns>A primary hair color.</returns>
        </member>
        <member name="M:ThunderRoad.CreatureData.GetSecondaryHairColors(ThunderRoad.CreatureData.EthnicGroup,System.Boolean)">
            <summary>
            Returns the full list of available secondary hair colors for the ethnic group.
            </summary>
            <param name="ethnicGroup">Ethnic group to get the colors from.</param>
            <param name="useSharedColors">If true, adds the colors from the shared colors list.</param>
            <returns>A secondary hair color.</returns>
        </member>
        <member name="M:ThunderRoad.CreatureData.GetSpecularHairColors(ThunderRoad.CreatureData.EthnicGroup,System.Boolean)">
            <summary>
            Returns the full list of available specular hair colors for the ethnic group.
            </summary>
            <param name="ethnicGroup">Ethnic group to get the colors from.</param>
            <param name="useSharedColors">If true, adds the colors from the shared colors list.</param>
            <returns>A specular hair color.</returns>
        </member>
        <member name="M:ThunderRoad.CreatureData.GetIrisColors(ThunderRoad.CreatureData.EthnicGroup,System.Boolean)">
            <summary>
            Returns the full list of available iris colors for the ethnic group.
            </summary>
            <param name="ethnicGroup">Ethnic group to get the colors from.</param>
            <param name="useSharedColors">If true, adds the colors from the shared colors list.</param>
            <returns>An iris color.</returns>
        </member>
        <member name="M:ThunderRoad.CreatureData.GetScleraColors(ThunderRoad.CreatureData.EthnicGroup,System.Boolean)">
            <summary>
            Returns the full list of available sclera colors for the ethnic group.
            </summary>
            <param name="ethnicGroup">Ethnic group to get the colors from.</param>
            <param name="useSharedColors">If true, adds the colors from the shared colors list.</param>
            <returns>A sclera color.</returns>
        </member>
        <member name="M:ThunderRoad.CreatureData.GetSkinColors(ThunderRoad.CreatureData.EthnicGroup,System.Boolean)">
            <summary>
            Returns the full list of available skin colors for the ethnic group.
            </summary>
            <param name="ethnicGroup">Ethnic group to get the colors from.</param>
            <param name="useSharedColors">If true, adds the colors from the shared colors list.</param>
            <returns>A skin color.</returns>
        </member>
        <member name="M:ThunderRoad.CreatureData.PickHairColorPrimary(ThunderRoad.CreatureData.EthnicGroup,System.Int32,System.Boolean)">
            <summary>
            Returns a primary hair color of the given ethnic group and index.
            Returns random one if the index is out of bounds.
            Uses the shared color pool too if specified.
            </summary>
            <param name="ethnicGroup">Ethnic group to get the color from.</param>
            <param name="colorIndex">Index of the color to pick. If out of bounds, returns a random one</param>
            <param name="useSharedColors">If true, adds the colors from the shared colors list.</param>
            <returns>A primary hair color.</returns>
        </member>
        <member name="M:ThunderRoad.CreatureData.PickHairColorSecondary(ThunderRoad.CreatureData.EthnicGroup,System.Int32,System.Boolean)">
            <summary>
            Returns a random secondary hair color of the given ethnic group and index.
            Returns random one if the index is out of bounds.
            Uses the shared color pool too if specified.
            </summary>
            <param name="ethnicGroup">Ethnic group to get the color from.</param>
            <param name="colorIndex">Index of the color to pick. If out of bounds, returns a random one</param>
            <param name="useSharedColors">If true, adds the colors from the shared colors list.</param>
            <returns>A secondary hair color.</returns>
        </member>
        <member name="M:ThunderRoad.CreatureData.PickHairColorSpecular(ThunderRoad.CreatureData.EthnicGroup,System.Int32,System.Boolean)">
            <summary>
            Returns a random specular hair color of the given ethnic group and index.
            Returns random one if the index is out of bounds.
            Uses the shared color pool too if specified.
            </summary>
            <param name="ethnicGroup">Ethnic group to get the color from.</param>
            <param name="colorIndex">Index of the color to pick. If out of bounds, returns a random one</param>
            <param name="useSharedColors">If true, adds the colors from the shared colors list.</param>
            <returns>A specular hair color.</returns>
        </member>
        <member name="M:ThunderRoad.CreatureData.PickEyesColorIris(ThunderRoad.CreatureData.EthnicGroup,System.Int32,System.Boolean)">
            <summary>
            Returns a random iris eye color of the given ethnic group and index.
            Returns random one if the index is out of bounds.
            Uses the shared color pool too if specified.
            </summary>
            <param name="ethnicGroup">Ethnic group to get the color from.</param>
            <param name="colorIndex">Index of the color to pick. If out of bounds, returns a random one</param>
            <param name="useSharedColors">If true, adds the colors from the shared colors list.</param>
            <returns>An iris color.</returns>
        </member>
        <member name="M:ThunderRoad.CreatureData.PickEyesColorSclera(ThunderRoad.CreatureData.EthnicGroup,System.Int32,System.Boolean)">
            <summary>
            Returns a random sclera eye color of the given ethnic group and index.
            Returns random one if the index is out of bounds.
            Uses the shared color pool too if specified.
            </summary>
            <param name="ethnicGroup">Ethnic group to get the color from.</param>
            <param name="colorIndex">Index of the color to pick. If out of bounds, returns a random one</param>
            <param name="useSharedColors">If true, adds the colors from the shared colors list.</param>
            <returns>A sclera color.</returns>
        </member>
        <member name="M:ThunderRoad.CreatureData.PickSkinColor(ThunderRoad.CreatureData.EthnicGroup,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns a random skin color of the given ethnic group and index.
            Returns random one if the index is out of bounds.
            Uses the shared color pool too if specified.
            </summary>
            <param name="ethnicGroup">Ethnic group to get the color from.</param>
            <param name="colorIndex">Index of the color to pick. If out of bounds, returns a random one</param>
            <param name="useSharedColors">If true, adds the colors from the shared colors list.</param>
            <param name="useLastColour">Use the last skin colour in the group?</param>
            <returns>A skin color.</returns>
        </member>
        <member name="M:ThunderRoad.CreatureData.GetPooledCount">
            <summary>
            This returns the amount of this creatures Prefab should be pooled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.CreatureData.GeneratePool">
            <summary>
            This will generate a pool of creaturePrefabs for reach unique creature prefab address
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.CreatureData.ResetCreature(UnityEngine.Vector3,System.Single,UnityEngine.Transform,ThunderRoad.Creature)">
            <summary>
            Resets a creature to its default state
            </summary>
            <param name="position"></param>
            <param name="rotationY"></param>
            <param name="parent"></param>
            <param name="creature"></param>
        </member>
        <member name="M:ThunderRoad.CreatureData.InstantiateCoroutine(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,UnityEngine.Vector3,System.Single,UnityEngine.Transform,System.Action{ThunderRoad.Creature})">
            <summary>
            This method spawns the creature prefab as is and does not configure it with any armor or brains.
            </summary>
            <param name="prefabLocation"></param>
            <param name="position"></param>
            <param name="rotationY"></param>
            <param name="parent"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.CreatureData.InstantiateAsync(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,UnityEngine.Vector3,System.Single,UnityEngine.Transform,System.Action{ThunderRoad.Creature})">
            <summary>
            This method spawns an instance of the creatures prefab. It does not load any armor, brains or creature data
            </summary>
            <param name="prefabLocation"></param>
            <param name="position"></param>
            <param name="rotationY"></param>
            <param name="parent"></param>
            <param name="callback"></param>
        </member>
        <member name="M:ThunderRoad.CreatureData.ConfigCreature(ThunderRoad.Creature,ThunderRoad.WayPoint[])">
            <summary>
            Loads the creatureData onto the creature prefab, loads brains, armor etc
            </summary>
            <param name="creature"></param>
            <param name="waypoints"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.CreatureData.ConfigCreatureIEnumerator(ThunderRoad.Creature,ThunderRoad.WayPoint[])">
            <summary>
            Loads the creatureData onto the creature prefab, loads brains, armor etc
            </summary>
            <param name="creature"></param>
            <param name="waypoints"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.AssetReferenceAudioClip.#ctor(System.String)">
            <summary>
            Constructs a new reference to a AudioClip.
            </summary>
            <param name="guid">The object guid.</param>
        </member>
        <member name="M:ThunderRoad.AssetReferenceAudioContainer.#ctor(System.String)">
            <summary>
            Constructs a new reference to a AudioContainer.
            </summary>
            <param name="guid">The object guid.</param>
        </member>
        <member name="P:ThunderRoad.Common.SizeReferences">
            <summary>
            File size references.
            </summary>
        </member>
        <member name="M:ThunderRoad.Common.PlayClipAtPoint(ThunderRoad.AudioContainer,UnityEngine.Vector3,System.Single,ThunderRoad.AudioMixerName)">
            <summary>
            Play an audio container at the target point, with mixer support and db.
            </summary>
        </member>
        <member name="M:ThunderRoad.Common.PlayClipAtPoint(UnityEngine.AudioClip,UnityEngine.Vector3,System.Single,ThunderRoad.AudioMixerName)">
            <summary>
            Play an audio clip at the target point, with mixer support and db.
            </summary>
        </member>
        <member name="M:ThunderRoad.Common.IsVisibleToCamera(UnityEngine.Transform,UnityEngine.Camera)">
            <summary>
            Is the target gameobject visible to the input camera?
            </summary>
        </member>
        <member name="M:ThunderRoad.Common.WrapSafely(System.Collections.IEnumerator,System.Action{System.Exception})">
            <summary>
            Wrap an enumerator in a try/catch block to catch exceptions they may throw.
            </summary>
        </member>
        <member name="M:ThunderRoad.Common.TryGetChildDirectory(System.String)">
            <summary>
            Try get the child directory or return the original path.
            </summary>
        </member>
        <member name="M:ThunderRoad.Common.FormatSizeFromDirectory(System.String,System.String)">
            <summary>
            Get the total directory size and return it as a formatted string.
            </summary>
        </member>
        <member name="M:ThunderRoad.Common.FormatSizeFromBytes(System.Int32)">
            <summary>
            Convert the input bytes to a readable size..
            </summary>
        </member>
        <member name="M:ThunderRoad.Common.FormatSizeFromBytes(System.Int64,System.String)">
            <summary>
            Convert the input bytes to a readable size..
            </summary>
        </member>
        <member name="M:ThunderRoad.Common.GetTotalFreeSpace(System.Int64@)">
            <summary>
            Get the total free space left on the main drive.
            </summary>
            <returns>Available, out is total drive size</returns>
        </member>
        <member name="M:ThunderRoad.Common.CreateSprite(UnityEngine.Texture2D)">
            <summary>
            Create a sprite from the target texture.
            </summary>
        </member>
        <member name="M:ThunderRoad.Common.LoadTexture(System.Byte[])">
            <summary>
            Load a Texture2D from raw bytes.
            </summary>
        </member>
        <member name="M:ThunderRoad.Common.InverseTransformRotation(UnityEngine.Transform,UnityEngine.Quaternion)">
            <summary>
            Transforms rotation from world space to local space.
            </summary>
            <param name="transform"></param>
            <param name="rotation"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.Common.TransformRotation(UnityEngine.Transform,UnityEngine.Quaternion)">
            <summary>
            Transforms rotation from local space to world space.
            </summary>
            <param name="transform"></param>
            <param name="localRotation"></param>
            <returns></returns>
        </member>
        <member name="T:ThunderRoad.LevelInstance">
            <summary>
            A LevelInstance is an instance of a LevelData
            </summary>
        </member>
        <member name="M:ThunderRoad.LevelInstance.GetMode">
            <summary>
            Gets the level mode for this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.LevelInstance.IsUserConfigurable">
            <summary>
            The Level should be configurable on the MapBoard if there is no predefined data in the LevelInstance
            </summary>
            <returns></returns>
        </member>
        <member name="P:ThunderRoad.LevelInstance.mapLocationIndex">
            <summary>
            Get the map loction index depending on instanceData or levelData
            </summary>
        </member>
        <member name="P:ThunderRoad.LevelInstance.isMapLocationLocked">
            <summary>
            The map location will depend on free location on the map.
            The first time the location is chosen, we lock the location so it will always be at the same position.
            </summary>
        </member>
        <member name="P:ThunderRoad.LevelInstance.mapLocationRandomNearest">
            <summary>
            Get the map loction random nearest value. Use to define how many location should be pick for random selection the first time.
            </summary>
        </member>
        <member name="F:ThunderRoad.UIWorldMap.overlapLocation">
            <summary>
            link location to other location that are too close
            </summary>
        </member>
        <member name="M:ThunderRoad.UIWorldMap.AddLocation(ThunderRoad.LevelInstance,System.Collections.Generic.Dictionary{System.String,UnityEngine.Texture},System.Int32)">
            <summary>
            Add Location on map and return the index where it have been place.
            </summary>
            <param name="levelInstance"></param>
            <param name="loadedIconTexture">Dictionary containing all texture for icon preloaded</param>
            <param name="randomNearest">The number of nearest position valid to take if base location not valid to take for a random. 1 will always take the nearest valid location</param>
            <returns>index if the map has been place at the exact index place, or the index of the nearest position. -1 if failed</returns>
        </member>
        <member name="M:ThunderRoad.UIWorldMap.IsAllOverlapLocationFree(System.Int32)">
            <summary>
            Check if other location that may overlap is free (still need to check that the location itself is free)
            </summary>
            <param name="index">the index of the location </param>
            <returns>true if overlapping locations are free</returns>
        </member>
        <member name="M:ThunderRoad.ContainerSpawner.Spawn(System.Action{ThunderRoad.ItemContent,System.Int32})">
            <summary>
            Spawn this container and return all objects that were spawned.
            </summary>
            <param name="overrideSpawn">Allows each spawned item to be spawned in another way than the default.</param>
        </member>
        <member name="M:ThunderRoad.ContainerSpawner.Spawn(System.Action{ThunderRoad.Item,System.Int32})">
            <summary>
            Spawn this container and return all objects that were spawned.
            </summary>
            <param name="callback">callback with item and point index.</param>
        </member>
        <member name="M:ThunderRoad.ContainerSpawner.GetRandomSpawnPoint(System.Collections.Generic.List{System.ValueTuple{System.Int32,System.Boolean}},System.ValueTuple{System.Int32,System.Boolean}[]@,System.ValueTuple{System.Int32,System.Boolean}@)">
            <summary>
            Get a random spawn point that isn't taken.
            </summary>
        </member>
        <member name="M:ThunderRoad.ContainerSpawner.SelectRandomObjects(System.Collections.Generic.List{ThunderRoad.ItemContent},System.Boolean)">
            <summary>
            Returns an array of content filled with randomly selected objects.
            
            If recursive objects aren't allowed the list may be shorter than the capacity if the collection is less than the spawn points.
            </summary>
            <param name="allowDuplicates">Can the same object spawn multiple times?</param>
        </member>
        <member name="M:ThunderRoad.ContainerSpawner.GetNoneRecursive``1(System.Collections.Generic.List{``0},``0[],``0)">
            <summary>
            Tries to return an object that is unique to the input list.
            </summary>
            <param name="masterList">All collections.</param>
            <param name="content">Current collections.</param>
            <param name="selected">Currently Selected Collection.</param>
        </member>
        <member name="M:ThunderRoad.ContainerSpawner.OnItemSpawn(ThunderRoad.Item,System.Int32)">
            <summary>
            Invoked when an item has been spawned.
            </summary>
        </member>
        <member name="M:ThunderRoad.ContainerSpawner.ReloadJson">
            <summary>
            If the spawner isn't registering the files this will quickly allow the artist to do a one-click fix.
            </summary>
        </member>
        <member name="T:ThunderRoad.ItemModuleEdible">
            <summary>
            Any item with this module will be edible.
            </summary>
        </member>
        <member name="E:ThunderRoad.ItemModuleEdible.OnEdibleConsumed">
            <summary>
            Invoked when an edible of this module is consumed.
            </summary>
        </member>
        <member name="M:ThunderRoad.LightingGroup.ApplySceneSettings(System.Boolean)">
            <summary>
            Apply only scene settings
            </summary>
        </member>
        <member name="M:ThunderRoad.LightingGroup.ApplySkySceneSettings">
            <summary>
            Apply only sky scene settings
            </summary>
        </member>
        <member name="M:ThunderRoad.LightingGroup.ApplySceneSettings(ThunderRoad.LightingPreset,System.Boolean)">
            <summary>
            Apply only scene settings
            </summary>
            <param name="lightingPreset">Reference of the lightingPreset asset where the settings should retrieved</param>
        </member>
        <member name="M:ThunderRoad.LightingGroup.ApplySkySceneSettings(ThunderRoad.LightingPreset)">
            <summary>
            Apply only sky scene settings. (directional lights, skybox and fog) 
            </summary>
            <param name="lightingPreset">Reference of the lightingPreset asset where the settings should retrieved</param>
        </member>
        <member name="M:ThunderRoad.LightingGroup.BlendSceneSettingsWithCurrent(System.Single,System.Boolean,System.Boolean)">
            <summary>
            Apply only scene settings
            </summary>
            <param name="t">When t is 0 current level preset is fully apply, when t is 1 this lighting preset is fully apply</param>
        </member>
        <member name="M:ThunderRoad.LightingGroup.ClearAll">
            <summary>
            Clear all lightingPreset settings except scene settings
            </summary>
        </member>
        <member name="M:ThunderRoad.LightingGroup.ClearOnImport">
            <summary>
            Clears the lightmap references when the area is imported.
            </summary>
        </member>
        <member name="M:ThunderRoad.Imbue.Stop">
            <summary>
            Stops the imbue completely in a single frame
            </summary>
        </member>
        <member name="M:ThunderRoad.Imbue.SetEnergyInstant(System.Single)">
            <summary>
            Set the energy value instantly
            </summary>
            <param name="newEnergy">energy value to set</param>
        </member>
        <member name="M:ThunderRoad.Imbue.Transfer(ThunderRoad.SpellCastCharge,System.Single,ThunderRoad.Creature)">
            <summary>
            Transfer a spell with a certain energy to this imbue
            </summary>
            <param name="spellCastBase">The spell to imbue</param>
            <param name="energyTransferred">The amount of energy transferred into the imbue for this spell</param>
            <param name="imbuingCreature">The creature who is imbuing the spell</param>
            <returns>The new spell instance ONLY if it was freshly loaded via this call to Transfer()</returns>
        </member>
        <member name="T:ThunderRoad.Ragdoll.StabilizationJointQueue">
            <summary> 
            Helper class to keep the line of which objects would like to apply a stabilization joint.
            </summary>
        </member>
        <member name="T:ThunderRoad.Ragdoll.StabilizationJointSettings">
            <summary>
            Helper class to assign necessary settings to the joint,
            nearly identical to the stabilization joint, but additional stuff might be needed sometimes
            </summary>
        </member>
        <member name="M:ThunderRoad.Ragdoll.HasMovingItemAtProximity">
            <summary>
            Check in the moving item hashset if an item is close enough.
            </summary>
            <returns>True if an item is close enough, false otherwise</returns>
        </member>
        <member name="M:ThunderRoad.Ragdoll.AddStabilizationJoint(UnityEngine.GameObject,ThunderRoad.Ragdoll.StabilizationJointSettings)">
            <summary>
            Adds a stabilization joint connected to the root of the ragdoll
            If the stabilization joint already exists, it will take any further requests to enable it and add it to a queue. 
            When one component removes the joint it will look for the next one to take over
            </summary>
            <param name="owningObject">The object to which the joint will be applied</param>
            <param name="relativeObject">The object relative to which this root will be placed</param>
            
        </member>
        <member name="M:ThunderRoad.Ragdoll.HasStabilizationJointEnabled">
            <summary>
            When this ragdoll already possess a stabilization joint
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.Ragdoll.HasStabilizationJoint(UnityEngine.GameObject)">
            <summary>
            When this ragdoll already possess a stabilization joint
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.Ragdoll.RemoveStabilizationJoint(UnityEngine.GameObject)">
            <summary>
            Removes the joint from this body and if there's a queue, adds it to the next item
            </summary>
        </member>
        <member name="M:ThunderRoad.UIInventory.Disable">
            <summary>
            Disable all inventory interactions
            </summary>
        </member>
        <member name="M:ThunderRoad.UIInventory.Enable">
            <summary>
            Enable all inventory interactions
            </summary>
        </member>
        <member name="M:ThunderRoad.UIInventory.SetActive(System.Boolean)">
            <summary>
            Enable or Disable all inventory interactions
            </summary>
        </member>
        <member name="M:ThunderRoad.WaveSpawner.GetWaveData">
            <summary>
            Returns the wave data linked to this ID in the catalog.
            </summary>
            <returns>The wave data in the catalog, null if not found</returns>
        </member>
        <member name="T:ThunderRoad.NoteManager">
            <summary>
            Allows text to material conversion.
            </summary>
        </member>
        <member name="P:ThunderRoad.NoteManager.Renderer">
            <summary>
            Camera used to render notes.
            </summary>
        </member>
        <member name="P:ThunderRoad.NoteManager.NoteTMP">
            <summary>
            Text the camera will project into a texture.
            </summary>
        </member>
        <member name="P:ThunderRoad.NoteManager.MaterialShader">
            <summary>
            Shader for materials to render from.
            </summary>
        </member>
        <member name="P:ThunderRoad.NoteManager.Initialized">
            <summary>
            Is this note manager initialized.
            </summary>
        </member>
        <member name="M:ThunderRoad.NoteManager.Initialize">
            <summary>
            Initializes the manager.
            </summary>
        </member>
        <member name="M:ThunderRoad.NoteManager.BuildNoteMaterial(System.Int32,System.String,UnityEngine.GameObject,UnityEngine.Material)">
            <summary>
            Build a new material with text rendered to it.
            </summary>
        </member>
        <member name="M:ThunderRoad.NoteManager.UpdateNoteMaterial(UnityEngine.Material,System.String,UnityEngine.GameObject)">
            <summary>
            Updates an existing noteMaterial's texture to reflect a change in note text.
            </summary>
        </member>
        <member name="M:ThunderRoad.HingeDrive.AutoClose">
            <summary>
            Activate a motor on the joint to close it with default parameters specified in editor.
            </summary>
        </member>
        <member name="M:ThunderRoad.HingeDrive.AutoOpenMin">
            <summary>
            Activate a motor on the joint to open it to minimal angle with default parameters specified in editor.
            </summary>
        </member>
        <member name="M:ThunderRoad.HingeDrive.AutoOpenMax">
            <summary>
            Activate a motor on the joint to open it to maximal angle with default parameters specified in editor.
            </summary>
        </member>
        <member name="M:ThunderRoad.HingeDrive.AutoRotateTo(System.Single)">
            <summary>
            Activate a motor on the joint to open it to some desired angle in degrees
            with default parameters specified in editor.
            </summary>
            <param name="targetAngle">Desired angle for the door to open to in degrees.</param>
        </member>
        <member name="M:ThunderRoad.HingeDrive.PreventOpening">
            <summary>
            Prevent opening this hinge drive
            </summary>
        </member>
        <member name="M:ThunderRoad.HingeDrive.AllowOpening">
            <summary>
            Allow opening this hinge drive with restored previous allowed inputs
            </summary>
        </member>
        <member name="M:ThunderRoad.HingeDrive.IgnoreCollision(UnityEngine.Collider,System.Boolean,System.Boolean)">
            <summary>
            Ignores collision with the given collider.
            </summary>
            <param name="colliderToIgnore">Collider to ignore</param>
            <param name="withFrame">Should we ignore the collision with the frame?</param>
            <param name="withHingeHolder">Should we ignore the collision with the hinge holder?</param>
        </member>
        <member name="M:ThunderRoad.HingeDrive.IsHandleLatchLock(ThunderRoad.Handle)">
            <summary>
            Check if the handle latch is locked
            </summary>
            <param name="handle">The handle you want to know if its locked</param>
            <returns>True if handle latch is Lock</returns>
        </member>
        <member name="M:ThunderRoad.HingeDrive.LockHandleLatch(ThunderRoad.Handle)">
            <summary>
            Lock handle latch so it wont open the door using the handle
            </summary>
            <param name="handle">The handle you want to be lock</param>
        </member>
        <member name="M:ThunderRoad.HingeDrive.UnLockhandleLatch(ThunderRoad.Handle)">
            <summary>
            unlock handle latch so it wont open the door using the handle
            </summary>
            <param name="handle">The handle you want to be unlock</param>
        </member>
        <member name="M:ThunderRoad.HingeDrive.AutoOpenTo01(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Activate a motor on the joint to open it.
            </summary>
            <param name="angle01">Desired angle between 0 (min angle), and 1 (max angle).</param>
            <param name="targetVelocity">Desired velocity for the motor.</param>
            <param name="force">Desired force for the motor.</param>
            <param name="bypassLatch">Force open the latch (or not) if encountered.</param>
        </member>
        <member name="M:ThunderRoad.HingeDrive.AutoOpenTo01(System.Single)">
            <summary>
            Activate a motor on the joint to open it with default parameters specified in editor.
            </summary>
            <param name="angle01">Desired angle between 0 (min angle), and 1 (max angle).</param>
        </member>
        <member name="M:ThunderRoad.HingeDrive.AutoClose(System.Single,System.Single)">
            <summary>
            Activate a motor on the joint to close it, finding nearest latch.
            </summary>
            <param name="targetVelocity">Desired velocity for the motor.</param>
            <param name="force">Desired force for the motor.</param>
        </member>
        <member name="M:ThunderRoad.HingeDrive.GetClosestLatchAngle">
            <summary>
            Finds the nearest latch angle from the current hinge angle.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ThunderRoad.HingeDrive.GetClosestValue(System.Single,System.Single,System.Single)" -->
        <member name="M:ThunderRoad.HingeDrive.AutoOpenMin(System.Single,System.Single,System.Boolean)">
            <summary>
            Activate a motor on the joint to open it to minimal angle.
            </summary>
            <param name="targetVelocity">Desired velocity for the motor.</param>
            <param name="force">Desired force for the motor.</param>
            <param name="bypassLatch">Force open the latch (or not) if encountered.</param>
        </member>
        <member name="M:ThunderRoad.HingeDrive.AutoOpenMax(System.Single,System.Single,System.Boolean)">
            <summary>
            Activate a motor on the joint to open it to maximal angle.
            </summary>
            <param name="targetVelocity">Desired velocity for the motor.</param>
            <param name="force">Desired force for the motor.</param>
            <param name="bypassLatch">Force open the latch (or not) if encountered.</param>
        </member>
        <member name="M:ThunderRoad.HingeDrive.AutoRotateTo(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Activate a motor on the joint to open it to some desired angle in degrees.
            </summary>
            <param name="targetAngle">Desired angle for the door to open to in degrees.</param>
            <param name="targetVelocity">Desired velocity for the motor.</param>
            <param name="force">Desired force for the motor.</param>
            <param name="bypassLatch">Force open the latch (or not) if encountered.</param>
        </member>
        <member name="E:ThunderRoad.UIText.TextChanged">
            <summary>
            Invoked when this changes the target text component.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIText.SetLocalizationIds(System.String,System.String)">
            <summary>
            Use this method to change this label text from script.
            Once this localization data is set, the text label will automatically update on
            language change if this text is enable, otherwise it will update when its enabled.
            </summary>
            <param name="groupId">Id of the text group in the text files</param>
            <param name="stringId">Id of the string</param>
        </member>
        <member name="M:ThunderRoad.UIText.SetLocalizedText(System.String)">
            <summary>
            Use this method to set localized text that does not come from a TextGroup (ex: Items or Waves)
            </summary>
        </member>
        <member name="M:ThunderRoad.SkillData.OnSkillLoaded(ThunderRoad.SkillData,ThunderRoad.Creature)">
            <summary>
            Called when the skill is loaded on a creature, the creature is the one who has the skill
            </summary>
            <param name="skillData"></param>
            <param name="creature"></param>
        </member>
        <member name="M:ThunderRoad.SkillData.OnSkillUnloaded(ThunderRoad.SkillData,ThunderRoad.Creature)">
            <summary>
            Called when the skill is unloaded from a creature, the creature is the one who has the skill
            </summary>
            <param name="skillData"></param>
            <param name="creature"></param>
        </member>
        <member name="P:ThunderRoad.RagdollHand.ForeArmColliders">
            <summary>
            The colliders of the linked forearm
            </summary>
        </member>
        <member name="M:ThunderRoad.RagdollHand.HapticTick(System.Single,System.Boolean)">
            <summary>
            Play a single haptic tick on the hand. Only works if this is the player's hand
            </summary>
        </member>
        <member name="M:ThunderRoad.RagdollHand.PlayHapticClipOver(UnityEngine.AnimationCurve,System.Single)">
            <summary>
            Play a haptic clip based on an animation curve over a duration
            </summary>
        </member>
        <member name="M:ThunderRoad.RagdollHand.Velocity">
            <summary>
            Return the velocity of the hand. Only works if this is the player's hand.
            </summary>
        </member>
        <member name="M:ThunderRoad.RagdollHand.GrabRelative(ThunderRoad.Handle,System.Boolean)">
            <summary>
            Grab object relative to current hand grip position and rotation. Warning: Need to be used by local player only to be accurate!
            </summary>
            <param name="handle">Handle to grab</param>
        </member>
        <member name="E:ThunderRoad.Container.OnContentQuantityIncreaseEvent">
            <summary>
            Called when the quantity field of a container is set to a higher one
            </summary>
        </member>
        <member name="E:ThunderRoad.Container.OnContentQuantityDecreaseEvent">
            <summary>
            Called when the quantity field of a container is set to a lower one
            </summary>
        </member>
        <member name="M:ThunderRoad.Container.SetContentQuantity(ThunderRoad.ContainerContent,System.Int32)">
            <summary>
            Used to set the quantity field of some content. Calls the increase / decrease hooks if value is different</summary>
            <param name="content">Content to change</param>
            <param name="newQuantity">Quantity to set</param>
        </member>
        <member name="M:ThunderRoad.UIList.SetState(System.Boolean)">
            <summary>
            If this option is enabled => switch to outline font and highlight next/previous arrow buttons
            </summary>
            <param name="isOn"></param>
        </member>
        <member name="F:ThunderRoad.CrystalHuntLevelInstanceData.endRewardLootMultiplier">
            <summary>
            The multiplier for the end reward loot
            </summary>
        </member>
        <member name="F:ThunderRoad.CrystalHuntLevelInstanceData.tierLengthLootMultiplier">
            <summary>
            The multiplier based on the tier of enemies and length of dungeon
            </summary>
        </member>
        <member name="M:ThunderRoad.EffectAudio.FakeDespawn">
            <summary>
            This is used by the pooling system to sort of fake despawn the effect without returning it to the pool, because we are going to use it again right away
            </summary>
        </member>
        <member name="M:ThunderRoad.ModOption.Reload">
            <summary>
            Reload values. Call this after changing the option parameter values
            </summary>
        </member>
        <member name="M:ThunderRoad.ModOption.RefreshUI">
            <summary>
            Refresh the UI component with the loaded values
            </summary>
        </member>
        <member name="M:ThunderRoad.ModOption.Reset">
            <summary>
            Reset this mod option to its original values
            </summary>
        </member>
        <member name="M:ThunderRoad.EnableSandboxBooksOption.#ctor">
            <summary>
            This is primarily used for dungeon arenas to dynamically enable the books at runtime
            </summary>
        </member>
        <member name="M:ThunderRoad.LocalizationManager.OnSceneSaving(UnityEngine.SceneManagement.Scene,System.String)">
            <summary>
            Check if a new instance of the Localization Manager was added to the current scene for testings purposes, and delete it if it exists
            </summary>
        </member>
        <member name="M:ThunderRoad.LocalizationManager.GetGroup(System.String)">
            <summary>
            Get localization Group
            </summary>
            <param name="groupId">Group Id in the TextData language files</param>
        </member>
        <member name="M:ThunderRoad.LocalizationManager.GetLocalizedString(System.String,System.String)">
            <summary>
            Get one string localized in the selected language
            </summary>
            <param name="groupId">Group Id of the localized string</param>
            <param name="stringId">String Id of the localized string</param>
            <returns>Localized string from the TextData language files. Returns null if no localization is found</returns>
        </member>
        <member name="M:ThunderRoad.LocalizationManager.GetVideoAddress(System.String,System.String)">
            <summary>
            Get the video address associated with a localized string.
            </summary>
            <param name="groupId">Group Id of the localized string</param>
            <param name="stringId">String Id of the localized string</param>
            <returns>The video asset address in the asset bundles</returns>
        </member>
        <member name="M:ThunderRoad.LocalizationManager.GetSpriteAddress(System.String,System.String)">
            <summary>
            Get the sprite address associated with a localized string.
            </summary>
            <param name="groupId">Group Id of the localized string</param>
            <param name="stringId">String Id of the localized string</param>
            <returns>The sprite asset address in the asset bundles</returns>
        </member>
        <member name="M:ThunderRoad.LocalizationManager.GetLocalizedTextItem(System.String)">
            <summary>
            Get item data localized in the selected language 
            </summary>
            <param name="id">Item Id</param>
            <returns>Item name and description</returns>
        </member>
        <member name="M:ThunderRoad.LocalizationManager.GetLocalizedTextWave(System.String)">
            <summary>
            Get wave data localized in the selected language 
            </summary>
            <param name="id">Wave Id</param>
            <returns>Wave name and description</returns>
        </member>
        <member name="M:ThunderRoad.LocalizationManager.TryGetLocalization(System.String,System.String,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Use this method to localize a composed string of one or more localized sub-strings
            </summary>
            <param name="groupId">Group ID of the sub-strings that need to be localized. All the texts must be in the same group Id.</param>
            <param name="text">Text with one or more {textId} to be localized. Specify in the localized strings in the text data files
            with %X if there are parts that need to be replaced by custom values.</param>
            <param name="values">List of values to be replaced by each %X occurrence.</param>
            <returns>Return the argument text with the {sub-string} occurrences replaced by the localized string, if there is any, or with
            the original text that is inside each {}, if no localization for that sub-string is found.</returns>
        </member>
        <member name="M:ThunderRoad.LocalizationManager.GetLocalizedItemName(ThunderRoad.ItemData)">
            <summary>
            Returns the corresponding text-item from a given item
            </summary>
            <param name="itemData">ItemData to get a text-item from</param>
            <returns>Localized name of the item</returns>
        </member>
        <member name="M:ThunderRoad.LocalizationManager.GetLocalizationIds(System.String,System.String@,System.String@)">
            <summary>
            Receive a full localization address in the format GroupId.StringId and splits the Ids.
            Ex: Full address: "Default.IntroTitle" => GroupId = "Default" ; StringId = "IntroTitle".
            Returns true if it was possible to get the ids from the address. False, otherwise.
            </summary>
            <param name="localizationAddress"> Localization Ids</param>
            <param name="groupId">Output variable groupId</param>
            <param name="stringId">Output variable stringId</param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.CutoutMask.SetGraphicDirty">
            <summary>
            Set the maskable graphic's material as dirty to be updated
            </summary>
        </member>
        <member name="M:ThunderRoad.CutoutMask.GetStencilId">
            <summary>
            Gives the stencil ID for the new stencil material
            </summary>
            <returns>stencil ID bit shift</returns>
        </member>
        <member name="M:ThunderRoad.CutoutMask.GetModifiedMaterial(UnityEngine.Material)">
            <summary>
            Overrides IMaterialModifier method to return the cutout material
            </summary>
            <param name="baseMaterial">Base material to modify</param>
            <returns>Modified material</returns>
        </member>
        <member name="T:ThunderRoad.LevelInstanceData">
            <summary>
            A collection of parameters to be used by specific gamemodes levelInstances to hold data
            </summary>
        </member>
        <member name="M:ThunderRoad.LevelInstanceData.GetItemRewardMultiplier(System.String)">
            <summary>
            Get the reward multiplier for this level instance for a particular itemId, eg gold or shards or some modded itemId
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.LevelInstanceData.PreBuildOptions">
            <summary>
            Called to build enforced and optional options on this instance data.
            </summary>
        </member>
        <member name="M:ThunderRoad.LevelInstanceData.BuildLevelOptions(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Build additional options for the level.
            </summary>
        </member>
        <member name="M:ThunderRoad.LevelInstanceData.BuildAttributes">
            <summary>
            Build the map display information for this instance.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIDropdown.Show">
            <summary>
            Show the dropdown.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIDropdown.Hide">
            <summary>
            Hide the dropdown list. I.e. close it.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManager.ManifestVersionCheck(ThunderRoad.ModManager.ModData)">
            <summary>
            Checks if a given mod is compatible with the current game version
            </summary>
            <param name="modData"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.ModManager.TryReadManifest(System.String,ThunderRoad.ModManager.ModData@)">
            <summary>
            Tries to read the manifest, returns false if it was unable to read it
            </summary>
            <param name="modFolder"></param>
            <param name="modData"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.ModManager.GetLoadOrderedMods(System.String[])">
            <summary>
            Given a list of modFolders, read the loadorder.json and reorder the array of modFolders
            </summary>
            <param name="modFolders"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.ModManager.TryGetModAssemblyPaths(ThunderRoad.ModManager.ModData,System.String[]@)">
            <summary>
            Checks if a mod has dll files in its folder, and if so returns the paths to them.
            </summary>
            <param name="mod"></param>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.ModManager.TryLoadAssembly(ThunderRoad.ModManager.ModData,System.Byte[],System.Byte[],System.String,System.Reflection.Assembly@)">
            <summary>
            Tries to load an assembly from a byte array, returns false if it failed
            </summary>
            <param name="mod"></param>
            <param name="dllBytes"></param>
            <param name="pdbBytes"></param>
            <param name="dllLocalPath"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.ModManager.GetModAttributes(System.Type,ThunderRoad.ModManager.ModData,System.Reflection.Assembly)">
            <summary>
            Processes our custom mod attributes, such as ModOption
            </summary>
            <param name="type"></param>
            <param name="mod"></param>
            <param name="assembly"></param>
        </member>
        <member name="M:ThunderRoad.ModManager.TryGetModData(System.Reflection.Assembly,ThunderRoad.ModManager.ModData@)">
            <summary>
            Tries to find the modData which the given assembly is part of
            </summary>
            <param name="assembly"></param>
            <param name="modData"></param>
            <returns>true if it found the modData</returns>
        </member>
        <member name="M:ThunderRoad.ItemOrTableContent`2.RemoveCustomData``1">
            <summary>
            Removes all occurrences of the ContentCustomData with the type T
            </summary>
            <typeparam name="T">Type of the ContentCustomData to remove</typeparam>
        </member>
        <member name="M:ThunderRoad.UIModDisplay.ShowModInfo">
            <summary>
            Callback from the show info button
            </summary>
        </member>
        <member name="M:ThunderRoad.CreatureTable.CalculateWeight">
            <summary>
            Calculates the percentage and assigns the probabilities how many times
            the items can be picked. Function used also to validate data when tweaking numbers in editor.
            </summary>	
        </member>
        <member name="F:ThunderRoad.EffectModuleParticle.pools">
            <summary>
            A pool of each EffectParticle objects for each effectModule configuration. 
            </summary>
        </member>
        <member name="M:ThunderRoad.EffectModuleParticle.GetOrCreateEffectParticlePoolManager(ThunderRoad.EffectModuleParticle)">
            <summary>
            This will get or create the EffectParticlePoolManager for this EffectModuleParticle
            </summary>
        </member>
        <member name="M:ThunderRoad.EffectModuleParticle.CreateEffectParticle">
            <summary>
            Creates an configured, non pooled EffectParticle instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.EffectModuleParticle.Configure(ThunderRoad.EffectParticle)">
            <summary>
            Configures an effectParticle with values from this EffectModuleParticle
            </summary>
            <param name="effectParticle"></param>
            <returns></returns>
        </member>
        <member name="P:ThunderRoad.AreaGateway.FakeviewOpacity">
            <summary>
            1.0 is opaque, 0.0 is transparent
            </summary>
        </member>
        <member name="T:ThunderRoad.ShuffleOrder">
            <summary>
            Class use to shufle order and then go threw every index before reshuffle
            Reshuffle will not use the last order first and last shhuffle index to avoid repetition 
            </summary>
        </member>
        <member name="M:ThunderRoad.ShuffleOrder.#ctor(System.Int32)">
            <summary>
            Create an order of shuffle index array from 0 to count (count not include)
            </summary>
            <param name="count">The size of shuffle array. If count = 2 ping pong effect. count must be > 0 </param>
        </member>
        <member name="M:ThunderRoad.ShuffleOrder.#ctor(System.Int32,System.Int32)">
            <summary>
            Create an order of shuffle index array from 0 to count (count not include)
            </summary>
            <param name="count">The size of shuffle array. If count = 2 ping pong effect. count must be > 0</param>
            <param name="notFirstIndex">Index that should not be in first in the shuffle order</param>
        </member>
        <member name="M:ThunderRoad.ShuffleOrder.Next">
            <summary>
            Return current shuffle index and change index order for the next time
            </summary>
            <returns>Return the current shuffle index</returns>
        </member>
        <member name="T:ThunderRoad.Breakable">
            <summary>
            This component allows objects and items to be broken in various different ways.
            </summary>
        </member>
        <member name="P:ThunderRoad.Breakable.DefaultHandleID">
            <summary>
            Default handle ID.
            </summary>
        </member>
        <member name="P:ThunderRoad.Breakable.AllowBreaking">
            <summary>
            Allow breakables to be broken?
            </summary>
        </member>
        <member name="T:ThunderRoad.Breakable.HandleLink">
            <summary>
            Allows two handles to be linked between meshes.
            
            TODO: Possibly overhaul this to instead allow Handle[] and GetClosest to handler?
                  Also might be worth making this a struct, it should be immutable anyway.
            </summary>
        </member>
        <member name="T:ThunderRoad.Breakable.BreakPoint">
            <summary>
            Used to create and edit breakable points targets
            </summary>
        </member>
        <member name="M:ThunderRoad.Breakable.BreakPoint.CheckIfHit(UnityEngine.Transform,UnityEngine.ContactPoint)">
            <summary>
            Check if the target transform is within the contact point.
            </summary>
        </member>
        <member name="F:ThunderRoad.Breakable.contactPoints">
            <summary>
            Used as a buffer to cache collision contact points
            </summary>
        </member>
        <member name="P:ThunderRoad.Breakable.IsBroken">
            <summary>
            Is this broken?
            </summary>
        </member>
        <member name="P:ThunderRoad.Breakable.LinkedItem">
            <summary>
            Unbroken item if any.
            </summary>
        </member>
        <member name="F:ThunderRoad.Breakable.editingBreakpointsThroughEditor">
            <summary>
            Used from the custom editor to change the gizmos.
            </summary>
        </member>
        <member name="M:ThunderRoad.Breakable.RetrieveSubItems">
            <summary>
            Cache the rigidbodies and items in lists
            </summary>
        </member>
        <member name="M:ThunderRoad.Breakable.SetBreakable(System.Boolean)">
            <summary>
            Set whether or not the breakable can be broken
            </summary>
        </member>
        <member name="M:ThunderRoad.Breakable.Break">
            <summary>
            Break the breakable.
            This is used as a fake method to bypass the real behaviour, to break via events for example.
            </summary>
        </member>
        <member name="M:ThunderRoad.Breakable.InitUnbrokenObjects">
            <summary>
            Enable the default object
            </summary>
        </member>
        <member name="M:ThunderRoad.Breakable.InitBrokenObjects">
            <summary>
            Enable the broken sub pieces, init them, then disable it
            </summary>
        </member>
        <member name="M:ThunderRoad.Breakable.Break(UnityEngine.Collision,ThunderRoad.Creature)">
            <summary>
            Break this object.
            </summary>
            <param name="collision">Collision that caused the break</param>
            <param name="creature">Colliding creature, passed to avoid re-caching it</param>
        </member>
        <member name="M:ThunderRoad.Breakable.Hit(UnityEngine.Collision)">
            <summary>
            Hit the breakable with the given collision.
            If the hit is not strong enough, nothing happens.
            one parameter only to be used from Unity events.
            </summary>
            <param name="collision">Collision of the hit</param>
        </member>
        <member name="M:ThunderRoad.Breakable.Hit(UnityEngine.Collision,System.Boolean)">
            <summary>
            Hit the breakable with the given collision.
            If the hit is not strong enough, nothing happens.
            </summary>
            <param name="collision">Collision of the hit</param>
            <param name="bypassHitPoints">If true, instantaneously breaks the item without caring about remaining hit points.</param>
        </member>
        <member name="M:ThunderRoad.Breakable.ApplyVelocityToBrokenPieces(UnityEngine.Vector3,System.Single,UnityEngine.Vector3)">
            <summary>
            Apply velocity to broken pieces.
            </summary>
        </member>
        <member name="M:ThunderRoad.Breakable.GetBrokenItemBarycenter">
            <summary>
            Compute and caches the item and broken pieces barycenters.
            This uses the center of their local bounds.
            We need to do that since most props have shared origin across their broken pieces.
            </summary>
        </member>
        <member name="M:ThunderRoad.Breakable.FixCollidingBodyVelocity(UnityEngine.Collision)">
            <summary>
            Colliding body will be stopped/slowed down by the collision, so this method reapply its speed over 2 frames.
            </summary>
            <param name="collision">Current collision.</param>
        </member>
        <member name="M:ThunderRoad.Breakable.UpdateCollidingBodyVelocityCoroutine(ThunderRoad.PhysicBody)">
            <summary>
            Colliding body will be stopped/slowed down by the collision, so this method reapply its speed over 2 frames.
            </summary>
            <param name="collision">Current collision.</param>
        </member>
        <member name="M:ThunderRoad.Breakable.ReleaseUnbrokenObjects">
            <summary>
            Unbroken items are despawned.
            the breakable holder is released with a  bit of delay to allow event calls and sounds
            </summary>
        </member>
        <member name="M:ThunderRoad.Breakable.MoveEffectsToBrokenItems">
            <summary>
            Move all effects to any broken pieces.
            </summary>
        </member>
        <member name="M:ThunderRoad.Breakable.GetClosestCollider(UnityEngine.Transform,UnityEngine.Collider@)">
            <summary>
            Obtain the closest collider to the target transform.
            </summary>
        </member>
        <member name="M:ThunderRoad.Breakable.CleanUp(ThunderRoad.Item)">
            <summary>
            Cleans up the given item, before getting removed
            ie. un-penetrates everything, and un grip if needed
            </summary>
            <param name="subUnbrokenItem">Item to clean up</param>
        </member>
        <member name="M:ThunderRoad.Breakable.UpdateHandleLinks">
            <summary>
            Release manin (unbroken) handles and grab their broken version.
            </summary>
        </member>
        <member name="M:ThunderRoad.Breakable.EnableBrokenPieces">
            <summary>
            Enables and inits sub items and sub bodies.
            </summary>
        </member>
        <member name="M:ThunderRoad.Breakable.UpdateSubPiecesVelocities(UnityEngine.Collision,ThunderRoad.Creature)">
            <summary>
            Set the velocity of all bodies to match the velocity of the unbroken object
            </summary>
            <param name="collision">Current collsion context</param>
            <param name="creature">Colliding creature, passed to avoid re-caching it</param>
        </member>
        <member name="M:ThunderRoad.Breakable.IgnoreCollision">
            <summary>
            Ignore collision between all broken item pieces.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.Breakable.IgnoreAllSubBrokenItems(ThunderRoad.Item,System.Boolean)">
            <summary>
            Ignore collision between the input item and all broken pieces.
            </summary>
        </member>
        <member name="M:ThunderRoad.Breakable.CanBeBroken">
            <summary>
            Is this item able to be broken?
            </summary>
        </member>
        <member name="M:ThunderRoad.Breakable.IsUnbrokenItemInInitializingArea">
            <summary>
            Is this item in an area not yet initialized?
            </summary>
        </member>
        <member name="M:ThunderRoad.Breakable.CheckIfHittingObjectIsCreature(UnityEngine.Collision,ThunderRoad.Creature@)">
            <summary>
            Checks if the linked collider is a creature.
            </summary>
            <param name="collision">Current collision struct</param>
            <returns>True if the linked body is a ragdoll part belonging to a creature, false otherwise. And the corresponding creature</returns>
        </member>
        <member name="M:ThunderRoad.Breakable.GetMomentum(UnityEngine.Collision,ThunderRoad.Creature)">
            <summary>
            Compute the hit momentum.
            The idea is to take mass into account, and not only velocity.
            This is because big items (ie. 2 handed hammers) are going slower and are harder to break things with.
            Note: This is capped to 5, to avoid aberrant values.
            </summary>
            <param name="collision">Current collision.</param>
            <param name="creature">Colliding creature, passed to avoid re-caching it</param>
            <returns>The momentum as a force vector.</returns>
        </member>
        <member name="M:ThunderRoad.Breakable.GetCollidingObjectMass(UnityEngine.Collision,System.Single@)">
            <summary>
            Returns the mass of the body attached to the collision struct.
            </summary>
            <param name="collision">CurrentCollision</param>
            <param name="mass">returned mass</param>
            <returns>If the hit object has a body and isn't static, and the mass of the body  (1 when not found)</returns>
        </member>
        <member name="M:ThunderRoad.Breakable.CheckIfHitBreakPoint(UnityEngine.Collision)">
            <summary>
            Does the target collision hit any break points?
            </summary>
        </member>
        <member name="M:ThunderRoad.Breakable.IsTransformsRoughlyMatching(UnityEngine.Transform,UnityEngine.Transform,System.Single,System.Single,System.Boolean)">
            <summary>
            Checks if two transforms are close enough.
            </summary>
            <param name="source">Source transform</param>
            <param name="other">Transform to compare the source against</param>
            <param name="positionThreshold">Allowed distance threshold for transforms to be considered close</param>
            <param name="rotationThreshold">Allowed rotation threshold (in degrees) for transforms to be considered close</param>
            <param name="checkRotation">If true, compares rotations.</param>
            <returns>True if threshold are low enough</returns>
        </member>
        <member name="M:ThunderRoad.Breakable.AutoMatchHandles">
            <summary>
            Fill the handle links list with handles that have close enough transformation.
            </summary>
        </member>
        <member name="P:ThunderRoad.MusicSegmentPlayer.Volume">
            <summary>
            The volume of the audio source (0.0 to 1.0)
            </summary>
        </member>
        <member name="M:ThunderRoad.UIGridRow.AddElement(UnityEngine.GameObject)">
            <summary>
            Add a new element to this row
            </summary>
            <param name="element">Element to add</param>
            <returns>Return true if the element was added and return false otherwise.</returns>
        </member>
        <member name="M:ThunderRoad.UIArrowList.SetState(System.Boolean)">
            <summary>
            If this option is enabled => switch to outline font and highlight next/previous arrow buttons
            </summary>
            <param name="isOn"></param>
        </member>
        <member name="M:ThunderRoad.GolemController.RegisterGrabEvents">
            <summary>
            Register listeners to all the ladder handle events to enable player climbing
            </summary>
        </member>
        <member name="M:ThunderRoad.UIModInfo.SetInformation(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,ModIO.ModId[],UnityEngine.Sprite[])">
            <summary>
            Set the presentable information.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIModInfo.UpdateProgressHandler(System.Single,ModIO.ModManagementOperationType)">
            <summary>
            Update the progress state.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIModInfo.UpdateInformation">
            <summary>
            Update this page content that according if the mod is installed or not
            </summary>
        </member>
        <member name="M:ThunderRoad.UIModInfo.Install">
            <summary>
            Callback from the Install button
            </summary>
        </member>
        <member name="M:ThunderRoad.UIModInfo.Uninstall(System.Boolean)">
            <summary>
            Callback from the Uninstall button
            </summary>
            <param name="retry">True if this uninstall call came from the retry button of the error window</param>
        </member>
        <member name="M:ThunderRoad.UIModInfo.ToggleModInfo(System.Boolean)">
            <summary>
            Toggle the visibility state of this mod info page.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIModInfo.PreviousImage">
            <summary>
            Callback from the previous image button
            </summary>
        </member>
        <member name="M:ThunderRoad.UIModInfo.NextImage">
            <summary>
            Callback from the next image button
            </summary>
        </member>
        <member name="M:ThunderRoad.UIModInfo.SetProgressState(ModIO.ModManagementOperationType)">
            <summary>
            Set the mod state.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIModInfo.UpdateGallery">
            <summary>
            Update selected image, current image index label and the state of the previous and next buttons
            </summary>
        </member>
        <member name="M:ThunderRoad.UIModInfo.BackToModsBrowser">
            <summary>
            Callback from the back button
            </summary>
        </member>
        <member name="M:ThunderRoad.UIModInfo.RefreshDependencies">
            <summary>
            Refresh all listed dependencies.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIModInfo.ClearDependencies">
            <summary>
            Clears all listed dependencies.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIModInfo.HandleGalleryDownload(UnityEngine.Texture2D)">
            <summary>
            Handle a download event for a mods gallery.
            </summary>
        </member>
        <member name="M:ThunderRoad.TutorialSection.StartSection">
            <summary>
            Enable this section content
            </summary>
        </member>
        <member name="M:ThunderRoad.TutorialSection.CompletedSection">
            <summary>
            This section is already completed
            </summary>
        </member>
        <member name="M:ThunderRoad.Extensions.RemoveAtIgnoreOrder``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            This is a O(1) way of removing things from a list by moving them to the end
            </summary>
            <param name="list"></param>
            <param name="index"></param>
            <param name="listCount"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ThunderRoad.Extensions.RemoveAtIgnoreOrder``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            This is a O(1) way of removing things from a list by moving them to the end
            </summary>
            <param name="list"></param>
            <param name="index"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ThunderRoad.Extensions.AsSynchronous(System.Collections.IEnumerator)">
            <summary>
            Forces iteration through an IEnumerator, useful to make coroutines synchronous
            </summary>
            <param name="enumerator"></param>
        </member>
        <member name="M:ThunderRoad.Extensions.GetDistanceSqr(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns the Squared Distance between two vectors
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>Squared Distance</returns>
        </member>
        <member name="M:ThunderRoad.Extensions.SetTargetRotationLocal(UnityEngine.ConfigurableJoint,UnityEngine.Quaternion,UnityEngine.Quaternion)">
            <summary>
            Sets a joint's targetRotation to match a given local rotation.
            The joint transform's local rotation must be cached on Start and passed into this method.
            </summary>
        </member>
        <member name="M:ThunderRoad.Extensions.SetTargetRotation(UnityEngine.ConfigurableJoint,UnityEngine.Quaternion,UnityEngine.Quaternion)">
            <summary>
            Sets a joint's targetRotation to match a given world rotation.
            The joint transform's world rotation must be cached on Start and passed into this method.
            </summary>
        </member>
        <member name="F:ThunderRoad.ModOptionAttribute.modOption">
            <summary>
            The mod option that this attribute is attached to
            </summary>
        </member>
        <member name="F:ThunderRoad.ModOptionAttribute.member">
            <summary>
            The member that this attribute is attached to
            </summary>
        </member>
        <member name="M:ThunderRoad.ModOptionAttribute.Process">
            <summary>
            Called when the modOption is processed  to apply the attributes properties to the mod option
            </summary>
        </member>
        <member name="M:ThunderRoad.PointerInputModule.ClearSelection">
            <summary>
            Clear selected game object
            </summary>
        </member>
        <member name="M:ThunderRoad.PointerInputModule.Select(UnityEngine.GameObject)">
            <summary>
            Select one game object. A game object is selected when the user presses the trigger button while pointing at it.
            </summary>
            <param name="selectedGameObject">The selected game object</param>
        </member>
        <member name="M:ThunderRoad.HomeTower.StartRaid">
            <summary>
            This fight around the player's home is considered an event and its just available before reaching the end game level,
            and for the first time the player arrives at home. If they leave and come back at any time during the event, it expires.
            </summary>
        </member>
        <member name="M:ThunderRoad.HomeTower.UnlockTowerDoor">
            <summary>
            Player arrived at the home for the first time, after reaching level 7 and getting access to the end game
            </summary>
        </member>
        <member name="M:ThunderRoad.HomeTower.ShowTower(System.Boolean)">
            <summary>
            Use this to show the tower intact or collapsed.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModOptionValues.#ctor(System.String)">
            <summary>
            Defines the name of the member that contains or returns the values, the member must be in the same class as where the modOption is defined
            </summary>
            <param name="valueSourceName"></param>
        </member>
        <member name="M:ThunderRoad.ModOptionValues.#ctor(System.String,System.Type)">
            <summary>
            Defines the name of the member that contains or returns the values, and the type that contains the member
            </summary>
            <param name="valueSourceName"></param>
            <param name="valueSourceType"></param>
        </member>
        <member name="T:ThunderRoad.RaycastTarget">
            <summary>
            Special class used as a empty UI graphic component so it can be used as a raycast target
            </summary>
        </member>
        <member name="P:ThunderRoad.UIMyModDisplay.IsManuallyInstalled">
            <summary>
            Was this mod manually installed?
            </summary>
        </member>
        <member name="P:ThunderRoad.UIMyModDisplay.IsEnabled">
            <summary>
            Is this mod enabled for loading?
            </summary>
        </member>
        <member name="M:ThunderRoad.UIMyModDisplay.RefreshCompatibility">
            <summary>
            Check if this mods compat has changed.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIMyModDisplay.RefreshEnableState">
            <summary>
            Refresh the enable/disable toggle.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIMyModDisplay.UpdateProgressHandler(System.Single,ThunderRoad.ModManagerUI.ModState)">
            <summary>
            Update the progress handler.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIMyModDisplay.SetState(ThunderRoad.ModManagerUI.ModState)">
            <summary>
            Set a display state.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIMyModDisplay.ToggleEnabledState(System.Boolean)">
            <summary>
            Enable/disable this mod from loading.
            Called from the Enable/Disable button OnClick callback
            </summary>
        </member>
        <member name="M:ThunderRoad.UIMyModDisplay.Uninstall(System.Boolean)">
            <summary>
            Callback from the Uninstall button
            </summary>
            <param name="retry">True if this uninstall call came from the retry button of the error window</param>
        </member>
        <member name="M:ThunderRoad.UIMyModDisplay.Uninstall(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Callback from the Uninstall button
            </summary>
            <param name="retry">True if this uninstall call came from the retry button of the error window</param>
            <param name="headless">Run this silently, no windows.</param>
            <param name="force">Ignore if the mod is a dependency and forcefully uninstall it.</param>
        </member>
        <member name="M:ThunderRoad.UIWorldMapBoard.NextWorldMap">
            <summary>
            Switches to the next map page
            </summary>
        </member>
        <member name="M:ThunderRoad.UIWorldMapBoard.PreviousWorldMap">
            <summary>
            Switches to the previous map page
            </summary>
        </member>
        <member name="M:ThunderRoad.UIWorldMapBoard.SetLevelOptionDescription(System.String)">
            <summary>
            Update the level option description text according to the option being pointed
            </summary>
        </member>
        <member name="M:ThunderRoad.UIWorldMapBoard.SetNextLocation">
            <summary>
            Change to the next location on the currently selected map page
            </summary>
        </member>
        <member name="M:ThunderRoad.UIWorldMapBoard.SetPreviousLocation">
            <summary>
            Change to the previous location on the currently selected map page
            </summary>
        </member>
        <member name="M:ThunderRoad.PlayerSaveData.ClearInventory(System.Boolean)">
            <summary>
            Used to wipe the serialized data from the save file
            This will not wipe the current inventory on the Player.local.creature.container
            </summary>
            <param name="includeBodyWardrobes"></param>
        </member>
        <member name="M:ThunderRoad.PlayerSaveData.CloneInventory">
            <summary>
            Get a copy of the serialised player inventory data
            This does not represent the current inventory on the Player.local.creature.container
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.UIItemSpawner.ResetAnchors">
            <summary>
            Hacky workaround to reset this nested prefab anchors to make sure
            the UI content is rendered inside the book mesh of the parent prefab
            </summary>
        </member>
        <member name="M:ThunderRoad.UIItemSpawner.CheckCategoriesCanvasesVisibility">
            <summary>
            Enable and disable the categories' grid elements canvas when they enter and leave the book page while being scrolled.
            This method is called from the Categories scroll rect OnValueChanged callback
            </summary>
        </member>
        <member name="M:ThunderRoad.UIItemSpawner.CheckItemsCanvasesVisibility">
            <summary>
            Enable and disable the items' grid elements canvas when they enter and leave the book page while being scrolled.
            This method is called from the Items scroll rect OnValueChanged callback
            </summary>
        </member>
        <member name="M:ThunderRoad.UIItemSpawner.AddGridRow(System.Boolean)">
            <summary>
            Instantiate a new grid row
            </summary>
            <param name="isCategory">True if the row on the categories left page and false if the row is on the items right page</param>
            <returns>The canvas of the category row</returns>
        </member>
        <member name="M:ThunderRoad.UIItemSpawner.AddCategoriesGridSpaces(System.Int32,System.Collections.Generic.List{UnityEngine.GameObject}@)">
            <summary>
            Add empty space elements to give the grid a nice layout with dynamics row's height (title height != categories row height)
            </summary>
            <param name="spaces">Number of spaces to add</param>
        </member>
        <member name="M:ThunderRoad.UIItemSpawner.ReleaseItems">
            <summary>
            Release previous category items and rows
            </summary>
        </member>
        <member name="M:ThunderRoad.LightingPreset.OnReleasePreset">
            <summary>
            Call this method when releasing preset so it destroys/release instanciated object in it
            </summary>
        </member>
        <member name="M:ThunderRoad.CreatureSpawner.GetCreatureTableData">
            <summary>
            Returns the creature data linked to this ID in the catalog.
            </summary>
            <returns>The creature data in the catalog, null if not found</returns>
        </member>
        <member name="M:ThunderRoad.CreatureSpawner.DespawnCreaturesCoroutine(System.Boolean)">
            <summary>
            Despawn creatures
            </summary>
            <param name="allCreatures">True if the dead creatures should also be despawned</param>
            <returns></returns>
        </member>
        <member name="T:ThunderRoad.DifficultyPreset">
            <summary>
            This is a collection of options for a gamemode to define its difficulty
            </summary>
        </member>
        <member name="M:ThunderRoad.HumanoidFullBodyIKJob.RebaseRotation(UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Takes in rotation and maps it to provided axis
            </summary>
            <param name="rotation">Rotation to transform</param>
            <param name="axisForward">Desired forward axis to face</param>
            <param name="axisUp">Desired up axis to face</param>
            <returns>The rotated rotation where forward is facing the forward Axis and Up the Up axis</returns>
        </member>
        <member name="M:ThunderRoad.HumanoidFullBodyIKJob.RebaseRotation(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            
            </summary>
            <param name="targetForward"></param>
            <param name="targetUp"></param>
            <param name="axisForward"></param>
            <param name="axisUp"></param>
            <returns></returns>
        </member>
        <member name="F:ThunderRoad.AffineTransform.translation">
            <summary>Translation component of the AffineTransform.</summary>
        </member>
        <member name="F:ThunderRoad.AffineTransform.rotation">
            <summary>Rotation component of the AffineTransform.</summary>
        </member>
        <member name="M:ThunderRoad.AffineTransform.#ctor(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Constructor.
            </summary>
            <param name="t">Translation component of the AffineTransform.</param>
            <param name="r">Rotation component of the AffineTransform.</param>
        </member>
        <member name="M:ThunderRoad.AffineTransform.Set(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Sets the translation and rotation in the AffineTransform.
            </summary>
            <param name="t">Translation component of the AffineTransform.</param>
            <param name="r">Rotation component of the AffineTransform.</param>
        </member>
        <member name="M:ThunderRoad.AffineTransform.Transform(UnityEngine.Vector3)">
            <summary>
            Transforms a Vector3 point by the AffineTransform.
            </summary>
            <param name="p">Vector3 point.</param>
            <returns>Transformed Vector3 point.</returns>
        </member>
        <member name="M:ThunderRoad.AffineTransform.InverseTransform(UnityEngine.Vector3)">
            <summary>
            Transforms a Vector3 point by the inverse of the AffineTransform.
            </summary>
            <param name="p">Vector3 point.</param>
            <returns>Transformed Vector3 point.</returns>
        </member>
        <member name="M:ThunderRoad.AffineTransform.Inverse">
            <summary>
            Calculates the inverse of the AffineTransform.
            </summary>
            <returns>The inverse of the AffineTransform.</returns>
        </member>
        <member name="M:ThunderRoad.AffineTransform.InverseMul(ThunderRoad.AffineTransform)">
            <summary>
            Multiply a transform by the inverse of the AffineTransform.
            </summary>
            <param name="transform">AffineTransform value.</param>
            <returns>Multiplied AffineTransform result.</returns>
        </member>
        <member name="M:ThunderRoad.AffineTransform.op_Multiply(ThunderRoad.AffineTransform,UnityEngine.Vector3)">
            <summary>
            Transforms a Vector3 point by the AffineTransform.
            </summary>
            <param name="lhs">AffineTransform value.</param>
            <param name="rhs">Vector3 point.</param>
            <returns>Transformed Vector3 point.</returns>
        </member>
        <member name="M:ThunderRoad.AffineTransform.op_Multiply(ThunderRoad.AffineTransform,ThunderRoad.AffineTransform)">
            <summary>
            Multiplies two AffineTransform.
            </summary>
            <param name="lhs">First AffineTransform value.</param>
            <param name="rhs">Second AffineTransform value.</param>
            <returns>Multiplied AffineTransform result.</returns>
        </member>
        <member name="M:ThunderRoad.AffineTransform.op_Multiply(UnityEngine.Quaternion,ThunderRoad.AffineTransform)">
            <summary>
            Rotates an AffineTransform.
            </summary>
            <param name="lhs">Quaternion rotation.</param>
            <param name="rhs">AffineTransform value.</param>
            <returns>Rotated AffineTransform result.</returns>
        </member>
        <member name="M:ThunderRoad.AffineTransform.op_Multiply(ThunderRoad.AffineTransform,UnityEngine.Quaternion)">
            <summary>
            Transforms a Quaternion value by the AffineTransform.
            </summary>
            <param name="lhs">AffineTransform value.</param>
            <param name="rhs">Quaternion rotation.</param>
            <returns>Transformed AffineTransform result.</returns>
        </member>
        <member name="P:ThunderRoad.AffineTransform.identity">
            <summary>
            AffineTransform identity value.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreFaction.SetFaction(ThunderRoad.LoreDisplayTypeScriptableObject,ThunderRoad.UILoreJournal,System.Action)">
            <summary>
            Set the visual display.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreFaction.SetBackground(UnityEngine.Sprite)">
            <summary>
            Set background.
            </summary>
        </member>
        <member name="M:ThunderRoad.UILoreFaction.Refresh">
            <summary>
            Refresh visuals.
            </summary>
        </member>
        <member name="M:ThunderRoad.EffectInstance.Spawn(System.Collections.Generic.List{ThunderRoad.EffectBundle},UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEngine.Transform,ThunderRoad.CollisionInstance,System.Boolean,ThunderRoad.ColliderGroup,System.Boolean)">
            <summary>
            Using effect bundles
            </summary>
        </member>
        <member name="M:ThunderRoad.EffectInstance.Spawn(ThunderRoad.EffectData,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEngine.Transform,ThunderRoad.CollisionInstance,System.Boolean,ThunderRoad.ColliderGroup,System.Boolean,System.Type[])">
            <summary>
            Using effect data
            </summary>
        </member>
        <member name="M:ThunderRoad.EffectInstance.Setup(System.Collections.Generic.List{ThunderRoad.EffectBundle},UnityEngine.Vector3,UnityEngine.Quaternion,System.Type[],System.Single,System.Single,UnityEngine.Transform,ThunderRoad.CollisionInstance,System.Boolean,ThunderRoad.ColliderGroup,System.Boolean)">
            <summary>
            Setup uses the effectBundles
            </summary>
        </member>
        <member name="M:ThunderRoad.EffectInstance.Setup(ThunderRoad.EffectData,UnityEngine.Vector3,UnityEngine.Quaternion,System.Type[],System.Single,System.Single,UnityEngine.Transform,ThunderRoad.CollisionInstance,System.Boolean,ThunderRoad.ColliderGroup,System.Boolean)">
            <summary>
            Setup uses the effectData
            </summary>
        </member>
        <member name="M:ThunderRoad.EffectInstance.Stop(System.Int32)">
            <summary>
            Stop an effect without calling any effects with the End step
            </summary>
        </member>
        <member name="M:ThunderRoad.EffectInstance.End(System.Boolean,System.Single)">
            <summary>
            Stop an effect, playing any effects tagged with the End step
            </summary>
        </member>
        <member name="M:ThunderRoad.IKTargetZone.GenerateZone">
            <summary>
            Generate the zone.
            </summary>
        </member>
        <member name="M:ThunderRoad.IKTargetZone.SetLimbToIKTarget(ThunderRoad.Player,System.Boolean)">
            <summary>
            Move the target limb to the IK point if enabled,
            move back if otherwise.
            </summary>
        </member>
        <member name="M:ThunderRoad.IKTargetZone.GetPlayerRotation(ThunderRoad.Player)">
            <summary>
            Get the players current rotation.
            </summary>
        </member>
        <member name="M:ThunderRoad.IKTargetZone.GetPlayerPosition(ThunderRoad.Player)">
            <summary>
            Get the players position.
            </summary>
        </member>
        <member name="M:ThunderRoad.IKTargetZone.GetInterpolatedPosition(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Get a positon interpolated between a-b by t.
            </summary>
        </member>
        <member name="M:ThunderRoad.IKTargetZone.GetClosestIKPoint(ThunderRoad.Player)">
            <summary>
            Get the closest point to the player.
            </summary>
        </member>
        <member name="M:ThunderRoad.IKTargetZone.IsPlayerInZone(ThunderRoad.Player)">
            <summary>
            Is the player in the target zone?
            </summary>
        </member>
        <member name="M:ThunderRoad.IKTargetZone.SetCollisionState(ThunderRoad.ColliderGroup,System.Boolean)">
            <summary>
            Enable or disable a collider group.
            May be good for an extension?
            </summary>
        </member>
        <member name="F:ThunderRoad.LightProbeVolume.Exists">
            <summary>
            Is there at least one LightProbeVolume in the scene?
            </summary>
        </member>
        <member name="F:ThunderRoad.LightProbeVolume.editingSizeThroughEditor">
            <summary>
            Used from the custom editor to change the gizmos.
            </summary>
        </member>
        <member name="M:ThunderRoad.FxController.SetIntensity(System.Single)">
            <summary>
            Intensity values between 0 and 1.
            </summary>
        </member>
        <member name="M:ThunderRoad.InputSteamVR.SetControllersCoroutine">
            <summary>
            Set the controllers after their detection. Otherwise, the PlayerControl.Controller might be equal to 'Unknown' if the game starts with the controllers disabled
            </summary>
        </member>
        <member name="M:ThunderRoad.InputSteamVR.IsSupportedController(System.String)">
            <summary>
            Add new supported controllers here when new ones are added in the future
            </summary>
            <param name="controller">controller id</param>
            <returns>True if we support those controllers. False, otherwise.</returns>
        </member>
        <member name="M:ThunderRoad.ThunderEntity.Inflict(System.String,System.Object,System.Single,System.Object,System.Boolean)">
            <summary>
            Inflict a status effect, providing the StatusData ID
            </summary>
        </member>
        <member name="M:ThunderRoad.ThunderEntity.Inflict(ThunderRoad.StatusData,System.Object,System.Single,System.Object,System.Boolean)">
            <summary>
            Inflict a status effect, providing the StatusData ID
            </summary>
        </member>
        <member name="M:ThunderRoad.ThunderEntity.Remove(ThunderRoad.StatusData,System.Object)">
            <summary>
            Remove a single handler for a status effect of type S on this entity.
            </summary>
        </member>
        <member name="M:ThunderRoad.ThunderEntity.HasStatus(System.String)">
            <summary>
            Does this entity have a particular status?
            </summary>
        </member>
        <member name="M:ThunderRoad.ThunderEntity.TryGetStatus``1(ThunderRoad.StatusData,``0@)">
            <summary>
            Check and return a particular status on this entity
            </summary>
        </member>
        <member name="M:ThunderRoad.ThunderEntity.Clear(System.String)">
            <summary>
            Remove all status effects of type S on this entity.
            </summary>
        </member>
        <member name="M:ThunderRoad.ThunderEntity.ClearAllStatus">
            <summary>
            Clear all status effects on this entity.
            </summary>
        </member>
        <member name="M:ThunderRoad.ContainerData.Content.OnCatalogRefresh">
            <summary>
            Returns true if successfully refreshed
            As mods which were inside a container which are now uninstalled could now be invalid
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.ContainerData.Content.RemoveCustomData``1">
            <summary>
            Removes all occurrences of the ContentCustomData with the type T
            </summary>
            <typeparam name="T">Type of the ContentCustomData to remove</typeparam>
        </member>
        <member name="T:ThunderRoad.ContentCustomDataLiquidContainer">
            <summary>
            Used to store liquid contents and maximum level
            </summary>
        </member>
        <member name="T:ThunderRoad.ContentCustomDataAnimatorParams">
            <summary>
            Used to save animator parameter state
            </summary>
        </member>
        <member name="T:ThunderRoad.ContentCustomOrder">
            <summary>
            Allows you to store an order value for the content, useful for sorting
            </summary>
        </member>
        <member name="M:ThunderRoad.ContentState.Clone">
            <summary>
            Returns a cloned instance of the ContentState.
            It is recommended to implment this method and avoid CloneJson and instead do a deep copy of the object yourself where possible.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ThunderRoad.ContentStateIgnoredByInventory">
            <summary>
            A class to set the state on an item so it wont appear in the inventory UI
            </summary>
        </member>
        <member name="M:ThunderRoad.DropTable`1.CalculateWeight">
            <summary>
            Calculates the percentage and asigns the probabilities how many times
            the items can be picked. Function used also to validate data when tweaking numbers in editor.
            </summary>	
        </member>
        <member name="M:ThunderRoad.Holder.RefreshChildItems">
            <summary>
            Refresh any child items of the holstered item.
            </summary>
        </member>
        <member name="M:ThunderRoad.SpellData.AddModifier(System.Object,ThunderRoad.Modifier,System.Single)">
            <summary>
            Add a default modifier to a spell.
            </summary>
            <param name="handler">Owner of this modifier</param>
            <param name="modifier">One of the three basic modifier types</param>
            <param name="value">Modifier value</param>
        </member>
        <member name="M:ThunderRoad.SpellData.AddModifier(System.Object,System.Int32,System.Single)">
            <summary>
            Add a custom modifier to a spell.
            </summary>
            <param name="handler">Owner of this modifier</param>
            <param name="modifier">Hash of the modifier name</param>
            <param name="value">Modifier value</param>
        </member>
        <member name="T:ThunderRoad.DisplayMessage">
            <summary>
            Use this class to show text, image and video messages.
            </summary>
        </member>
        <member name="M:ThunderRoad.DisplayMessage.MessageData.#ctor(System.String,System.Int32,System.Single,UnityEngine.Texture,UnityEngine.Video.VideoClip,System.Boolean,System.Boolean,System.Boolean,System.Boolean,ThunderRoad.MessageAnchorType,UnityEngine.Transform,System.Boolean,System.Single,UnityEngine.Events.UnityEvent,System.Boolean,System.Object)">
            <summary>
            Use this constructor if the text does not need localization,
            or if its already localized and will not change later if the selected language is changed
            </summary>
        </member>
        <member name="M:ThunderRoad.DisplayMessage.MessageData.#ctor(System.String,System.String,System.String,System.Int32,System.Single,UnityEngine.Texture,UnityEngine.Video.VideoClip,System.Boolean,System.Boolean,System.Boolean,System.Boolean,ThunderRoad.MessageAnchorType,UnityEngine.Transform,System.Boolean,System.Single,UnityEngine.Events.UnityEvent,System.Boolean,System.Object)">
            <summary>
            Use this constructor if the text needs to be localized
            </summary>
        </member>
        <member name="M:ThunderRoad.DisplayMessage.MessageData.#ctor(ThunderRoad.EventMessage)">
            <summary>
            Use this method to show a display message from an event message
            </summary>
        </member>
        <member name="M:ThunderRoad.DisplayMessage.OnLanguageChanged(System.String)">
            <summary>
            Update message with new language
            </summary>
            <param name="_">Unused</param>
        </member>
        <member name="M:ThunderRoad.DisplayMessage.SetUpDefaultAnchor(ThunderRoad.Creature,ThunderRoad.EventTime)">
            <summary>
            Set up the message anchor to be the current one (used for initialisation).
            Uses as an on-posses event to get the player parts.
            </summary>
            <param name="creature"></param>
            <param name="eventTime"></param>
        </member>
        <member name="M:ThunderRoad.DisplayMessage.ShowMessage(ThunderRoad.DisplayMessage.MessageData)">
            <summary>
            Show new message
            </summary>
        </member>
        <member name="M:ThunderRoad.DisplayMessage.StopMessage">
            <summary>
            Stop showing the current message
            </summary>
        </member>
        <member name="M:ThunderRoad.DisplayMessage.RefreshContent(ThunderRoad.DisplayMessage.MessageData)">
            <summary>
            Refresh display message content
            </summary>
        </member>
        <member name="M:ThunderRoad.DisplayMessage.WorldToScreenVR(UnityEngine.Camera,UnityEngine.Vector3)">
            <summary>
            Calculates screen-space position a world space object.
            </summary>
            <param name="camera">The camera used for rendering.</param>
            <param name="worldPos">World position.</param>
            <returns>Screen position of the world position.</returns>
        </member>
        <member name="F:ThunderRoad.DisplayMessage.canvasCornersBuffer">
            <summary>
            Cached buffer holding the canvas world space corners
            </summary>
        </member>
        <member name="M:ThunderRoad.DisplayMessage.CheckHands">
            <summary>
            Checks if player hands are occluding the message
            </summary>
        </member>
        <member name="M:ThunderRoad.DisplayMessage.CheckIfIsInFrontOfCanvas(UnityEngine.Vector3)">
            <summary>
            From the canvas corners, check if the given position is inside it (ignores Z)
            </summary>
            <param name="pos">Position to check for</param>
            <returns>True if inside the canvas rect, false otherwise</returns>
        </member>
        <member name="M:ThunderRoad.DisplayMessage.UpdateAnchor(ThunderRoad.MessageAnchorType)">
            <summary>
            Changes the message anchor from the given type.
            AnchorType.Transform uses the transform passed into the current message.
            </summary>
            <param name="anchor">Anchor type to use</param>
        </member>
        <member name="M:ThunderRoad.DisplayMessage.HandlePlayerInteractions">
            <summary>
            Handle player looking at the message and pressing skip button
            </summary>
        </member>
        <member name="M:ThunderRoad.DisplayMessage.HandlePlayerWarning">
            <summary>
            Play a sound and haptics on the player hand
            </summary>
        </member>
        <member name="M:ThunderRoad.DisplayMessage.GetPlayerHandFromAnchor">
            <summary>
            From the anchor value, return the player hand.
            </summary>
            <returns>Left or right player hand, null if anchor is not hand based.</returns>
        </member>
        <member name="M:ThunderRoad.DisplayMessage.SetOpacity(System.Single)">
            <summary>
            Set the opacity of the message background, image, and video.
            Uses alpha clipping with Bayer dithering.
            </summary>
            <param name="opacity01">Opacity percentage, between 0 and 1.</param>
        </member>
        <member name="P:ThunderRoad.ModManagerUI.AnyInputFocused">
            <summary>
            Is the user occupied with any input fields?
            </summary>
        </member>
        <member name="P:ThunderRoad.ModManagerUI.ModsFolder">
            <summary>
            Directory of the mods folder.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.BeginAuthentication">
            <summary>
            Unity event method to start auth from buttons.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.TryAuthenticateUser">
            <summary>
            Try authenticate the current user.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.ReturnToMenu">
            <summary>
            Close the mod manager.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.AcceptTermsOfUse">
            <summary>
            Executed from the Terms of Use 'I agree' button OnClick event
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.DeclineTermsOfUse">
            <summary>
            Executed from the Terms of Use 'Decline' button OnClick event
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.AddEmailLink">
            <summary>
            Executed from the 'Ok' button OnClick event
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.SkipEmailLink">
            <summary>
            Executed from the 'Skip' button OnClick event
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.AcceptAuthCode">
            <summary>
            Executed from the 'OK' button OnClick event for the authentication code page.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.EscapeAuthenticationPage">
            <summary>
            Executed from the 'Back' button OnClick event for the authentication code page.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.ToggleDisclaimer(System.Boolean)">
            <summary>
            Show or hide the mod manager disclaimer
            </summary>
            <param name="isVisible"></param>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.ToggleNoModsFoundMessage(System.Boolean)">
            <summary>
            Show or hide the message "No mods found." and the reset filters button
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.SetActiveCategory(ModIO.SortModsBy)">
            <summary>
            Set the active category.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.ClearCache">
            <summary>
            Clears any download/temp cache files.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.DeleteExtractionFolder(ModIO.ModId)">
            <summary>
            This will cause mod.io to re-download a mod.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.UpdateModBrowser">
            <summary>
            Update mods displaying in the browser.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.RefreshModBrowser(System.Boolean)">
            <summary>
            Fetch mods from the server and refresh the entire mods displayed
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.RefreshSearchFilter">
            <summary>
            Update the search filter to the current info.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.FetchSubscriptionList(System.Boolean,System.Action,System.Int32)">
            <summary>
            Fetch the up to date subscription list and cache it, optionally allowing any failures to be retried a maximum of two times.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.RefreshSubscriptionList(System.Boolean)">
            <summary>
            Populate the subscribed list.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.RefreshMod(ThunderRoad.UIMyModDisplay,ModIO.ModId)">
            <summary>
            Refresh a mod and its connected displays.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.RefreshDependencies(ModIO.ModId)">
            <summary>
            Ensure all dependencies are installed for the target mod.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.RefreshLooseFileHandler">
            <summary>
            This is ran to ensure the installed mods match that of the subscription list.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.TryCacheDependency(ModIO.ModId,ModIO.ModId[])">
            <summary>
            Try cache a dependency.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.UninstallAll">
            <summary>
            For Unity UI Events.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.SetAllModEnableState(System.Boolean)">
            <summary>
            For Unity UI Events.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.SetMyModsToolbarState(System.Boolean)">
            <summary>
            Enables/disables the my mods toobar.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.QueueThreadExecution(System.Action)">
            <summary>
            Queue an action on the main thread.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.DownloadTexture(ModIO.DownloadReference,System.Action{UnityEngine.Texture2D},System.Action)">
            <summary>
            Asynchronously download a reference.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.DownloadTexture(System.String,System.Action{UnityEngine.Texture2D},System.Action)">
            <summary>
            Asynchronously download a link.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.GetThumbnail(ModIO.ModProfile)">
            <summary>
            Get a valid thumbnail reference.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.SetTimeout(System.TimeSpan)">
            <summary>
            Set a timeout to prevent access to the manager.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.TimeoutEnded">
            <summary>
            The request limit timeout has ended and the player can use the mod manager again.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.Unsubscribe(ModIO.ModProfile,System.Action{ModIO.Result})">
            <summary>
            Unsubscribe from the target mod.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.Subscribe(ModIO.ModId,System.Action{ModIO.Result})">
            <summary>
            Subscribe to a mod.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.CanPerformRating">
            <summary>
            Can the current user perform a rate action to like/dislike a mod?
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.GetUserModRating(ModIO.ModId)">
            <summary>
            Is the target mod already liked?
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.RateMod(ModIO.ModId,ModIO.ModRating)">
            <summary>
            Rate a mod.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.HasEnoughFreeSpace">
            <summary>
            Is there enough free space on the drive to install the target bytes?
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.ClearPendingDownloads">
            <summary>
            Kills all pending download threads.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.InstallModOnDevice(ModIO.ModId,System.Boolean)">
            <summary>
            Install a mod to the working directory of the game.
            This mod is already subscribed to the Mod.io when we install it to the device
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.UninstallModFromDevice(ModIO.ModId)">
            <summary>
            Uninstall a mod by id.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.UninstallModFromDevice(System.String,System.Boolean)">
            <summary>
            Uninstall a mod by folder, this will void any mod.io calls.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.GetSubscribedMod(ModIO.ModId)">
            <summary>
            Obtain a subscribed mod by its ID.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.GetMod(ModIO.ModId)">
            <summary>
            Get a mod from the <see cref="F:ThunderRoad.ModManagerUI.allMods"/> cache.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.HasManifest(System.String)">
            <summary>
            Does the folder contain a manifest?
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.IsInstalled(ModIO.ModId)">
            <summary>
            Is the current mod installed?
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.IsSubscribed(ModIO.ModId)">
            <summary>
            Is the user subscribed to the target mod on the Mod.io server?
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.IsFolderManuallyInstalled(System.String)">
            <summary>
            Is the target folder a manual install or installed from mod.io?
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.FormatSemanticVersion(System.String)">
            <summary>
            Returns N.N.N.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.GetCurrentGameVersion">
            <summary>
            Get the current game version, will return UX
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.GetCurrentMinModVersion">
            <summary>
            Get the current game version, will return UX
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.GetModIOInstallDirectory(ModIO.ModId,System.Boolean@)">
            <summary>
            Get the full install path from a mod.io mod.
            </summary>
            <returns>Directory path</returns>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.GetManuallyInstalledMods">
            <summary>
            Get all mods not installed by mod.io, will return mod folders.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.GetTrackedModData(System.String)">
            <summary>
            Try get the id.modio from a folder.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.EnableOrDisableMod(System.String,System.Boolean)">
            <summary>
            Enable or disable a mod from loading.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.GetLocalInstallPath(ModIO.ModId)">
            <summary>
            Get the full path to an installed mod. (StreamingAssets/Mods/ID)
            </summary>
            <returns>A path to the mods folder with the mod name</returns>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.GetDependenciesFromCache(ModIO.ModId)">
            <summary>
            Try get all dependencies of the target mod from the cache.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.GetDependencies(ModIO.ModId)">
            <summary>
            Get all dependencies required to install the target mod, this is recursive.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.GetDependentMods(ModIO.ModId)">
            <summary>
            Get all mods DEPENDENT on the target mod.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.SerializeTrackedMod(System.String,System.Int64,System.DateTime)">
            <summary>
            Serialize a tracked mod.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.FilterBy(System.Func{ModIO.ModProfile,System.Boolean})">
            <summary>
            Get a filtered array of mods based on the input condition.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.LoadModsAtPage(System.Int32)">
            <summary>
            Load mods to the main display.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.ResetFilters">
            <summary>
            Executed from the Reset Filters button OnClick event
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.UpdateEmail(System.String)">
            <summary>
            Executed from the VR keyboard when a new key is pressed
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.UpdateAuthCode(System.String)">
            <summary>
            Executed from the VR keyboard when a new key is pressed
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.UpdateSearchPhrase(System.String)">
            <summary>
            Executed from the VR keyboard 'Confirm' button OnClick events and whenever a new key is pressed
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.ApplySearchPhrase">
            <summary>
            Executed from THE VR keyboard 'Confirm' button OnClick events and whenever a new key is pressed
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.RefreshFilteredDisplays(ModIO.ModProfile[])">
            <summary>
            Disables all displays except any contained within <see cref="F:ThunderRoad.ModManagerUI.filteredMods"/>
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.ClearSearchPhrase">
            <summary>
            Executed from the Clear search button OnClick event
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.ToggleModsBrowser(System.Boolean)">
            <summary>
            Show/hide the main screen of the mod manager
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.ShowModInfo(ModIO.ModProfile,ThunderRoad.ModManager.ModData,UnityEngine.Sprite)">
            <summary>
            Set the current mod display to the target profile.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.CreateModContent(ModIO.ModPage)">
            <summary>
            Spawn mod elements inside the mods browser scroll
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.GenerateFilters">
            <summary>
            Generate filters.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.ClearChildren(UnityEngine.Transform)">
            <summary>
            Clear all children under a parent.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.UpdateCurrentOperation(ModIO.ModId)">
            <summary>
            Update the operation handle queue.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.OrderDisplayingContentByCategory">
            <summary>
            Order the current UI by category.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.CreateFilterCategory(System.String)">
            <summary>
            Create a filter category.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.CreateFilter(System.String)">
            <summary>
            Create a new filter.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.CreateModDisplay(ModIO.ModProfile,UnityEngine.Transform)">
            <summary>
            Creates a new mod ready to display.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.CreateInstalledModDisplay(ModIO.ModProfile)">
            <summary>
            Creates a new mod ready to display.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.CreateManuallyInstalledModDisplay(System.String)">
            <summary>
            Creates a new manual mod ready to display.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.HandleResult(ModIO.Result)">
            <summary>
            Handle a result callback.
            </summary>
            <returns>True if the result error was properly handled. False, otherwise.</returns>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.HandleAuthenticationResult(System.Boolean,System.String,System.Nullable{ModIO.Result})">
            <summary>
            Invoked to handle the result of the authentication process
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.HandleGetMods(ModIO.ResultAnd{ModIO.ModPage})">
            <summary>
            Handle one get mods call
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.HandleSubscription(ModIO.Result,System.Boolean)">
            <summary>
            Handle a new subscription event.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.HandleUnSubscription(ModIO.ModProfile,ModIO.Result)">
            <summary>
            Handle an unsubscription event.
            </summary>
        </member>
        <member name="M:ThunderRoad.ModManagerUI.HandleManagerEvent(ModIO.ModManagementEventType,ModIO.ModId,ModIO.Result)">
            <summary>
            Handle a new mod event.
            </summary>
        </member>
        <member name="M:ThunderRoad.UITooltip.UpdateTextTransform">
            <summary>
            Update TMP rect transform height according to the lines count of the tooltip message
            </summary>
        </member>
        <member name="M:ThunderRoad.UITooltip.SetupTooltip(UnityEngine.UI.VerticalLayoutGroup,UnityEngine.GameObject,System.String)">
            <summary>
            Use this to set the tooltip text that will be shown if there are no localization texts setup
            </summary>
        </member>
        <member name="M:ThunderRoad.UICustomisableButton.SetInteractable(System.Boolean)">
            <summary>
            Change the visual feedback when the button IsInteractable flag changes
            </summary>
            <param name="isInteractable"></param>
        </member>
        <member name="M:ThunderRoad.UICustomisableButton.Haptic(System.Single)">
            <summary>
            Plays an haptic vibration on the pointing hand
            </summary>
            <param name="intensity">Intensity of the haptic vibration</param>
        </member>
        <member name="M:ThunderRoad.UICustomisableButton.Sound(ThunderRoad.AudioContainer,System.Single)">
            <summary>
            Plays a sound on the active pointer audio source
            </summary>
            <param name="clip">Audio clip to play</param>
            <param name="volumeDb">Volume of the sound (in DB)</param>
        </member>
        <member name="M:ThunderRoad.UICustomisableButton.GetPointerHand">
            <summary>
            Get the currently pointing hand
            </summary>
        </member>
        <member name="M:ThunderRoad.UICustomisableButton.ColorTransition(UnityEngine.UI.Graphic[],UnityEngine.Color[],UnityEngine.Color,System.Single,System.Boolean)">
            <summary>
            Make the graphics fade from their current color to the given one
            </summary>
            <param name="graphics">Graphics to change color</param>
            <param name="color">Color to fade to</param>
            <param name="fadeTime">Time to fade from the default color to the next one</param>
            <param name="pingPong">Should the fading returns back to the default color once done?</param>
        </member>
        <member name="M:ThunderRoad.UICustomisableButton.ColorTransition(TMPro.TextMeshProUGUI[],UnityEngine.Color[],UnityEngine.Color,System.Single,System.Boolean)">
            <summary>
            Make the graphics fade from their current color to the given one
            </summary>
            <param name="labels">Labels to change color</param>
            <param name="color">Color to fade to</param>
            <param name="fadeTime">Time to fade from the default color to the next one</param>
            <param name="pingPong">Should the fading returns back to the default color once done?</param>
        </member>
        <member name="M:ThunderRoad.UICustomisableButton.ColorTransitionRoutine(UnityEngine.UI.Graphic[],UnityEngine.Color[],UnityEngine.Color,System.Single,System.Boolean)">
            <summary>
            Make the graphics fade from their current color to the given one
            </summary>
            <param name="graphics">Graphics to change color</param>
            <param name="color">Color to fade to</param>
            <param name="fadeTime">Time to fade from the default color to the next one</param>
            <param name="pingPong">Should the fading returns back to the default color once done?</param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.UICustomisableButton.ColorTransitionRoutine(TMPro.TextMeshProUGUI[],UnityEngine.Color[],UnityEngine.Color,System.Single,System.Boolean)">
            <summary>
            Make the graphics fade from their current color to the given one
            </summary>
            <param name="graphics">Graphics to change color</param>
            <param name="color">Color to fade to</param>
            <param name="fadeTime">Time to fade from the default color to the next one</param>
            <param name="pingPong">Should the fading returns back to the default color once done?</param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.UICustomisableButton.GraphicSwapTransition(UnityEngine.UI.Graphic[],UnityEngine.UI.Graphic[])">
            <summary>
            Make the first graphics array disable, and the second one enable.
            </summary>
            <param name="graphicsToSwap">Graphics to disable</param>
            <param name="graphicsToSwapFor">Graphics to enable</param>
        </member>
        <member name="M:ThunderRoad.UICustomisableButton.SetColor(UnityEngine.Color,UnityEngine.UI.Graphic[],UnityEngine.Color[])">
            <summary>
            Sets the color of the graphics
            </summary>
            <param name="color">Color to set the graphics to</param>
        </member>
        <member name="M:ThunderRoad.UICustomisableButton.SetColor(UnityEngine.Color,TMPro.TextMeshProUGUI[],UnityEngine.Color[])">
            <summary>
            Sets the color of the graphics
            </summary>
            <param name="color">Color to set the graphics to</param>
        </member>
        <member name="M:ThunderRoad.UICustomisableButton.SetFont(TMPro.TMP_FontAsset,TMPro.TMP_Text[])">
            <summary>
            Use this to set the default or the outline font to the text labels
            </summary>
            <param name="font">New font to set</param>
            <param name="labels">List of labels to update</param>
        </member>
        <member name="M:ThunderRoad.UIConfirmationWindow.ShowWindow(System.String,UnityEngine.Events.UnityAction,UnityEngine.Events.UnityAction,System.String,System.String,System.String)">
            <summary>
            Show operation confirmation window
            </summary>
            <param name="modName">Name and Id of the mod that will be uninstalled</param>
            <param name="onCancelCallback">Callback to be executed if the user clicked the cancel button</param>
            <param name="onConfirmCallback">Callback to be executed if the user clicked the confirm button</param>
        </member>
        <member name="M:ThunderRoad.UIConfirmationWindow.HideWindow">
            <summary>
            Hide this window.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIConfirmationWindow.Cancel">
            <summary>
            Executed from the cancel button OnClick callback
            </summary>
        </member>
        <member name="M:ThunderRoad.UIConfirmationWindow.Confirm">
            <summary>
            Executed from the confirm button OnClick callback
            </summary>
        </member>
        <member name="M:ThunderRoad.CatalogCategory.GetHashId(System.String)">
            <summary>
            Returns a hash of the lower case version of the ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ThunderRoad.BhapticsHandler">
            <summary>
            This is the core implementation handler, it hooks in to the game instead of direct integration in to the source,
            doing this means we can remove integration or expand it all from here and not need to scrape the source for events.
            </summary>
        </member>
        <member name="P:ThunderRoad.BhapticsHandler.IsRunning">
            <summary>
            Is the BHaptic integration running?
            </summary>
        </member>
        <member name="P:ThunderRoad.BhapticsHandler.ArmsActive">
            <summary>
            Are the arm devices active?
            </summary>
        </member>
        <member name="P:ThunderRoad.BhapticsHandler.VestActive">
            <summary>
            Is the vest device active?
            </summary>
        </member>
        <member name="M:ThunderRoad.BhapticsHandler.PlayHaptic(System.Single,System.Single,ThunderRoad.BhapticsHandler.FeedbackType,System.Boolean,System.Single,ThunderRoad.BhapticsHandler.FeedbackType,System.Boolean,System.Single)">
            <summary>
            Play a haptic event.
            </summary>
        </member>
        <member name="M:ThunderRoad.BhapticsHandler.PauseHapticFeedBack(ThunderRoad.BhapticsHandler.FeedbackType)">
            <summary>
            Turn off an event.
            </summary>
        </member>
        <member name="M:ThunderRoad.BhapticsHandler.CreateEventHooks">
            <summary>
            Hook in to all the game events supported.
            </summary>
        </member>
        <member name="M:ThunderRoad.BhapticsHandler.FillFeedbackList">
            <summary>
            Fill the feedback map dict, this is a huge method consisting of 200+ events.
            </summary>
        </member>
        <member name="M:ThunderRoad.BhapticsHandler.CheckSystems">
            <summary>
            Check what devices are connected.
            </summary>
        </member>
        <member name="M:ThunderRoad.BhapticsHandler.HandlePlayerSpawn(ThunderRoad.Creature)">
            <summary>
            Setup all the player events.
            </summary>
        </member>
        <member name="M:ThunderRoad.BhapticsHandler.GetPlayerSpellFeedbackType(System.String)">
            <summary>
            Get the spell feedback from id.
            </summary>
        </member>
        <member name="M:ThunderRoad.BhapticsHandler.GetPlayerMeleeFeedbackType(ThunderRoad.DamageType,ThunderRoad.MaterialData,ThunderRoad.MaterialData)">
            <summary>
            Tries to convert the input materials into feedback.
            </summary>
        </member>
        <member name="M:ThunderRoad.BhapticsHandler.GetPlayerPunchFeedback(System.String)">
            <summary>
            Try get the feedback from a punch.
            </summary>
        </member>
        <member name="T:ThunderRoad.BhapticsHandler.Feedback">
            <summary>
            Contains information about a haptic feedback type.
            </summary>
        </member>
        <member name="M:ThunderRoad.LevelModuleCleaner.ShouldBeCleanedUp(ThunderRoad.Item,System.Boolean)">
            <summary>
            Checks if a given item should be cleaned up, or if it is currently being used.
            </summary>
            <param name="item">item to check for.</param>
            <param name="ignoreDisallowDespawn">If true, ignore disallow despawn and spawn times equal to zero. Used by item spawners</param>
            <returns>True if it should be cleaned, false otherwise.</returns>
        </member>
        <member name="P:ThunderRoad.Wearable.Creature">
            <summary>
            The creature this wearable is targeting.
            </summary>
        </member>
        <member name="P:ThunderRoad.Wearable.Part">
            <summary>
            The target part this wearable is attached to.
            </summary>
        </member>
        <member name="E:ThunderRoad.Wearable.OnItemEquippedEvent">
            <summary>
            Invoked when an item has been equipped.
            </summary>
        </member>
        <member name="E:ThunderRoad.Wearable.OnItemUnEquippedEvent">
            <summary>
            Invoked when an item has been equipped.
            </summary>
        </member>
        <member name="E:ThunderRoad.Wearable.OnEditModeChangedEvent">
            <summary>
            Invoked when edit mode has changed its state.
            </summary>
        </member>
        <member name="P:ThunderRoad.Wearable.WardrobeLayersInt">
            <summary>
            This wearable layers. Layers can be obtained through ItemToLayerName/IndexToLayerName.
            </summary>
        </member>
        <member name="M:ThunderRoad.Wearable.IsItemCompatible(ThunderRoad.ItemModuleWardrobe.CreatureWardrobe)">
            <summary>
            Is the target item wardrobe compatible with this wearable?
            </summary>
        </member>
        <member name="M:ThunderRoad.Wearable.GetWornPartRenderers(System.Int32)">
            <summary>
            Returns renderers from the first available lod for for the given layer.
            </summary>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.Wearable.GetWornPartRenderers">
            <summary>
            Returns renderers from the first available lod for either the worn armour or base mesh part.
            </summary>
        </member>
        <member name="M:ThunderRoad.Wearable.EquipItem(ThunderRoad.Item)">
            <summary>
            Equip an item to this wearable slot, the Item must be wearable and compatible.
            </summary>
            <param name="onItemUnequipped">If an existing item is equipped this is invoked when it is removed.</param>
            <returns>If the item could be worn.</returns>
        </member>
        <member name="M:ThunderRoad.Wearable.UnEquip(ThunderRoad.ItemContent,System.Action{ThunderRoad.Item},System.Boolean)">
            <summary>
            Unequip a WARDROBE container item from the player.
            </summary>
            <param name="itemContent">The item to unequip.</param>
            <param name="onItemUnequipped">If an existing item is equipped this is invoked when it is removed.</param>
            <param name="grabReleasedItem">If the item should be grabbed after being unequipped.</param>
            <returns>If the item could be unequipped.</returns>
        </member>
        <member name="M:ThunderRoad.Wearable.UnEquip(System.String,System.Action{ThunderRoad.Item})">
            <summary>
            Unequip the current worn item.
            </summary>
            <param name="onItemUnequipped">If an existing item is equipped this is invoked when it is removed.</param>
            <returns>If the item could be unequipped.</returns>
        </member>
        <member name="M:ThunderRoad.Wearable.GetEquipmentOnLayer(System.String)">
            <summary>
            Get the current worn item on the target layer.
            </summary>
        </member>
        <member name="M:ThunderRoad.Wearable.HasEquipmentOnAnyLayers(System.String[])">
            <summary>
            Does any of the target layers have equipment on them?
            </summary>
        </member>
        <member name="M:ThunderRoad.Wearable.IsEmpty">
            <summary>
            Is this wearable fully empty?
            </summary>
        </member>
        <member name="M:ThunderRoad.Wearable.ItemToLayerName(ThunderRoad.ItemModuleWardrobe.CreatureWardrobe)">
            <summary>
            Get the layer name of the target item.
            This will get the name of the layer from the target item.
            </summary>
        </member>
        <member name="M:ThunderRoad.Wearable.IndexToLayerName(System.Int32)">
            <summary>
            Get the name of the target layer.
            This takes the index of the layer and returns its name.
            </summary>
        </member>
        <member name="M:ThunderRoad.Wearable.CanTouch(ThunderRoad.RagdollHand)">
            <summary>
            Can this be touched by the target hand?
            </summary>
        </member>
        <member name="M:ThunderRoad.Wearable.OnTouchStart(ThunderRoad.RagdollHand)">
            <summary>
            Invoked when a hand has started touching this interactable.
            </summary>
        </member>
        <member name="M:ThunderRoad.Wearable.OnTouchEnd(ThunderRoad.RagdollHand)">
            <summary>
            Invoked when a hand has stopped touching this interactable.
            </summary>
        </member>
        <member name="M:ThunderRoad.Wearable.ShowHint(ThunderRoad.RagdollHand)">
            <summary>
            Show the visual hint to the player.
            </summary>
        </member>
        <member name="M:ThunderRoad.Wearable.CheckInteraction(ThunderRoad.RagdollHand)">
            <summary>
            Can the current ragdoll target interact with this slot?
            </summary>
        </member>
        <member name="M:ThunderRoad.Wearable.GetWornLayerInt">
            <summary>
            Get the top-most layer as its layer int.
            </summary>
        </member>
        <member name="M:ThunderRoad.Wearable.FindRendererWithName(System.Collections.Generic.List{ThunderRoad.Manikin.ManikinPart},System.String,System.String)">
            <summary>
            Loop through parts in the target list and return whichever matches the base/alt name.
            </summary>
        </member>
        <member name="M:ThunderRoad.Wearable.GetAndOutlinePart">
            <summary>
            Queue into the mirror render queue and return the outlining part.
            </summary>
        </member>
        <member name="M:ThunderRoad.Wearable.NoInteraction(ThunderRoad.RagdollHand)">
            <summary>
            Default result for readability.
            </summary>
        </member>
        <member name="M:ThunderRoad.Wearable.CanEditFromMirror">
            <summary>
            Checks if the current world mirror allows armour to be edited.
            </summary>
        </member>
        <member name="M:ThunderRoad.Wearable.GetAllLayers">
            <summary>
            Get all layers.
            This is to avoid LINQ.
            </summary>
        </member>
        <member name="M:ThunderRoad.Wearable.GetLayerEntry(System.String)">
            <summary>
            This is used to retrieve an entry from the layer array.
            </summary>
        </member>
        <member name="M:ThunderRoad.Wearable.PlayAudioFromLocation(UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation,System.Single)">
            <summary>
            Play audio from a target location.
            </summary>
        </member>
        <member name="M:ThunderRoad.Wearable.RefreshOtherInteractor(ThunderRoad.RagdollHand)">
            <summary>
            This updates the interactor hint display state on the opposite hand
            if that hand is currently touching the target item, if so and the
            item is equipped the hint bubble will float, this is triggered when
            an item is equipped, forcing a refresh on the other hands state.
            </summary>
        </member>
        <member name="M:ThunderRoad.Wearable.SetHintState(ThunderRoad.RagdollHand)">
            <summary>
            Toggle the hint state.
            </summary>
            <param name="target">Target hand (if null hint will be hidden).</param>
        </member>
        <member name="M:ThunderRoad.Wearable.GetLayers">
            This is for QOL, no need to create an editor script since this will be stripped anyway. //
        </member>
        <member name="M:ThunderRoad.Wearable.GetAllChannels">
            <summary>
            This will allow for easier channel selection instead of manually typing strings.
            </summary>
        </member>
        <member name="M:ThunderRoad.ItemData.CatalogEditorRefresh">
            <summary>
            This is called when Odin is drawing the catalog editor to load icons and such
            </summary>
        </member>
        <member name="M:ThunderRoad.IStatus.Apply">
            <summary>
            Called when the effect is first applied.
            </summary>
        </member>
        <member name="M:ThunderRoad.IStatus.FirstApply">
            <summary>
            Called when the effect is first applied.
            Not called on subsequent Apply() calls from ReapplyOnValueChange.
            </summary>
        </member>
        <member name="M:ThunderRoad.IStatus.OnValueChange">
            <summary>
            Called when the status parameter value has changed, if it has one.
            You may want to re-apply or change the effect on your entity.
            </summary>
        </member>
        <member name="M:ThunderRoad.IStatus.FixedUpdate">
            <summary>
            Called once per entity per effect per FixedUpdate.
            </summary>
        </member>
        <member name="M:ThunderRoad.IStatus.Update">
            <summary>
            Called once per entity per effect per frame.
            </summary>
        </member>
        <member name="M:ThunderRoad.IStatus.Remove">
            <summary>
            Called when it's time to remove the effect. May be called on value change if ReapplyOnValueChange is true.
            </summary>
        </member>
        <member name="M:ThunderRoad.IStatus.FullRemove">
            <summary>
            Called when the effect is removed. Only called when the effect is fully removed, not just being reapplied.
            </summary>
        </member>
        <member name="M:ThunderRoad.IStatus.Refresh">
            <summary>
            Called to check for any expiring handlers.
            </summary>
        </member>
        <member name="M:ThunderRoad.IStatus.Despawn">
            <summary>
            Called to despawn the status and release its pooled objects
            </summary>
        </member>
        <member name="M:ThunderRoad.IStatus.HasHandlers">
            <summary>
            Does the status effect have any handlers?
            </summary>
        </member>
        <member name="M:ThunderRoad.IStatus.RemoveHandler(System.Object)">
            <summary>
            Remove a handler from this effect.
            Does not refresh the effect, use <c>ThunderEntity.Remove()</c> instead.
            </summary>
        </member>
        <member name="M:ThunderRoad.IStatus.ClearHandlers">
            <summary>
            Remove all handlers from this effect.
            Does not remove the effect, use <c>ThunderEntity.Clear()</c> instead.
            </summary>
        </member>
        <member name="M:ThunderRoad.Status.GetValue">
            <summary>
            Combine values from the list of handlers on this status instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.Status.Transfer(ThunderRoad.ThunderEntity)">
            <summary>
            Replay every non-infinite status onto another entity
            </summary>
            <param name="other">The entity to inflict these statuses upon</param>
        </member>
        <member name="M:ThunderRoad.UIMenuContentArea.CheckResetSettingsButton">
            <summary>
            Enable 'Reset Settings' button if there are settings to reset. Disable it, otherwise.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIMenuContentArea.UpdateErrorsContentSize">
            <summary>
            Update the content size of the errors messages to avoid overlapping text.
            We need to do this manually since we cannot add a new ContentSizeFitter component to the error text objects, because these objects
            are children of a content layout group, which will set the size of the rect components automatically, and should not be "overriden"
            by a new ContentSizeFitter on each child. So, we need the calculate the text bounds and update the text rect transform size.
            </summary>
        </member>
        <member name="F:ThunderRoad.ItemModuleOpenContainer.openInventoryType">
            <summary>
            The type of inventory to open
            </summary>
        </member>
        <member name="M:ThunderRoad.ItemMagnet.ReleaseAndMove(UnityEngine.Transform)">
            <summary>
            Only work for one item
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:ThunderRoad.SkillTree.SkillTreeTierNode.ClearOrbs">
            <summary>
            clear orb lists and blocker, does not destroy anything
            </summary>
            <returns>return the list of all orbs that where present before clear so it can be destroy later</returns>
        </member>
        <member name="M:ThunderRoad.SkillTree.CheckArcStates">
            <summary>
            Check which tier rings should, or not, be visible
            </summary>
        </member>
        <member name="M:ThunderRoad.SkillTree.IsClaimableSkills(System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Check if there is skills that the player can claim from a skill tree.
            </summary>
            <param name="mainTreeName">The Main tree name</param>
            <param name="mainTier">The Tier limit for the main Tree</param>
            <param name="otherTreeNameTier">List of tuple that contains both treeName and minimum Tier to check for mixed tree with the main tree.</param>
            <returns>True if there is at least one skill that can be claimed, flass if none can be claimed.</returns>
        </member>
        <member name="M:ThunderRoad.CollisionInstance.FakeCollision(ThunderRoad.ColliderGroup,ThunderRoad.ColliderGroup,UnityEngine.Collider,UnityEngine.Collider,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Single,ThunderRoad.CollisionHandler@,ThunderRoad.CollisionHandler@,ThunderRoad.CollisionInstance@,ThunderRoad.CollisionInstance@,System.Nullable{System.Single})">
            <summary>
            Fakes a collision to the highest degree of accuracy it can. Takes all of the information needed to construct new hits and invoke collisions from that information.
            Passing in null intensity calculates it from velocity. Passing in null material names uses collider materials. Outputs the handlers and instances.
            Allows manual handling of ending the collision using the out parameters.
            </summary>
        </member>
        <member name="M:ThunderRoad.CollisionInstance.FakeCollision(ThunderRoad.ColliderGroup,ThunderRoad.ColliderGroup,UnityEngine.Collider,UnityEngine.Collider,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Single,System.Single)">
            <summary>
            Fakes a collision to the highest degree of accuracy it can. Takes all of the information needed to construct new hits and invoke collisions from that information.
            Passing in null intensity calculates it from velocity. Passing in null material names uses collider materials.
            Outputs no information other than the fake collision state and requires a duration for the collision.
            </summary>
        </member>
        <member name="M:ThunderRoad.CollisionInstance.TryDamage(UnityEngine.Collider,ThunderRoad.ColliderGroup)">
            <summary>
            Try to hit with the damagers in the source collider and group
            </summary>
            <param name="sourceCollider"></param>
            <param name="sourceColliderGroup"></param>
        </member>
        <member name="M:ThunderRoad.Area.BlendAudioSource.ApplyVolume(System.Single)">
            <summary>
            Apply volume as lerp between 0 and original volume
            </summary>
            <param name="t"> t the lerp parameter (t = 1.0f will apply original volume)</param>
        </member>
        <member name="M:ThunderRoad.Area.GetReflectionLayers">
            <summary>
            The layers which will be rendered by the reflection probes
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.Area.BlendAudio(System.Single)">
            <summary>
            Blend audio with parameter t
            </summary>
            <param name="t"> when t = 0 volume is 0, when t is 1 volume will be the original one</param>
        </member>
        <member name="M:ThunderRoad.Area.BlendLight(System.Single)">
            <summary>
            Blend between Current light preset and the area preset
            This does not change the current preset
            </summary>
            <param name="t">When t is 0 current level preset is fully apply, when t is 1 this area preset is fully apply</param>
        </member>
        <member name="M:ThunderRoad.GravityZone.IsPointWithinCollider(UnityEngine.Collider,UnityEngine.Vector3)">
            <summary>
            Checks if the given point is inside the given collider.
            </summary>
            <param name="collider">Collider to check for.</param>
            <param name="point">Point to check for.</param>
            <returns>True if the point is inside the given collider, false otherwise.</returns>
        </member>
        <member name="M:ThunderRoad.UILoreBookmark.SetFromFaction(ThunderRoad.LoreDisplayTypeScriptableObject,System.Action)">
            <summary>
            Set the visuals to the faction.
            </summary>
        </member>
        <member name="M:ThunderRoad.UITextDisplay.SetText(System.String)">
            <summary>
            Set the text shown in the UI element
            </summary>
        </member>
        <member name="M:ThunderRoad.UITextDisplay.SetupText(TMPro.FontStyles,TMPro.TextAlignmentOptions)">
            <summary>
            Setup text style and alignment
            </summary>
        </member>
        <member name="M:ThunderRoad.UITextDisplay.SetLocalizationsIds(System.String,System.String)">
            <summary>
            Set the text localization Ids
            </summary>
        </member>
        <member name="M:ThunderRoad.UITextDisplay.Refresh">
            <summary>
            Update shown text
            </summary>
        </member>
        <member name="M:ThunderRoad.ShopTower.ShowTower(System.Boolean)">
            <summary>
            Use this to show the tower intact or collapsed.
            </summary>
        </member>
        <member name="M:ThunderRoad.Creature.UpdatePartsBlendShapes(ThunderRoad.Manikin.ManikinPart[])">
            <summary>
            Update the current parts blends shapes from the current wardrobes
            </summary>
            <param name="allParts"></param>
        </member>
        <member name="M:ThunderRoad.Creature.GetCurrentWardrobesData">
            <summary>
            Return current wardrobes data by fetching into layers.
            </summary>
            <returns>wardrobes data</returns>
        </member>
        <member name="M:ThunderRoad.Creature.DisarmCreature(ThunderRoad.Creature)">
            <summary>
            Make a creature drop whatever they are holding
            </summary>
            <param name="creature"></param>
        </member>
        <member name="M:ThunderRoad.Creature.DisarmCreature(ThunderRoad.Creature,ThunderRoad.Side)">
            <summary>
            Make a creature drop whatever they are holding in a particular side
            </summary>
            <param name="creature"></param>
            <param name="side"></param>
        </member>
        <member name="M:ThunderRoad.Creature.IsCreatureGrabbingHandle(ThunderRoad.Creature)">
            <summary>
            Returns true if the creature is holding something
            </summary>
            <param name="creature"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.Creature.IsCreatureGrabbingHandle(ThunderRoad.Creature,ThunderRoad.Side)">
            <summary>
            Returns true if the creature is holding something in a particular side
            </summary>
            <param name="creature"></param>
            <param name="side"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.Creature.GetEthnicGroupFromId(System.String)">
            <summary>
            Return the current ethnic group from it's id
            </summary>
            <param name="id">Id of the ethnic group to seartch</param>
            <returns>The matching ethnic group if found, the first one if not</returns>
        </member>
        <member name="M:ThunderRoad.Creature.SetEthnicGroup(ThunderRoad.CreatureData.EthnicGroup)">
            <summary>
            Sets the ethnic group of the creature.
            It will change its head wardrobe part if the current one doesn't match
            </summary>
            <param name="creatureDataEthnicGroup">Ethnic group to change to.</param>
        </member>
        <member name="M:ThunderRoad.Creature.UpdateManikinAfterHeadChange(ThunderRoad.EventTime)">
            <summary>
            Update the property of the creature when the head changed
            </summary>
            <param name="eventTime"></param>
        </member>
        <member name="F:ThunderRoad.ArmorStats.numberOfWardrobeSlotsOnCreature">
            <summary>
            This is for averaging the stats of the worn items
            </summary>
        </member>
        <member name="F:ThunderRoad.EffectModuleVfx.pools">
            <summary>
            A pool of each EffectVfx objects for each effectModule configuration. 
            </summary>
        </member>
        <member name="M:ThunderRoad.EffectModuleVfx.GetOrCreateEffectVfxPoolManager(ThunderRoad.EffectModuleVfx)">
            <summary>
            This will get or create the EffectAudioPoolContainer for a particular effect and audioClip from this EffectModuleAudios audioContainer
            </summary>
        </member>
        <member name="M:ThunderRoad.EffectModuleVfx.CreateEffectVfx">
            <summary>
            Creates an configured, non pooled EffectVfx instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.EffectModuleVfx.Configure(ThunderRoad.EffectVfx)">
            <summary>
            Configures an EffectVFX with values from this EffectModuleVfx
            </summary>
            <param name="effectVfx"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.TutorialArea.Init">
            <summary>
            Used by the editor tool to initialize data structures.
            </summary>
        </member>
        <member name="M:ThunderRoad.TutorialArea.Disable(System.Boolean)">
            <summary>
            Disable area objects until it is time for it to be activated
            </summary>
        </member>
        <member name="M:ThunderRoad.TutorialArea.OnSlideStartEvent">
            <summary>
            This method should be called from the Rope object, HandleEventLinker.OnSlideStart event
            </summary>
        </member>
        <member name="M:ThunderRoad.TutorialArea.OnNPCKilled">
            <summary>
            This method should be called from the CreatureSpawner.OnKill event
            </summary>
        </member>
        <member name="M:ThunderRoad.TutorialArea.StartAction(System.Int32)">
            <summary>
            Start a specific action from the actions not done on this area actions stack
            </summary>
            <param name="actionIndex">Index of the next action on the actions stack</param>
        </member>
        <member name="M:ThunderRoad.TutorialArea.ProcessAction(System.Boolean,System.Int32)">
            <summary>
            Process one action from the actions stack
            </summary>
            <param name="forceProcess">True if this action was forced to be processed while the player is skipping some actions.</param>
        </member>
        <member name="M:ThunderRoad.TutorialArea.OnCreatureSpawnerStart(ThunderRoad.CreatureSpawner)">
            <summary>
            This is called from the Creature Spawners OnStart event setup on the prefab
            </summary>
        </member>
        <member name="M:ThunderRoad.TutorialArea.ReachedEndZoneTrigger">
            <summary>
            The player reached the end zone trigger of this tutorial area
            </summary>
        </member>
        <member name="M:ThunderRoad.TutorialArea.OnCreatureSpawn(ThunderRoad.Creature)">
            <summary>
            Assign spawned creature anchor to any message that has that creature spawner assigned as an anchor. We need to do this
            before showing each message, since once the npc is killed we cannot access it through the creatureSpawner.GetSpawnedCreature,
            because it is removed from that list, to assign it to the next messages using that npc as an anchor
            </summary>
        </member>
        <member name="F:ThunderRoad.EffectModuleAudio.pools">
            <summary>
            A pool of each EffectAudio objects for each effectModule configuration and audioClip. 
            </summary>
        </member>
        <member name="M:ThunderRoad.EffectModuleAudio.GetOrCreateEffectAudioPoolManager(ThunderRoad.EffectData,System.Int32,ThunderRoad.EffectModuleAudio)">
            <summary>
            This will get or create the EffectAudioPoolContainer for a particular effect and audioClip from this EffectModuleAudios audioContainer
            </summary>
        </member>
        <member name="M:ThunderRoad.UIJournalEntry.LoadEntry(ThunderRoad.LoreScriptableObject.LorePack,ThunderRoad.UILoreJournal,ThunderRoad.LoreScriptableObject.LoreData,ThunderRoad.LoreDisplayTypeScriptableObject,System.Boolean)">
            <summary>
            Load this entry.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIJournalEntry.SetFont(TMPro.TMP_FontAsset)">
            <summary>
            Set the font.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIJournalEntry.MarkRead">
            <summary>
            Mark this entry as read.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIJournalEntry.MarkUnRead">
            <summary>
            Mark this entry unread.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIJournalEntry.SetToggle(System.Boolean)">
            <summary>
            Sets the toggle state.
            </summary>
        </member>
        <member name="M:ThunderRoad.UIJournalEntry.Sound(ThunderRoad.AudioContainer,System.Single)">
            <summary>
            Plays a sound on the active pointer audio source
            </summary>
            <param name="clip">Audio clip to play</param>
            <param name="volumeDb">Volume of the sound (in DB)</param>
        </member>
        <member name="T:ThunderRoad.DeepCopyByExpressionTrees">
            <summary>
            Superfast deep copier class, which uses Expression trees.
            </summary>
        </member>
        <member name="M:ThunderRoad.DeepCopyByExpressionTrees.DeepCopyByExpressionTree``1(``0,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Creates a deep copy of an object.
            </summary>
            <typeparam name="T">Object type.</typeparam>
            <param name="original">Object to copy.</param>
            <param name="copiedReferencesDict">Dictionary of already copied objects (Keys: original objects, Values: their copies).</param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.SkillTreeReceptacle.ShowCrystalTrees(System.Boolean)">
            <summary>
            Show the main tree connected to this receptacle/crystal, and also update the neighbors' mixed trees on each side
            </summary>
            <param name="skipDelay"></param>
        </member>
        <member name="M:ThunderRoad.SkillTreeReceptacle.ShowCrystalTreesCoroutine(System.Boolean)">
            <summary>
            Show the main tree connected to this receptacle/crystal, and also update the neighbors' mixed trees on each side
            </summary>
            <param name="skipDelay"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderRoad.SkillTreeReceptacle.ShowTreeCoroutine(ThunderRoad.SkillTreeCrystal,ThunderRoad.SkillTreeCrystal,System.Boolean)">
            <summary>
            Show an individual skill tree, main or mixed
            </summary>
            <param name="mainCrystal"></param>
            <param name="otherMixedCrystal"></param>
            <returns></returns>
        </member>
        <member name="F:ThunderRoad.Footstep.materialId">
            <summary>
            Id of the material to retrieve the sounds from (in catalog).
            </summary>
        </member>
        <member name="F:ThunderRoad.Footstep.usePerFootRaycastCheck">
            <summary>
            If true, on each step we trigger a raycast sampling above and under the foot.
            We only keep the higher collider and play its effects. We discard the others.
            </summary>
        </member>
        <member name="F:ThunderRoad.Footstep.minMaxStandingVelocity">
            <summary>
            Velocity thresholds, used in an inverse lerp when walking and running.
            </summary>
        </member>
        <member name="F:ThunderRoad.Footstep.minMaxFallingVelocity">
            <summary>
            Velocity thresholds, used in an inverse lerp when falling.
            </summary>
        </member>
        <member name="F:ThunderRoad.Footstep.fallingIntensityFactor">
            <summary>
            Factor used to tweak the intensity of the footsteps when falling.
            </summary>
        </member>
        <member name="F:ThunderRoad.Footstep.crouchingIntensityFactor">
            <summary>
            Factor used to tweak the intensity of the footsteps when crouching.
            </summary>
        </member>
        <member name="F:ThunderRoad.Footstep.stepMinDelay">
            <summary>
            Cool-down delay in second between two steps. Different timers are used for each foot.
            </summary>
        </member>
        <member name="F:ThunderRoad.Footstep.fallMinDelay">
            <summary>
            Cool-down delay in second between two falls.
            </summary>
        </member>
        <member name="F:ThunderRoad.Footstep.footstepDetectionHeightThreshold">
            <summary>
            Height used to detect footsteps, it's added to the locomotion ground point (in meters).
            </summary>
        </member>
        <member name="F:ThunderRoad.Footstep.footstepDetectionRunningHeightThreshold">
            <summary>
            Height used to detect footsteps while running, it's added to the locomotion ground point (in meters).
            </summary>
        </member>
        <member name="F:ThunderRoad.Footstep.hits">
            <summary>
            RaycastHit buffer, used to sample the floor material per foot.
            </summary>
        </member>
        <member name="M:ThunderRoad.Footstep.OnPossessionEvent(ThunderRoad.Creature,ThunderRoad.EventTime)">
            <summary>
            Caches the player's creature and locomotion.
            Updates on ground event binding.
            Caches the creature's feet.
            </summary>
            <param name="creature">Player's creature</param>
            <param name="eventTime"></param>
        </member>
        <member name="M:ThunderRoad.Footstep.OnUnpossessionEvent(ThunderRoad.Creature,ThunderRoad.EventTime)">
            <summary>
            Un-cache the player's creature and locomotion. Updates on ground event binding
            </summary>
            <param name="creature">Player's creature</param>
            <param name="eventTime"></param>
        </member>
        <member name="M:ThunderRoad.Footstep.OnLocomotionGroundEvent(ThunderRoad.Locomotion,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Collider)">
            <summary>
            When the locomotion is grounded (ie. falling), this method gets called.
            It forces the feet to play their sounds.
            </summary>
            <param name="groundPoint">Position of the fall</param>
            <param name="velocity">Velocity of the fall</param>
            <param name="groundCollider">Collider of the ground object</param>
        </member>
        <member name="M:ThunderRoad.Footstep.PlayOnGroundEffects(UnityEngine.Vector3,UnityEngine.Collider,System.Single,System.Single)">
            <summary>
            Picks effects from the groundCollider's material, and play on the given ground point.
            </summary>
            <param name="groundPoint">Where to spawn the effects (world)</param>
            <param name="groundCollider">GroundCollider the creature is currently standing on</param>
            <param name="speed">Speed of the effects to play</param>
            <param name="intensity">Intensity of the effects to play</param>
        </member>
        <member name="M:ThunderRoad.Footstep.GetFootSpeedRatio(System.Boolean)">
            <summary>
            Converts the creature locomotion velocity to a [0 ; 1] float, using its magnitude.
            The value is clamped between 2 thresholds values (different when falling).
            </summary>
            <returns>A velocity magnitude clamped between 2 thresholds values, different when falling.</returns>
        </member>
        <member name="M:ThunderRoad.Footstep.ManagedUpdate">
            <summary>
            Keep track of the steps cool-downs and calls related stepping methods
            </summary>
        </member>
        <member name="M:ThunderRoad.Footstep.CheckFootLeft(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Checks if the left foot has stepped.
            </summary>
            <param name="footLeftPosition">Position of the left foot.</param>
            <param name="forceStep">Force the sound to play even when on cooldown (used on fall).</param>
        </member>
        <member name="M:ThunderRoad.Footstep.CheckFootRight(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Checks if the right foot has stepped
            </summary>
            <param name="footRightPosition">position of the right foot</param>
            <param name="forceStep">Force the sound to play even when on cooldown (used on fall)</param>
        </member>
        <member name="M:ThunderRoad.Footstep.PlayStepEffects(UnityEngine.Vector3,ThunderRoad.Side,System.Single)">
            <summary>
            Choose and play footsteps effects.
            </summary>
            <param name="position">Where to spawn the effect (world)</param>
            <param name="side">Side of the foot currently stepping</param>
            <param name="velocity">Velocity of the creature</param>
        </member>
        <member name="M:ThunderRoad.Footstep.PerFootRaycast(UnityEngine.Vector3,ThunderRoad.Side,System.Single)">
            <summary>
            Casts a ray on the position, sampling above and under the foot.
            Plays only the effects of the highest collider.
            </summary>
            <param name="position">Position of the ray to cast</param>
            <param name="side">Side of the foot</param>
            <param name="velocity">Velocity of the player</param>
            <returns>True if it found and played an effect, false otherwise</returns>
        </member>
        <member name="M:ThunderRoad.EffectData.Spawn(UnityEngine.Transform,System.Boolean,ThunderRoad.ColliderGroup,System.Boolean)">
            <summary>
            Added for mod compatability
            </summary>
        </member>
        <member name="M:ThunderRoad.EffectData.Spawn(UnityEngine.Transform,ThunderRoad.CollisionInstance,System.Boolean,ThunderRoad.ColliderGroup,System.Boolean,System.Single,System.Single,System.Type[])">
            <summary>
             Spawn an effect at the parents position and rotation
            </summary>
        </member>
        <member name="M:ThunderRoad.EffectData.Spawn(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,ThunderRoad.CollisionInstance,System.Boolean,ThunderRoad.ColliderGroup,System.Boolean,System.Single,System.Single,System.Type[])">
            <summary>
             Spawn an effect at the given position and rotation
            </summary>
        </member>
        <member name="P:ThunderRoad.SpawnableArea.IsCulled">
            <summary>
            When cull Most of the area is deactivate 
            </summary>
        </member>
        <member name="P:ThunderRoad.SpawnableArea.IsLiteMemoryState">
            <summary>
            In lite memory state some data are unload, use when area is far away for memory performance
            </summary>
        </member>
        <member name="M:ThunderRoad.SpawnableArea.FindRecursive(UnityEngine.Vector3)">
            <summary>
            Find the area that contains the position inb this SpawnableArea and in connected area using a breadth search.
            (Breadth search means that it will first look in this area then in the connected areas and after connected areas to connected areas)
            </summary>
            <param name="position"></param>
            <returns>Return the SpawnableArea that contains the position</returns>
        </member>
        <member name="M:ThunderRoad.Keyboard.Show(System.String,System.String)">
            <summary>
            Show the instantiated keyboard.
            </summary>
            <param name="placeHolderText">The custom placeholder text should already be localized in the selected language</param>
            <param name="typedText">Text that will be displayed as already typed. Useful to to show any previously typed characters when the keyboard is re-opened</param>
        </member>
        <member name="F:ThunderRoad.VoiceData.pools">
            <summary>
            Key of [audioContainerAddress + clipHash] to a pool of audiosources
            </summary>
        </member>
        <member name="M:ThunderRoad.VoiceData.GetOrCreateAudioPoolManager(ThunderRoad.AudioContainer,System.String,System.Int32)">
            <summary>
            This will get or create the AudioPoolManager for a particular VoiceData and audioClip from this VoiceDatas audioContainer
            </summary>
        </member>
        <member name="M:LevelModuleResetSpawners.Reset">
            <summary>
            Resets all spawners, by despawning unused items and respawning them.
            </summary>
        </member>
        <member name="M:TestCPUUsage.UpdateCPUUsage">
            <summary>
            Runs in Thread
            </summary>
        </member>
        <member name="M:SerializedMaterialProperties.SerializedMaterialProperty.CopyFrom(SerializedMaterialProperties.SerializedMaterialProperty)">
            <summary>
            Copy all data from an other SerializedMaterialProperty to the current SerializedMaterialProperty
            </summary>
            <param name="other">The other SerializedMaterialProperty you want to copy the data</param>
            <returns>true if the data needed changes</returns>
        </member>
        <member name="P:SerializedMaterialProperties.Mat">
            <summary>
            Get the raw material
            </summary>
        </member>
        <member name="M:SerializedMaterialProperties.GetInstancedMat(System.Single)">
            <summary>
            Get the Instanced modified Material
            </summary>
        </member>
        <member name="M:SerializedMaterialProperties.CopyFrom(SerializedMaterialProperties)">
            <summary>
            Copy all data from an other SerializedMaterialProperties to the current SerializedMaterialProperties
            </summary>
            <param name="other">The other SerializedMaterialProperties you want to copy the data</param>
            <returns>true if the data needed changes</returns>
        </member>
        <member name="T:OVRExtensionsMisc">
            <summary>
            Miscellaneous extension methods that any script can use.
            </summary>
        </member>
    </members>
</doc>
