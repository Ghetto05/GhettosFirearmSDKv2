<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnityEngine.UI</name>
    </assembly>
    <members>
        <member name="T:UnityEngine.UI.ContentSizeFitter.FitMode">
            <summary>
            The size fit modes avaliable to use.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.ContentSizeFitter.FitMode.Unconstrained">
            <summary>
            Don't perform any resizing.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.ContentSizeFitter.FitMode.MinSize">
            <summary>
            Resize to the minimum size of the content.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.ContentSizeFitter.FitMode.PreferredSize">
            <summary>
            Resize to the preferred size of the content.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.ContentSizeFitter.horizontalFit">
            <summary>
            The fit mode to use to determine the width.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.ContentSizeFitter.verticalFit">
            <summary>
            The fit mode to use to determine the height.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.ContentSizeFitter.SetLayoutHorizontal">
            <summary>
            Calculate and apply the horizontal component of the size to the RectTransform
            </summary>
        </member>
        <member name="M:UnityEngine.UI.ContentSizeFitter.SetLayoutVertical">
            <summary>
            Calculate and apply the vertical component of the size to the RectTransform
            </summary>
        </member>
        <member name="T:UnityEngine.UI.RawImage">
            <summary>
            Displays a Texture2D for the UI System.
            </summary>
            <remarks>
            If you don't have or don't wish to create an atlas, you can simply use this script to draw a texture.
            Keep in mind though that this will create an extra draw call with each RawImage present, so it's
            best to use it only for backgrounds or temporary visible graphics.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.RawImage.mainTexture">
            <summary>
            Returns the texture used to draw this Graphic.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.RawImage.texture">
             <summary>
             The RawImage's texture to be used.
             </summary>
             <remarks>
             Use this to alter or return the Texture the RawImage displays. The Raw Image can display any Texture whereas an Image component can only show a Sprite Texture.
             Note : Keep in mind that using a RawImage creates an extra draw call with each RawImage present, so it's best to use it only for backgrounds or temporary visible graphics.Note: Keep in mind that using a RawImage creates an extra draw call with each RawImage present, so it's best to use it only for backgrounds or temporary visible graphics.
             </remarks>
             <example>
             <code>
             <![CDATA[
             //Create a new RawImage by going to Create>UI>Raw Image in the hierarchy.
             //Attach this script to the RawImage GameObject.
            
             using UnityEngine;
             using UnityEngine.UI;
            
             public class RawImageTexture : MonoBehaviour
             {
                 RawImage m_RawImage;
                 //Select a Texture in the Inspector to change to
                 public Texture m_Texture;
            
                 void Start()
                 {
                     //Fetch the RawImage component from the GameObject
                     m_RawImage = GetComponent<RawImage>();
                     //Change the Texture to be the one you define in the Inspector
                     m_RawImage.texture = m_Texture;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.RawImage.uvRect">
            <summary>
            UV rectangle used by the texture.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.RawImage.SetNativeSize">
            <summary>
            Adjust the scale of the Graphic to make it pixel-perfect.
            </summary>
            <remarks>
            This means setting the RawImage's RectTransform.sizeDelta  to be equal to the Texture dimensions.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.Mask.showMaskGraphic">
            <summary>
            Show the graphic that is associated with the Mask render area.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Mask.graphic">
            <summary>
            The graphic associated with the Mask.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Mask.GetModifiedMaterial(UnityEngine.Material)">
            Stencil calculation time!
        </member>
        <member name="T:UnityEngine.UI.Image">
            <summary>
            Image is a textured element in the UI hierarchy.
            </summary>
        </member>
        <member name="T:UnityEngine.UI.Image.Type">
            <summary>
            Image fill type controls how to display the image.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Image.Type.Simple">
            <summary>
            Displays the full Image
            </summary>
            <remarks>
            This setting shows the entire image stretched across the Image's RectTransform
            </remarks>
        </member>
        <member name="F:UnityEngine.UI.Image.Type.Sliced">
             <summary>
             Displays the Image as a 9-sliced graphic.
             </summary>
             <remarks>
             A 9-sliced image displays a central area stretched across the image surrounded by a border comprising of 4 corners and 4 stretched edges.
            
             This has the effect of creating a resizable skinned rectangular element suitable for dialog boxes, windows, and general UI elements.
            
             Note: For this method to work properly the Sprite assigned to Image.sprite needs to have Sprite.border defined.
             </remarks>
        </member>
        <member name="F:UnityEngine.UI.Image.Type.Tiled">
             <summary>
             Displays a sliced Sprite with its resizable sections tiled instead of stretched.
             </summary>
             <remarks>
             A Tiled image behaves similarly to a UI.Image.Type.Sliced|Sliced image, except that the resizable sections of the image are repeated instead of being stretched. This can be useful for detailed UI graphics that do not look good when stretched.
            
             It uses the Sprite.border value to determine how each part (border and center) should be tiled.
            
             The Image sections will repeat the corresponding section in the Sprite until the whole section is filled. The corner sections will be unaffected and will draw in the same way as a Sliced Image. The edges will repeat along their lengths. The center section will repeat across the whole central part of the Image.
            
             The Image section will repeat the corresponding section in the Sprite until the whole section is filled.
            
             Be aware that if you are tiling a Sprite with borders or a packed sprite, a mesh will be generated to create the tiles. The size of the mesh will be limited to 16250 quads; if your tiling would require more tiles, the size of the tiles will be enlarged to ensure that the number of generated quads stays below this limit.
            
             For optimum efficiency, use a Sprite with no borders and with no packing, and make sure the Sprite.texture wrap mode is set to TextureWrapMode.Repeat.These settings will prevent the generation of additional geometry.If this is not possible, limit the number of tiles in your Image.
             </remarks>
        </member>
        <member name="F:UnityEngine.UI.Image.Type.Filled">
             <summary>
             Displays only a portion of the Image.
             </summary>
             <remarks>
             A Filled Image will display a section of the Sprite, with the rest of the RectTransform left transparent. The Image.fillAmount determines how much of the Image to show, and Image.fillMethod controls the shape in which the Image will be cut.
            
             This can be used for example to display circular or linear status information such as timers, health bars, and loading bars.
             </remarks>
        </member>
        <member name="T:UnityEngine.UI.Image.FillMethod">
            <summary>
            The possible fill method types for a Filled Image.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Image.FillMethod.Horizontal">
            <summary>
            The Image will be filled Horizontally.
            </summary>
            <remarks>
            The Image will be Cropped at either left or right size depending on Image.fillOriging at the Image.fillAmount
            </remarks>
        </member>
        <member name="F:UnityEngine.UI.Image.FillMethod.Vertical">
            <summary>
            The Image will be filled Vertically.
            </summary>
            <remarks>
            The Image will be Cropped at either top or Bottom size depending on Image.fillOrigin at the Image.fillAmount
            </remarks>
        </member>
        <member name="F:UnityEngine.UI.Image.FillMethod.Radial90">
            <summary>
            The Image will be filled Radially with the radial center in one of the corners.
            </summary>
            <remarks>
            For this method the Image.fillAmount represents an angle between 0 and 90 degrees. The Image will be cut by a line passing at the Image.fillOrigin at the specified angle.
            </remarks>
        </member>
        <member name="F:UnityEngine.UI.Image.FillMethod.Radial180">
            <summary>
            The Image will be filled Radially with the radial center in one of the edges.
            </summary>
            <remarks>
            For this method the Image.fillAmount represents an angle between 0 and 180 degrees. The Image will be cut by a line passing at the Image.fillOrigin at the specified angle.
            </remarks>
        </member>
        <member name="F:UnityEngine.UI.Image.FillMethod.Radial360">
            <summary>
            The Image will be filled Radially with the radial center at the center.
            </summary>
            <remarks>
            or this method the Image.fillAmount represents an angle between 0 and 360 degrees. The Arc defined by the center of the Image, the Image.fillOrigin and the angle will be cut from the Image.
            </remarks>
        </member>
        <member name="T:UnityEngine.UI.Image.OriginHorizontal">
            <summary>
            Origin for the Image.FillMethod.Horizontal.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Image.OriginHorizontal.Left">
            <summary>
            >Origin at the Left side.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Image.OriginHorizontal.Right">
            <summary>
            >Origin at the Right side.
            </summary>
        </member>
        <member name="T:UnityEngine.UI.Image.OriginVertical">
            <summary>
            Origin for the Image.FillMethod.Vertical.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Image.OriginVertical.Bottom">
            <summary>
            >Origin at the Bottom Edge.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Image.OriginVertical.Top">
            <summary>
            >Origin at the Top Edge.
            </summary>
        </member>
        <member name="T:UnityEngine.UI.Image.Origin90">
            <summary>
            Origin for the Image.FillMethod.Radial90.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Image.Origin90.BottomLeft">
            <summary>
            Radial starting at the Bottom Left corner.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Image.Origin90.TopLeft">
            <summary>
            Radial starting at the Top Left corner.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Image.Origin90.TopRight">
            <summary>
            Radial starting at the Top Right corner.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Image.Origin90.BottomRight">
            <summary>
            Radial starting at the Bottom Right corner.
            </summary>
        </member>
        <member name="T:UnityEngine.UI.Image.Origin180">
            <summary>
            Origin for the Image.FillMethod.Radial180.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Image.Origin180.Bottom">
            <summary>
            Center of the radial at the center of the Bottom edge.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Image.Origin180.Left">
            <summary>
            Center of the radial at the center of the Left edge.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Image.Origin180.Top">
            <summary>
            Center of the radial at the center of the Top edge.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Image.Origin180.Right">
            <summary>
            Center of the radial at the center of the Right edge.
            </summary>
        </member>
        <member name="T:UnityEngine.UI.Image.Origin360">
            <summary>
            One of the points of the Arc for the Image.FillMethod.Radial360.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Image.Origin360.Bottom">
            <summary>
            Arc starting at the center of the Bottom edge.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Image.Origin360.Right">
            <summary>
            Arc starting at the center of the Right edge.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Image.Origin360.Top">
            <summary>
            Arc starting at the center of the Top edge.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Image.Origin360.Left">
            <summary>
            Arc starting at the center of the Left edge.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Image.sprite">
             <summary>
             The sprite that is used to render this image.
             </summary>
             <remarks>
             This returns the source Sprite of an Image. This Sprite can also be viewed and changed in the Inspector as part of an Image component. This can also be used to change the Sprite using a script.
             </remarks>
             <example>
             <code>
             <![CDATA[
             //Attach this script to an Image GameObject and set its Source Image to the Sprite you would like.
             //Press the space key to change the Sprite. Remember to assign a second Sprite in this script's section of the Inspector.
            
             using UnityEngine;
             using UnityEngine.UI;
            
             public class Example : MonoBehaviour
             {
                 Image m_Image;
                 //Set this in the Inspector
                 public Sprite m_Sprite;
            
                 void Start()
                 {
                     //Fetch the Image from the GameObject
                     m_Image = GetComponent<Image>();
                 }
            
                 void Update()
                 {
                     //Press space to change the Sprite of the Image
                     if (Input.GetKey(KeyCode.Space))
                     {
                         m_Image.sprite = m_Sprite;
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.Image.DisableSpriteOptimizations">
            <summary>
            Disable all automatic sprite optimizations.
            </summary>
            <remarks>
            When a new Sprite is assigned update optimizations are automatically applied.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.Image.overrideSprite">
             <summary>
             Set an override sprite to be used for rendering.
             </summary>
             <remarks>
             The UI.Image-overrideSprite|overrideSprite variable allows a sprite to have the
             sprite changed.This change happens immediately.When the changed
             sprite is no longer needed the sprite can be reverted back to the
             original version.This happens when the overrideSprite
             is set to /null/.
             </remarks>
             <example>
             Note: The script example below has two buttons.  The button textures are loaded from the
             /Resources/ folder.  (They are not used in the shown example).  Two sprites are added to
             the example code.  /Example1/ and /Example2/ are functions called by the button OnClick
             functions.  Example1 calls overrideSprite and Example2 sets overrideSprite to null.
             <code>
             <![CDATA[
             using System.Collections;
             using System.Collections.Generic;
             using UnityEngine;
             using UnityEngine.UI;
            
             public class ExampleClass : MonoBehaviour
             {
                 private Sprite sprite1;
                 private Sprite sprite2;
                 private Image i;
            
                 public void Start()
                 {
                     i = GetComponent<Image>();
                     sprite1 = Resources.Load<Sprite>("texture1");
                     sprite2 = Resources.Load<Sprite>("texture2");
            
                     i.sprite = sprite1;
                 }
            
                 // Called by a Button OnClick() with ExampleClass.Example1
                 // Uses overrideSprite to make this change temporary
                 public void Example1()
                 {
                     i.overrideSprite = sprite2;
                 }
            
                 // Called by a Button OnClick() with ExampleClass.Example2
                 // Removes the overrideSprite which causes the original sprite to be used again.
                 public void Example2()
                 {
                     i.overrideSprite = null;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="F:UnityEngine.UI.Image.m_Type">
            How the Image is drawn.
        </member>
        <member name="P:UnityEngine.UI.Image.type">
            <summary>
            How to display the image.
            </summary>
            <remarks>
            Unity can interpret an Image in various different ways depending on the intended purpose. This can be used to display:
            - Whole images stretched to fit the RectTransform of the Image.
            - A 9-sliced image useful for various decorated UI boxes and other rectangular elements.
            - A tiled image with sections of the sprite repeated.
            - As a partial image, useful for wipes, fades, timers, status bars etc.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.Image.preserveAspect">
            <summary>
            Whether this image should preserve its Sprite aspect ratio.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Image.fillCenter">
             <summary>
             Whether or not to render the center of a Tiled or Sliced image.
             </summary>
             <remarks>
             This will only have any effect if the Image.sprite has borders.
             </remarks>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;
            
             public class FillCenterScript : MonoBehaviour
             {
                 public Image xmasCalenderDoor;
            
                 // removes the center of the image to reveal the image behind it
                 void OpenCalendarDoor()
                 {
                     xmasCalenderDoor.fillCenter = false;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="F:UnityEngine.UI.Image.m_FillMethod">
            Filling method for filled sprites.
        </member>
        <member name="F:UnityEngine.UI.Image.m_FillAmount">
            Amount of the Image shown. 0-1 range with 0 being nothing shown, and 1 being the full Image.
        </member>
        <member name="P:UnityEngine.UI.Image.fillAmount">
             <summary>
             Amount of the Image shown when the Image.type is set to Image.Type.Filled.
             </summary>
             <remarks>
             0-1 range with 0 being nothing shown, and 1 being the full Image.
             </remarks>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Cooldown : MonoBehaviour
             {
                 public Image cooldown;
                 public bool coolingDown;
                 public float waitTime = 30.0f;
            
                 // Update is called once per frame
                 void Update()
                 {
                     if (coolingDown == true)
                     {
                         //Reduce fill amount over 30 seconds
                         cooldown.fillAmount -= 1.0f / waitTime * Time.deltaTime;
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="F:UnityEngine.UI.Image.m_FillClockwise">
            Whether the Image should be filled clockwise (true) or counter-clockwise (false).
        </member>
        <member name="P:UnityEngine.UI.Image.fillClockwise">
             <summary>
             Whether the Image should be filled clockwise (true) or counter-clockwise (false).
             </summary>
             <remarks>
             This will only have any effect if the Image.type is set to Image.Type.Filled and Image.fillMethod is set to any of the Radial methods.
             </remarks>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class FillClockwiseScript : MonoBehaviour
             {
                 public Image healthCircle;
            
                 // This method sets the direction of the health circle.
                 // Clockwise for the Player, Counter Clockwise for the opponent.
                 void SetHealthDirection(GameObject target)
                 {
                     if (target.tag == "Player")
                     {
                         healthCircle.fillClockwise = true;
                     }
                     else if (target.tag == "Opponent")
                     {
                         healthCircle.fillClockwise = false;
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="F:UnityEngine.UI.Image.m_FillOrigin">
            Controls the origin point of the Fill process. Value means different things with each fill method.
        </member>
        <member name="P:UnityEngine.UI.Image.fillOrigin">
             <summary>
             Controls the origin point of the Fill process. Value means different things with each fill method.
             </summary>
             <remarks>
             You should cast to the appropriate origin type: Image.OriginHorizontal, Image.OriginVertical, Image.Origin90, Image.Origin180 or Image.Origin360 depending on the Image.Fillmethod.
             Note: This will only have any effect if the Image.type is set to Image.Type.Filled.
             </remarks>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using UnityEngine.UI;
             using System.Collections;
            
             [RequireComponent(typeof(Image))]
             public class ImageOriginCycle : MonoBehaviour
             {
                 void OnEnable()
                 {
                     Image image = GetComponent<Image>();
                     string fillOriginName = "";
            
                     switch ((Image.FillMethod)image.fillMethod)
                     {
                         case Image.FillMethod.Horizontal:
                             fillOriginName = ((Image.OriginHorizontal)image.fillOrigin).ToString();
                             break;
                         case Image.FillMethod.Vertical:
                             fillOriginName = ((Image.OriginVertical)image.fillOrigin).ToString();
                             break;
                         case Image.FillMethod.Radial90:
            
                             fillOriginName = ((Image.Origin90)image.fillOrigin).ToString();
                             break;
                         case Image.FillMethod.Radial180:
            
                             fillOriginName = ((Image.Origin180)image.fillOrigin).ToString();
                             break;
                         case Image.FillMethod.Radial360:
                             fillOriginName = ((Image.Origin360)image.fillOrigin).ToString();
                             break;
                     }
                     Debug.Log(string.Format("{0} is using {1} fill method with the origin on {2}", name, image.fillMethod, fillOriginName));
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Image.alphaHitTestMinimumThreshold">
             <summary>
             The alpha threshold specifies the minimum alpha a pixel must have for the event to considered a "hit" on the Image.
             </summary>
             <remarks>
             Alpha values less than the threshold will cause raycast events to pass through the Image. An value of 1 would cause only fully opaque pixels to register raycast events on the Image. The alpha tested is retrieved from the image sprite only, while the alpha of the Image [[UI.Graphic.color]] is disregarded.
            
             alphaHitTestMinimumThreshold defaults to 0; all raycast events inside the Image rectangle are considered a hit. In order for greater than 0 to values to work, the sprite used by the Image must have readable pixels. This can be achieved by enabling Read/Write enabled in the advanced Texture Import Settings for the sprite and disabling atlassing for the sprite.
             </remarks>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public Image theButton;
            
                 // Use this for initialization
                 void Start()
                 {
                     theButton.alphaHitTestMinimumThreshold = 0.5f;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="F:UnityEngine.UI.Image.m_UseSpriteMesh">
            Controls whether or not to use the generated mesh from the sprite importer.
        </member>
        <member name="P:UnityEngine.UI.Image.useSpriteMesh">
            <summary>
            Allows you to specify whether the UI Image should be displayed using the mesh generated by the TextureImporter, or by a simple quad mesh.
            </summary>
            <remarks>
            When this property is set to false, the UI Image uses a simple quad. When set to true, the UI Image uses the sprite mesh generated by the [[TextureImporter]]. You should set this to true if you want to use a tightly fitted sprite mesh based on the alpha values in your image.
            Note: If the texture importer's SpriteMeshType property is set to SpriteMeshType.FullRect, it will only generate a quad, and not a tightly fitted sprite mesh, which means this UI image will be drawn using a quad regardless of the value of this property. Therefore, when enabling this property to use a tightly fitted sprite mesh, you must also ensure the texture importer's SpriteMeshType property is set to Tight.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.Image.defaultETC1GraphicMaterial">
            <summary>
            Cache of the default Canvas Ericsson Texture Compression 1 (ETC1) and alpha Material.
            </summary>
            <remarks>
            Stores the ETC1 supported Canvas Material that is returned from GetETC1SupportedCanvasMaterial().
            Note: Always specify the UI/DefaultETC1 Shader in the Always Included Shader list, to use the ETC1 and alpha Material.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.Image.mainTexture">
            <summary>
            Image's texture comes from the UnityEngine.Image.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Image.hasBorder">
            <summary>
            Whether the Sprite of the image has a border to work with.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Image.pixelsPerUnitMultiplier">
            <summary>
            Pixel per unit modifier to change how sliced sprites are generated.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Image.material">
            <summary>
            The specified Material used by this Image. The default Material is used instead if one wasn't specified.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Image.OnBeforeSerialize">
            <summary>
            See ISerializationCallbackReceiver.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Image.OnAfterDeserialize">
            <summary>
            See ISerializationCallbackReceiver.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Image.GetDrawingDimensions(System.Boolean)">
            Image's dimensions used for drawing. X = left, Y = bottom, Z = right, W = top.
        </member>
        <member name="M:UnityEngine.UI.Image.SetNativeSize">
            <summary>
            Adjusts the image size to make it pixel-perfect.
            </summary>
            <remarks>
            This means setting the Images RectTransform.sizeDelta to be equal to the Sprite dimensions.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.Image.OnPopulateMesh(UnityEngine.UI.VertexHelper)">
            <summary>
            Update the UI renderer mesh.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Image.UpdateMaterial">
            <summary>
            Update the renderer's material.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Image.GenerateSimpleSprite(UnityEngine.UI.VertexHelper,System.Boolean)">
            <summary>
            Generate vertices for a simple Image.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Image.GenerateSlicedSprite(UnityEngine.UI.VertexHelper)">
            <summary>
            Generate vertices for a 9-sliced Image.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Image.GenerateTiledSprite(UnityEngine.UI.VertexHelper)">
            <summary>
            Generate vertices for a tiled Image.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Image.GenerateFilledSprite(UnityEngine.UI.VertexHelper,System.Boolean)">
            <summary>
            Generate vertices for a filled Image.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Image.RadialCut(UnityEngine.Vector3[],UnityEngine.Vector3[],System.Single,System.Boolean,System.Int32)">
            <summary>
            Adjust the specified quad, making it be radially filled instead.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Image.RadialCut(UnityEngine.Vector3[],System.Single,System.Single,System.Boolean,System.Int32)">
            <summary>
            Adjust the specified quad, making it be radially filled instead.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Image.CalculateLayoutInputHorizontal">
            <summary>
            See ILayoutElement.CalculateLayoutInputHorizontal.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Image.CalculateLayoutInputVertical">
            <summary>
            See ILayoutElement.CalculateLayoutInputVertical.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Image.minWidth">
            <summary>
            See ILayoutElement.minWidth.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Image.preferredWidth">
            <summary>
            If there is a sprite being rendered returns the size of that sprite.
            In the case of a slided or tiled sprite will return the calculated minimum size possible
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Image.flexibleWidth">
            <summary>
            See ILayoutElement.flexibleWidth.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Image.minHeight">
            <summary>
            See ILayoutElement.minHeight.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Image.preferredHeight">
            <summary>
            If there is a sprite being rendered returns the size of that sprite.
            In the case of a slided or tiled sprite will return the calculated minimum size possible
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Image.flexibleHeight">
            <summary>
            See ILayoutElement.flexibleHeight.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Image.layoutPriority">
            <summary>
            See ILayoutElement.layoutPriority.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Image.IsRaycastLocationValid(UnityEngine.Vector2,UnityEngine.Camera)">
            <summary>
            Calculate if the ray location for this image is a valid hit location. Takes into account a Alpha test threshold.
            </summary>
            <param name="screenPoint">The screen point to check against</param>
            <param name="eventCamera">The camera in which to use to calculate the coordinating position</param>
            <returns>If the location is a valid hit or not.</returns>
            <remarks> Also see See:ICanvasRaycastFilter.</remarks>
        </member>
        <member name="T:UnityEngine.UI.Scrollbar.Direction">
            <summary>
            Setting that indicates one of four directions the scrollbar will travel.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Scrollbar.Direction.LeftToRight">
            <summary>
            Starting position is the Left.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Scrollbar.Direction.RightToLeft">
            <summary>
            Starting position is the Right
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Scrollbar.Direction.BottomToTop">
            <summary>
            Starting position is the Bottom.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Scrollbar.Direction.TopToBottom">
            <summary>
            Starting position is the Top.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Scrollbar.handleRect">
            <summary>
            The RectTransform to use for the handle.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Scrollbar.direction">
            <summary>
            The direction of the scrollbar from minimum to maximum value.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Scrollbar.value">
            <summary>
            The current value of the scrollbar, between 0 and 1.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Scrollbar.SetValueWithoutNotify(System.Single)">
            <summary>
            Set the value of the scrollbar without invoking onValueChanged callback.
            </summary>
            <param name="input">The new value for the scrollbar.</param>
        </member>
        <member name="P:UnityEngine.UI.Scrollbar.size">
            <summary>
            The size of the scrollbar handle where 1 means it fills the entire scrollbar.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Scrollbar.numberOfSteps">
            <summary>
            The number of steps to use for the value. A value of 0 disables use of steps.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Scrollbar.onValueChanged">
            <summary>
            Handling for when the scrollbar value is changed.
            </summary>
            <remarks>
            Allow for delegate-based subscriptions for faster events than 'eventReceiver', and allowing for multiple receivers.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.Scrollbar.LayoutComplete">
            <summary>
            See ICanvasElement.LayoutComplete.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Scrollbar.GraphicUpdateComplete">
            <summary>
            See ICanvasElement.GraphicUpdateComplete.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Scrollbar.Update">
            <summary>
            Update the rect based on the delayed update visuals.
            Got around issue of calling sendMessage from onValidate.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Scrollbar.OnBeginDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Handling for when the scrollbar value is begin being dragged.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Scrollbar.OnDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Handling for when the scrollbar value is dragged.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Scrollbar.OnPointerDown(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Event triggered when pointer is pressed down on the scrollbar.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Scrollbar.ClickRepeat(UnityEngine.Vector2,UnityEngine.Camera)">
            <summary>
            Coroutine function for handling continual press during Scrollbar.OnPointerDown.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Scrollbar.OnPointerUp(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Event triggered when pointer is released after pressing on the scrollbar.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Scrollbar.OnMove(UnityEngine.EventSystems.AxisEventData)">
            <summary>
            Handling for movement events.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Scrollbar.FindSelectableOnLeft">
            <summary>
            Prevents selection if we we move on the Horizontal axis. See Selectable.FindSelectableOnLeft.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Scrollbar.FindSelectableOnRight">
            <summary>
            Prevents selection if we we move on the Horizontal axis.  See Selectable.FindSelectableOnRight.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Scrollbar.FindSelectableOnUp">
            <summary>
            Prevents selection if we we move on the Vertical axis. See Selectable.FindSelectableOnUp.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Scrollbar.FindSelectableOnDown">
            <summary>
            Prevents selection if we we move on the Vertical axis. See Selectable.FindSelectableOnDown.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Scrollbar.OnInitializePotentialDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            See: IInitializePotentialDragHandler.OnInitializePotentialDrag
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Scrollbar.SetDirection(UnityEngine.UI.Scrollbar.Direction,System.Boolean)">
            <summary>
            Set the direction of the scrollbar, optionally setting the layout as well.
            </summary>
            <param name="direction">The direction of the scrollbar.</param>
            <param name="includeRectLayouts">Should the layout be flipped together with the direction?</param>
        </member>
        <member name="M:UnityEngine.UI.HorizontalLayoutGroup.CalculateLayoutInputHorizontal">
            <summary>
            Called by the layout system. Also see ILayoutElement
            </summary>
        </member>
        <member name="M:UnityEngine.UI.HorizontalLayoutGroup.CalculateLayoutInputVertical">
            <summary>
            Called by the layout system. Also see ILayoutElement
            </summary>
        </member>
        <member name="M:UnityEngine.UI.HorizontalLayoutGroup.SetLayoutHorizontal">
            <summary>
            Called by the layout system. Also see ILayoutElement
            </summary>
        </member>
        <member name="M:UnityEngine.UI.HorizontalLayoutGroup.SetLayoutVertical">
            <summary>
            Called by the layout system. Also see ILayoutElement
            </summary>
        </member>
        <member name="T:UnityEngine.UI.CanvasScaler.ScaleMode">
            <summary>
            Determines how UI elements in the Canvas are scaled.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.CanvasScaler.ScaleMode.ConstantPixelSize">
            <summary>
            Using the Constant Pixel Size mode, positions and sizes of UI elements are specified in pixels on the screen.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.CanvasScaler.ScaleMode.ScaleWithScreenSize">
            <summary>
            Using the Scale With Screen Size mode, positions and sizes can be specified according to the pixels of a specified reference resolution.
            If the current screen resolution is larger than the reference resolution, the Canvas will keep having only the resolution of the reference resolution, but will scale up in order to fit the screen. If the current screen resolution is smaller than the reference resolution, the Canvas will similarly be scaled down to fit.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.CanvasScaler.ScaleMode.ConstantPhysicalSize">
            <summary>
            Using the Constant Physical Size mode, positions and sizes of UI elements are specified in physical units, such as millimeters, points, or picas.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.CanvasScaler.uiScaleMode">
            <summary>
            Determines how UI elements in the Canvas are scaled.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.CanvasScaler.referencePixelsPerUnit">
            <summary>
            If a sprite has this 'Pixels Per Unit' setting, then one pixel in the sprite will cover one unit in the UI.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.CanvasScaler.scaleFactor">
            <summary>
            Scales all UI elements in the Canvas by this factor.
            </summary>
            <summary>
            Scales all UI elements in the Canvas by this factor.
            </summary>
        </member>
        <member name="T:UnityEngine.UI.CanvasScaler.ScreenMatchMode">
            Scale the canvas area with the width as reference, the height as reference, or something in between.
            <summary>
            Scale the canvas area with the width as reference, the height as reference, or something in between.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.CanvasScaler.ScreenMatchMode.MatchWidthOrHeight">
            <summary>
            Scale the canvas area with the width as reference, the height as reference, or something in between.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.CanvasScaler.ScreenMatchMode.Expand">
            <summary>
            Expand the canvas area either horizontally or vertically, so the size of the canvas will never be smaller than the reference.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.CanvasScaler.ScreenMatchMode.Shrink">
            <summary>
            Crop the canvas area either horizontally or vertically, so the size of the canvas will never be larger than the reference.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.CanvasScaler.referenceResolution">
            <summary>
            The resolution the UI layout is designed for.
            </summary>
            <remarks>
            If the screen resolution is larger, the UI will be scaled up, and if it's smaller, the UI will be scaled down. This is done in accordance with the Screen Match Mode.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.CanvasScaler.screenMatchMode">
            <summary>
            A mode used to scale the canvas area if the aspect ratio of the current resolution doesn't fit the reference resolution.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.CanvasScaler.matchWidthOrHeight">
             <summary>
             Setting to scale the Canvas to match the width or height of the reference resolution, or a combination.
             </summary>
             <remarks>
             If the setting is set to 0, the Canvas is scaled according to the difference between the current screen resolution width and the reference resolution width. If the setting is set to 1, the Canvas is scaled according to the difference between the current screen resolution height and the reference resolution height.
            
             For values in between 0 and 1, the scaling is based on a combination of the relative width and height.
            
             Consider an example where the reference resolution of 640x480, and the current screen resolution is a landscape mode of 480x640.
            
             If the scaleWidthOrHeight setting is set to 0, the Canvas is scaled by 0.75 because the current resolution width of 480 is 0.75 times the reference resolution width of 640. The Canvas resolution gets a resolution of 640x853.33. This resolution has the same width as the reference resolution width, but has the aspect ratio of the current screen resolution. Note that the Canvas resolution of 640x853.33 is the current screen resolution divided by the scale factor of 0.75.
            
             If the scaleWidthOrHeight setting is set to 1, the Canvas is scaled by 1.33 because the current resolution height of 640 is 1.33 times the reference resolution height of 480. The Canvas resolution gets a resolution of 360x480. This resolution has the same height as the reference resolution width, but has the aspect ratio of the current screen resolution. Note that the Canvas resolution of 360x480 is the current screen resolution divided by the scale factor of 1.33.
            
             If the scaleWidthOrHeight setting is set to 0.5, we find the horizontal scaling needed (0.75) and the vertical scaling needed (1.33) and find the average. However, we do the average in logarithmic space. A regular average of 0.75 and 1.33 would produce a result of 1.04. However, since multiplying by 1.33 is the same as diving by 0.75, the two scale factor really corresponds to multiplying by 0.75 versus dividing by 0.75, and the average of those two things should even out and produce a neutral result. The average in logarithmic space of 0.75 and 1.33 is exactly 1.0, which is what we want. The Canvas resolution hence ends up being 480x640 which is the current resolution divided by the scale factor of 1.0.
            
             The logic works the same for all values. The average between the horizontal and vertical scale factor is a weighted average based on the matchWidthOrHeight value.
             </remarks>
        </member>
        <member name="T:UnityEngine.UI.CanvasScaler.Unit">
            <summary>
            The possible physical unit types
            </summary>
        </member>
        <member name="F:UnityEngine.UI.CanvasScaler.Unit.Centimeters">
            <summary>
            Use centimeters.
            A centimeter is 1/100 of a meter
            </summary>
        </member>
        <member name="F:UnityEngine.UI.CanvasScaler.Unit.Millimeters">
            <summary>
            Use millimeters.
            A millimeter is 1/10 of a centimeter, and 1/1000 of a meter.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.CanvasScaler.Unit.Inches">
            <summary>
            Use inches.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.CanvasScaler.Unit.Points">
            <summary>
            Use points.
            One point is 1/12 of a pica, and 1/72 of an inch.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.CanvasScaler.Unit.Picas">
            <summary>
            Use picas.
            One pica is 1/6 of an inch.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.CanvasScaler.physicalUnit">
            <summary>
            The physical unit to specify positions and sizes in.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.CanvasScaler.fallbackScreenDPI">
            <summary>
            The DPI to assume if the screen DPI is not known.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.CanvasScaler.defaultSpriteDPI">
            <summary>
            The pixels per inch to use for sprites that have a 'Pixels Per Unit' setting that matches the 'Reference Pixels Per Unit' setting.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.CanvasScaler.dynamicPixelsPerUnit">
            <summary>
            The amount of pixels per unit to use for dynamically created bitmaps in the UI, such as Text.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.CanvasScaler.Handle">
            <summary>
            Method that handles calculations of canvas scaling.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.CanvasScaler.HandleWorldCanvas">
            <summary>
            Handles canvas scaling for world canvas.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.CanvasScaler.HandleConstantPixelSize">
            <summary>
            Handles canvas scaling for a constant pixel size.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.CanvasScaler.HandleScaleWithScreenSize">
            <summary>
            Handles canvas scaling that scales with the screen size.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.CanvasScaler.HandleConstantPhysicalSize">
            <summary>
            Handles canvas scaling for a constant physical size.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.CanvasScaler.SetScaleFactor(System.Single)">
            <summary>
            Sets the scale factor on the canvas.
            </summary>
            <param name="scaleFactor">The scale factor to use.</param>
        </member>
        <member name="M:UnityEngine.UI.CanvasScaler.SetReferencePixelsPerUnit(System.Single)">
            <summary>
            Sets the referencePixelsPerUnit on the Canvas.
            </summary>
            <param name="referencePixelsPerUnit">The new reference pixels per Unity value</param>
        </member>
        <member name="P:UnityEngine.UI.Text.cachedTextGenerator">
            <summary>
            The cached TextGenerator used when generating visible Text.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Text.cachedTextGeneratorForLayout">
            <summary>
            The cached TextGenerator used when determine Layout
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Text.mainTexture">
            <summary>
            Text's texture comes from the font.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Text.FontTextureChanged">
            <summary>
            Called by the FontUpdateTracker when the texture associated with a font is modified.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Text.font">
             <summary>
             The Font used by the text.
             </summary>
             <remarks>
             This is the font used by the Text component. Use it to alter or return the font from the Text. There are many free fonts available online.
             </remarks>
             <example>
             <code>
             <![CDATA[
             //Create a new Text GameObject by going to Create>UI>Text in the Editor. Attach this script to the Text GameObject. Then, choose or click and drag your own font into the Font section in the Inspector window.
            
             using UnityEngine;
             using UnityEngine.UI;
            
             public class TextFontExample : MonoBehaviour
             {
                 Text m_Text;
                 //Attach your own Font in the Inspector
                 public Font m_Font;
            
                 void Start()
                 {
                     //Fetch the Text component from the GameObject
                     m_Text = GetComponent<Text>();
                 }
            
                 void Update()
                 {
                     if (Input.GetKey(KeyCode.Space))
                     {
                         //Change the Text Font to the Font attached in the Inspector
                         m_Text.font = m_Font;
                         //Change the Text to the message below
                         m_Text.text = "My Font Changed!";
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Text.text">
             <summary>
             Text that's being displayed by the Text.
             </summary>
             <remarks>
             This is the string value of a Text component. Use this to read or edit the message displayed in Text.
             </remarks>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using UnityEngine.UI;
            
             public class Example : MonoBehaviour
             {
                 public Text m_MyText;
            
                 void Start()
                 {
                     //Text sets your text to say this message
                     m_MyText.text = "This is my text";
                 }
            
                 void Update()
                 {
                     //Press the space key to change the Text message
                     if (Input.GetKey(KeyCode.Space))
                     {
                         m_MyText.text = "My text has now changed.";
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Text.supportRichText">
            <summary>
            Whether this Text will support rich text.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Text.resizeTextForBestFit">
            <summary>
            Should the text be allowed to auto resized.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Text.resizeTextMinSize">
            <summary>
            The minimum size the text is allowed to be.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Text.resizeTextMaxSize">
            <summary>
            The maximum size the text is allowed to be. 1 = infinitely large.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Text.alignment">
             <summary>
             The positioning of the text reliative to its [[RectTransform]].
             </summary>
             <remarks>
             This is the positioning of the Text relative to its RectTransform. You can alter this via script or in the Inspector of a Text component using the buttons in the Alignment section.
             </remarks>
             <example>
             <code>
             <![CDATA[
             //Create a Text GameObject by going to __Create__>__UI__>__Text__. Attach this script to the GameObject to see it working.
            
             using UnityEngine;
             using UnityEngine.UI;
            
             public class UITextAlignment : MonoBehaviour
             {
                 Text m_Text;
            
                 void Start()
                 {
                     //Fetch the Text Component
                     m_Text = GetComponent<Text>();
                     //Switch the Text alignment to the middle
                     m_Text.alignment = TextAnchor.MiddleCenter;
                 }
            
             //This is a legacy function used for an instant demonstration. See the <a href="https://unity3d.com/learn/tutorials/s/user-interface-ui">UI Tutorials pages </a> and [[wiki:UISystem|UI Section]] of the manual for more information on creating your own buttons etc.
                 void OnGUI()
                 {
                     //Press this Button to change the Text alignment to the lower right
                     if (GUI.Button(new Rect(0, 0, 100, 40), "Lower Right"))
                     {
                         m_Text.alignment = TextAnchor.LowerRight;
                     }
            
                     //Press this Button to change the Text alignment to the upper left
                     if (GUI.Button(new Rect(150, 0, 100, 40), "Upper Left"))
                     {
                         m_Text.alignment = TextAnchor.UpperLeft;
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Text.alignByGeometry">
            <summary>
            Use the extents of glyph geometry to perform horizontal alignment rather than glyph metrics.
            </summary>
            <remarks>
            This can result in better fitting left and right alignment, but may result in incorrect positioning when attempting to overlay multiple fonts (such as a specialized outline font) on top of each other.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.Text.fontSize">
             <summary>
             The size that the Font should render at. Unit of measure is Points.
             </summary>
             <remarks>
             This is the size of the Font of the Text. Use this to fetch or change the size of the Font. When changing the Font size, remember to take into account the RectTransform of the Text. Larger Font sizes or messages may not fit in certain rectangle sizes and do not show in the Scene.
             Note: Point size is not consistent from one font to another.
             </remarks>
             <example>
             <code>
             <![CDATA[
             //For this script to work, create a new Text GameObject by going to Create>U>Text. Attach the script to the Text GameObject. Make sure the GameObject has a RectTransform component.
            
             using UnityEngine;
             using UnityEngine.UI;
            
             public class Example : MonoBehaviour
             {
                 Text m_Text;
                 RectTransform m_RectTransform;
            
                 void Start()
                 {
                     //Fetch the Text and RectTransform components from the GameObject
                     m_Text = GetComponent<Text>();
                     m_RectTransform = GetComponent<RectTransform>();
                 }
            
                 void Update()
                 {
                     //Press the space key to change the Font size
                     if (Input.GetKey(KeyCode.Space))
                     {
                         changeFontSize();
                     }
                 }
            
                 void changeFontSize()
                 {
                     //Change the Font Size to 16
                     m_Text.fontSize = 30;
            
                     //Change the RectTransform size to allow larger fonts and sentences
                     m_RectTransform.sizeDelta = new Vector2(m_Text.fontSize * 10, 100);
            
                     //Change the m_Text text to the message below
                     m_Text.text = "I changed my Font size!";
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Text.horizontalOverflow">
            <summary>
            Horizontal overflow mode.
            </summary>
            <remarks>
            When set to HorizontalWrapMode.Overflow, text can exceed the horizontal boundaries of the Text graphic. When set to HorizontalWrapMode.Wrap, text will be word-wrapped to fit within the boundaries.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.Text.verticalOverflow">
            <summary>
            Vertical overflow mode.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Text.lineSpacing">
            <summary>
            Line spacing, specified as a factor of font line height. A value of 1 will produce normal line spacing.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Text.fontStyle">
            <summary>
            Font style used by the Text's text.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Text.pixelsPerUnit">
            <summary>
            Provides information about how fonts are scale to the screen.
            </summary>
            <remarks>
            For dynamic fonts, the value is equivalent to the scale factor of the canvas. For non-dynamic fonts, the value is calculated from the requested text size and the size from the font.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.Text.GetGenerationSettings(UnityEngine.Vector2)">
            <summary>
            Convenience function to populate the generation setting for the text.
            </summary>
            <param name="extents">The extents the text can draw in.</param>
            <returns>Generated settings.</returns>
        </member>
        <member name="M:UnityEngine.UI.Text.GetTextAnchorPivot(UnityEngine.TextAnchor)">
            <summary>
            Convenience function to determine the vector offset of the anchor.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.LayoutElement.ignoreLayout">
            <summary>
            Should this RectTransform be ignored by the layout system?
            </summary>
            <remarks>
            Setting this property to true will make a parent layout group component not consider this RectTransform part of the group. The RectTransform can then be manually positioned despite being a child GameObject of a layout group.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.LayoutElement.minWidth">
             <summary>
             The minimum width this layout element may be allocated.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public Transform MyContentPanel;
            
                 //Sets the flexible height on on all children in the content panel.
                 public void Start()
                 {
                     //Assign all the children of the content panel to an array.
                     LayoutElement[] myLayoutElements = MyContentPanel.GetComponentsInChildren<LayoutElement>();
            
                     //For each child in the array change its LayoutElement's minimum width size to 200.
                     foreach (LayoutElement element in myLayoutElements)
                     {
                         element.minWidth = 200f;
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.LayoutElement.minHeight">
             <summary>
             The minimum height this layout element may be allocated.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public Transform MyContentPanel;
            
                 //Sets the flexible height on on all children in the content panel.
                 public void Start()
                 {
                     //Assign all the children of the content panel to an array.
                     LayoutElement[] myLayoutElements = MyContentPanel.GetComponentsInChildren<LayoutElement>();
            
                     //For each child in the array change its LayoutElement's minimum height size to 64.
                     foreach (LayoutElement element in myLayoutElements)
                     {
                         element.minHeight = 64f;
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.LayoutElement.preferredWidth">
             <summary>
             The preferred width this layout element should be allocated if there is sufficient space. The preferredWidth can be set to -1 to remove the size.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public Transform MyContentPanel;
            
                 //Sets the flexible height on on all children in the content panel.
                 public void Start()
                 {
                     //Assign all the children of the content panel to an array.
                     LayoutElement[] myLayoutElements = MyContentPanel.GetComponentsInChildren<LayoutElement>();
            
                     //For each child in the array change its LayoutElement's preferred width size to 250.
                     foreach (LayoutElement element in myLayoutElements)
                     {
                         element.preferredWidth = 250f;
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.LayoutElement.preferredHeight">
             <summary>
             The preferred height this layout element should be allocated if there is sufficient space.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public Transform MyContentPanel;
            
                 //Sets the flexible height on on all children in the content panel.
                 public void Start()
                 {
                     //Assign all the children of the content panel to an array.
                     LayoutElement[] myLayoutElements = MyContentPanel.GetComponentsInChildren<LayoutElement>();
            
                     //For each child in the array change its LayoutElement's preferred height size to 100.
                     foreach (LayoutElement element in myLayoutElements)
                     {
                         element.preferredHeight = 100f;
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.LayoutElement.flexibleWidth">
            <summary>
            The extra relative width this layout element should be allocated if there is additional available space.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.LayoutElement.flexibleHeight">
            <summary>
            The extra relative height this layout element should be allocated if there is additional available space.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.LayoutElement.layoutPriority">
            <summary>
            The Priority of layout this element has.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.LayoutElement.SetDirty">
            <summary>
            Mark the LayoutElement as dirty.
            </summary>
            <remarks>
            This will make the auto layout system process this element on the next layout pass. This method should be called by the LayoutElement whenever a change is made that potentially affects the layout.
            </remarks>
        </member>
        <member name="T:UnityEngine.UI.Button">
            <summary>
            A standard button that sends an event when clicked.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Button.onClick">
             <summary>
             UnityEvent that is triggered when the button is pressed.
             Note: Triggered on MouseUp after MouseDown on the same object.
             </summary>
            <example>
            <code>
             <![CDATA[
             using UnityEngine;
             using UnityEngine.UI;
             using System.Collections;
            
             public class ClickExample : MonoBehaviour
             {
                 public Button yourButton;
            
                 void Start()
                 {
                     Button btn = yourButton.GetComponent<Button>();
                     btn.onClick.AddListener(TaskOnClick);
                 }
            
                 void TaskOnClick()
                 {
                     Debug.Log("You have clicked the button!");
                 }
             }
             ]]>
            </code>
            </example>
        </member>
        <member name="M:UnityEngine.UI.Button.OnPointerClick(UnityEngine.EventSystems.PointerEventData)">
             <summary>
             Call all registered IPointerClickHandlers.
             Register button presses using the IPointerClickHandler. You can also use it to tell what type of click happened (left, right etc.).
             Make sure your Scene has an EventSystem.
             </summary>
             <param name="eventData">Pointer Data associated with the event. Typically by the event system.</param>
             <example>
             <code>
             <![CDATA[
             //Attatch this script to a Button GameObject
             using UnityEngine;
             using UnityEngine.EventSystems;
            
             public class Example : MonoBehaviour, IPointerClickHandler
             {
                 //Detect if a click occurs
                 public void OnPointerClick(PointerEventData pointerEventData)
                 {
                         //Use this to tell when the user right-clicks on the Button
                     if (pointerEventData.button == PointerEventData.InputButton.Right)
                     {
                         //Output to console the clicked GameObject's name and the following message. You can replace this with your own actions for when clicking the GameObject.
                         Debug.Log(name + " Game Object Right Clicked!");
                     }
            
                     //Use this to tell when the user left-clicks on the Button
                     if (pointerEventData.button == PointerEventData.InputButton.Left)
                     {
                         Debug.Log(name + " Game Object Left Clicked!");
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.Button.OnSubmit(UnityEngine.EventSystems.BaseEventData)">
             <summary>
             Call all registered ISubmitHandler.
             </summary>
             <param name="eventData">Associated data with the event. Typically by the event system.</param>
             <remarks>
             This detects when a Button has been selected via a "submit" key you specify (default is the return key).
            
             To change the submit key, either:
            
             1. Go to Edit->Project Settings->Input.
            
             2. Next, expand the Axes section and go to the Submit section if it exists.
            
             3. If Submit doesn’t exist, add 1 number to the Size field. This creates a new section at the bottom. Expand the new section and change the Name field to “Submit”.
            
             4. Change the Positive Button field to the key you want (e.g. space).
            
            
             Or:
            
             1. Go to your EventSystem in your Project
            
             2. Go to the Inspector window and change the Submit Button field to one of the sections in the Input Manager (e.g. "Submit"), or create your own by naming it what you like, then following the next few steps.
            
             3. Go to Edit->Project Settings->Input to get to the Input Manager.
            
             4. Expand the Axes section in the Inspector window. Add 1 to the number in the Size field. This creates a new section at the bottom.
            
             5. Expand the new section and name it the same as the name you inserted in the Submit Button field in the EventSystem. Set the Positive Button field to the key you want (e.g. space)
             </remarks>
        </member>
        <member name="T:UnityEngine.UI.GraphicRaycaster.BlockingObjects">
            <summary>
            Type of raycasters to check against to check for canvas blocking elements.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.GraphicRaycaster.BlockingObjects.None">
            <summary>
            Perform no raycasts.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.GraphicRaycaster.BlockingObjects.TwoD">
            <summary>
            Perform a 2D raycast check to check for blocking 2D elements
            </summary>
        </member>
        <member name="F:UnityEngine.UI.GraphicRaycaster.BlockingObjects.ThreeD">
            <summary>
            Perform a 3D raycast check to check for blocking 3D elements
            </summary>
        </member>
        <member name="F:UnityEngine.UI.GraphicRaycaster.BlockingObjects.All">
            <summary>
            Perform a 2D and a 3D raycasts to check for blocking 2D and 3D elements.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.GraphicRaycaster.sortOrderPriority">
            <summary>
            Priority of the raycaster based upon sort order.
            </summary>
            <returns>
            The sortOrder priority.
            </returns>
        </member>
        <member name="P:UnityEngine.UI.GraphicRaycaster.renderOrderPriority">
            <summary>
            Priority of the raycaster based upon render order.
            </summary>
            <returns>
            The renderOrder priority.
            </returns>
        </member>
        <member name="P:UnityEngine.UI.GraphicRaycaster.ignoreReversedGraphics">
            <summary>
            Whether Graphics facing away from the raycaster are checked for raycasts.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.GraphicRaycaster.blockingObjects">
            <summary>
            The type of objects that are checked to determine if they block graphic raycasts.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.GraphicRaycaster.blockingMask">
            <summary>
            The type of objects specified through LayerMask that are checked to determine if they block graphic raycasts.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.GraphicRaycaster.Raycast(UnityEngine.EventSystems.PointerEventData,System.Collections.Generic.List{UnityEngine.EventSystems.RaycastResult})">
            <summary>
            Perform the raycast against the list of graphics associated with the Canvas.
            </summary>
            <param name="eventData">Current event data</param>
            <param name="resultAppendList">List of hit objects to append new results to.</param>
        </member>
        <member name="P:UnityEngine.UI.GraphicRaycaster.eventCamera">
            <summary>
            The camera that will generate rays for this raycaster.
            </summary>
            <returns>
            - Null if Camera mode is ScreenSpaceOverlay or ScreenSpaceCamera and has no camera.
            - canvas.worldCanvas if not null
            - Camera.main.
            </returns>
        </member>
        <member name="F:UnityEngine.UI.GraphicRaycaster.s_SortedGraphics">
            <summary>
            Perform a raycast into the screen and collect all graphics underneath it.
            </summary>
        </member>
        <member name="T:UnityEngine.UI.ScrollRect.MovementType">
             <summary>
             A setting for which behavior to use when content moves beyond the confines of its container.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;  // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public ScrollRect myScrollRect;
                 public Scrollbar newScrollBar;
            
                 //Called when a button is pressed
                 public void Example(int option)
                 {
                     if (option == 0)
                     {
                         myScrollRect.movementType = ScrollRect.MovementType.Clamped;
                     }
                     else if (option == 1)
                     {
                         myScrollRect.movementType = ScrollRect.MovementType.Elastic;
                     }
                     else if (option == 2)
                     {
                         myScrollRect.movementType = ScrollRect.MovementType.Unrestricted;
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="F:UnityEngine.UI.ScrollRect.MovementType.Unrestricted">
            <summary>
            Unrestricted movement. The content can move forever.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.ScrollRect.MovementType.Elastic">
            <summary>
            Elastic movement. The content is allowed to temporarily move beyond the container, but is pulled back elastically.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.ScrollRect.MovementType.Clamped">
            <summary>
            Clamped movement. The content can not be moved beyond its container.
            </summary>
        </member>
        <member name="T:UnityEngine.UI.ScrollRect.ScrollbarVisibility">
            <summary>
            Enum for which behavior to use for scrollbar visibility.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.ScrollRect.ScrollbarVisibility.Permanent">
            <summary>
            Always show the scrollbar.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.ScrollRect.ScrollbarVisibility.AutoHide">
            <summary>
            Automatically hide the scrollbar when no scrolling is needed on this axis. The viewport rect will not be changed.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.ScrollRect.ScrollbarVisibility.AutoHideAndExpandViewport">
            <summary>
            Automatically hide the scrollbar when no scrolling is needed on this axis, and expand the viewport rect accordingly.
            </summary>
            <remarks>
            When this setting is used, the scrollbar and the viewport rect become driven, meaning that values in the RectTransform are calculated automatically and can't be manually edited.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.content">
             <summary>
             The content that can be scrolled. It should be a child of the GameObject with ScrollRect on it.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public ScrollRect myScrollRect;
                 public RectTransform scrollableContent;
            
                 //Do this when the Save button is selected.
                 public void Start()
                 {
                     // assigns the contect that can be scrolled using the ScrollRect.
                     myScrollRect.content = scrollableContent;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.horizontal">
             <summary>
             Should horizontal scrolling be enabled?
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public ScrollRect myScrollRect;
            
                 public void Start()
                 {
                     // Is horizontal scrolling enabled?
                     if (myScrollRect.horizontal == true)
                     {
                         Debug.Log("Horizontal Scrolling is Enabled!");
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.vertical">
             <summary>
             Should vertical scrolling be enabled?
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;  // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public ScrollRect myScrollRect;
            
                 public void Start()
                 {
                     // Is Vertical scrolling enabled?
                     if (myScrollRect.vertical == true)
                     {
                         Debug.Log("Vertical Scrolling is Enabled!");
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.movementType">
            <summary>
            The behavior to use when the content moves beyond the scroll rect.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.elasticity">
             <summary>
             The amount of elasticity to use when the content moves beyond the scroll rect.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;
            
             public class ExampleClass : MonoBehaviour
             {
                 public ScrollRect myScrollRect;
            
                 public void Start()
                 {
                     // assigns a new value to the elasticity of the scroll rect.
                     // The higher the number the longer it takes to snap back.
                     myScrollRect.elasticity = 3.0f;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.inertia">
            <summary>
            Should movement inertia be enabled?
            </summary>
            <remarks>
            Inertia means that the scrollrect content will keep scrolling for a while after being dragged. It gradually slows down according to the decelerationRate.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.decelerationRate">
             <summary>
             The rate at which movement slows down.
             </summary>
             <remarks>
             The deceleration rate is the speed reduction per second. A value of 0.5 halves the speed each second. The default is 0.135. The deceleration rate is only used when inertia is enabled.
             </remarks>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public ScrollRect myScrollRect;
            
                 public void Start()
                 {
                     // assigns a new value to the decelerationRate of the scroll rect.
                     // The higher the number the longer it takes to decelerate.
                     myScrollRect.decelerationRate = 5.0f;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.scrollSensitivity">
            <summary>
            The sensitivity to scroll wheel and track pad scroll events.
            </summary>
            <remarks>
            Higher values indicate higher sensitivity.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.viewport">
            <summary>
            Reference to the viewport RectTransform that is the parent of the content RectTransform.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.horizontalScrollbar">
             <summary>
             Optional Scrollbar object linked to the horizontal scrolling of the ScrollRect.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;  // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public ScrollRect myScrollRect;
                 public Scrollbar newScrollBar;
            
                 public void Start()
                 {
                     // Assigns a scroll bar element to the ScrollRect, allowing you to scroll in the horizontal axis.
                     myScrollRect.horizontalScrollbar = newScrollBar;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.verticalScrollbar">
             <summary>
             Optional Scrollbar object linked to the vertical scrolling of the ScrollRect.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;  // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public ScrollRect myScrollRect;
                 public Scrollbar newScrollBar;
            
                 public void Start()
                 {
                     // Assigns a scroll bar element to the ScrollRect, allowing you to scroll in the vertical axis.
                     myScrollRect.verticalScrollbar = newScrollBar;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.horizontalScrollbarVisibility">
            <summary>
            The mode of visibility for the horizontal scrollbar.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.verticalScrollbarVisibility">
            <summary>
            The mode of visibility for the vertical scrollbar.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.horizontalScrollbarSpacing">
            <summary>
            The space between the scrollbar and the viewport.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.verticalScrollbarSpacing">
            <summary>
            The space between the scrollbar and the viewport.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.onValueChanged">
             <summary>
             Callback executed when the position of the child changes.
             </summary>
             <remarks>
             onValueChanged is used to watch for changes in the ScrollRect object.
             The onValueChanged call will use the UnityEvent.AddListener API to watch for
             changes.  When changes happen script code provided by the user will be called.
             The UnityEvent.AddListener API for UI.ScrollRect._onValueChanged takes a Vector2.
            
             Note: The editor allows the onValueChanged value to be set up manually.For example the
             value can be set to run only a runtime.  The object and script function to call are also
             provided here.
            
             The onValueChanged variable can be alternatively set-up at runtime.The script example below
             shows how this can be done.The script is attached to the ScrollRect object.
             </remarks>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using UnityEngine.UI;
            
             public class ExampleScript : MonoBehaviour
             {
                 static ScrollRect scrollRect;
            
                 void Start()
                 {
                     scrollRect = GetComponent<ScrollRect>();
                     scrollRect.onValueChanged.AddListener(ListenerMethod);
                 }
            
                 public void ListenerMethod(Vector2 value)
                 {
                     Debug.Log("ListenerMethod: " + value);
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.velocity">
            <summary>
            The current velocity of the content.
            </summary>
            <remarks>
            The velocity is defined in units per second.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.ScrollRect.Rebuild(UnityEngine.UI.CanvasUpdate)">
            <summary>
            Rebuilds the scroll rect data after initialization.
            </summary>
            <param name="executing">The current step in the rendering CanvasUpdate cycle.</param>
        </member>
        <member name="M:UnityEngine.UI.ScrollRect.IsActive">
             <summary>
             See member in base class.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;  // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public ScrollRect myScrollRect;
            
                 public void Start()
                 {
                     //Checks if the ScrollRect called "myScrollRect" is active.
                     if (myScrollRect.IsActive())
                     {
                         Debug.Log("The Scroll Rect is active!");
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.ScrollRect.StopMovement">
            <summary>
            Sets the velocity to zero on both axes so the content stops moving.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.ScrollRect.OnBeginDrag(UnityEngine.EventSystems.PointerEventData)">
             <summary>
             Handling for when the content is beging being dragged.
             </summary>
            <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.EventSystems; // Required when using event data
            
             public class ExampleClass : MonoBehaviour, IBeginDragHandler // required interface when using the OnBeginDrag method.
             {
                 //Do this when the user starts dragging the element this script is attached to..
                 public void OnBeginDrag(PointerEventData data)
                 {
                     Debug.Log("They started dragging " + this.name);
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.ScrollRect.OnEndDrag(UnityEngine.EventSystems.PointerEventData)">
             <summary>
             Handling for when the content has finished being dragged.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.EventSystems; // Required when using event data
            
             public class ExampleClass : MonoBehaviour, IEndDragHandler // required interface when using the OnEndDrag method.
             {
                 //Do this when the user stops dragging this UI Element.
                 public void OnEndDrag(PointerEventData data)
                 {
                     Debug.Log("Stopped dragging " + this.name + "!");
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.ScrollRect.OnDrag(UnityEngine.EventSystems.PointerEventData)">
             <summary>
             Handling for when the content is dragged.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.EventSystems; // Required when using event data
            
             public class ExampleClass : MonoBehaviour, IDragHandler // required interface when using the OnDrag method.
             {
                 //Do this while the user is dragging this UI Element.
                 public void OnDrag(PointerEventData data)
                 {
                     Debug.Log("Currently dragging " + this.name);
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.ScrollRect.SetContentAnchoredPosition(UnityEngine.Vector2)">
            <summary>
            Sets the anchored position of the content.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.ScrollRect.UpdatePrevData">
            <summary>
            Helper function to update the previous data fields on a ScrollRect. Call this before you change data in the ScrollRect.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.normalizedPosition">
             <summary>
             The scroll position as a Vector2 between (0,0) and (1,1) with (0,0) being the lower left corner.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;  // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public ScrollRect myScrollRect;
                 public Vector2 myPosition = new Vector2(0.5f, 0.5f);
            
                 public void Start()
                 {
                     //Change the current scroll position.
                     myScrollRect.normalizedPosition = myPosition;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.horizontalNormalizedPosition">
             <summary>
             The horizontal scroll position as a value between 0 and 1, with 0 being at the left.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;  // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public ScrollRect myScrollRect;
                 public Scrollbar newScrollBar;
            
                 public void Start()
                 {
                     //Change the current horizontal scroll position.
                     myScrollRect.horizontalNormalizedPosition = 0.5f;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.verticalNormalizedPosition">
             <summary>
             The vertical scroll position as a value between 0 and 1, with 0 being at the bottom.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;  // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public ScrollRect myScrollRect;
                 public Scrollbar newScrollBar;
            
                 public void Start()
                 {
                     //Change the current vertical scroll position.
                     myScrollRect.verticalNormalizedPosition = 0.5f;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.ScrollRect.SetNormalizedPosition(System.Single,System.Int32)">
            <summary>
            >Set the horizontal or vertical scroll position as a value between 0 and 1, with 0 being at the left or at the bottom.
            </summary>
            <param name="value">The position to set, between 0 and 1.</param>
            <param name="axis">The axis to set: 0 for horizontal, 1 for vertical.</param>
        </member>
        <member name="M:UnityEngine.UI.ScrollRect.CalculateLayoutInputHorizontal">
            <summary>
            Called by the layout system.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.ScrollRect.CalculateLayoutInputVertical">
            <summary>
            Called by the layout system.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.minWidth">
            <summary>
            Called by the layout system.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.preferredWidth">
            <summary>
            Called by the layout system.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.flexibleWidth">
            <summary>
            Called by the layout system.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.minHeight">
            <summary>
            Called by the layout system.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.preferredHeight">
            <summary>
            Called by the layout system.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.flexibleHeight">
            <summary>
            Called by the layout system.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.ScrollRect.layoutPriority">
            <summary>
            Called by the layout system.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.ScrollRect.SetLayoutHorizontal">
            <summary>
            Called by the layout system.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.ScrollRect.SetLayoutVertical">
            <summary>
            Called by the layout system.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.ScrollRect.UpdateBounds">
            <summary>
            Calculate the bounds the ScrollRect should be using.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.ScrollRect.SetDirty">
            <summary>
            Override to alter or add to the code that keeps the appearance of the scroll rect synced with its data.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.ScrollRect.SetDirtyCaching">
            <summary>
            Override to alter or add to the code that caches data to avoid repeated heavy operations.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.VerticalLayoutGroup.CalculateLayoutInputHorizontal">
            <summary>
            Called by the layout system. Also see ILayoutElement
            </summary>
        </member>
        <member name="M:UnityEngine.UI.VerticalLayoutGroup.CalculateLayoutInputVertical">
            <summary>
            Called by the layout system. Also see ILayoutElement
            </summary>
        </member>
        <member name="M:UnityEngine.UI.VerticalLayoutGroup.SetLayoutHorizontal">
            <summary>
            Called by the layout system. Also see ILayoutElement
            </summary>
        </member>
        <member name="M:UnityEngine.UI.VerticalLayoutGroup.SetLayoutVertical">
            <summary>
            Called by the layout system. Also see ILayoutElement
            </summary>
        </member>
        <member name="T:UnityEngine.UI.Toggle">
            <summary>
            A standard toggle that has an on / off state.
            </summary>
            <remarks>
            The toggle component is a Selectable that controls a child graphic which displays the on / off state.
            When a toggle event occurs a callback is sent to any registered listeners of UI.Toggle._onValueChanged.
            </remarks>
        </member>
        <member name="T:UnityEngine.UI.Toggle.ToggleTransition">
            <summary>
            Display settings for when a toggle is activated or deactivated.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Toggle.ToggleTransition.None">
            <summary>
            Show / hide the toggle instantly
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Toggle.ToggleTransition.Fade">
            <summary>
            Fade the toggle in / out smoothly.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Toggle.toggleTransition">
            <summary>
            Transition mode for the toggle.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Toggle.graphic">
            <summary>
            Graphic the toggle should be working with.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Toggle.group">
            <summary>
            Group the toggle belongs to.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Toggle.onValueChanged">
             <summary>
             Allow for delegate-based subscriptions for faster events than 'eventReceiver', and allowing for multiple receivers.
             </summary>
             <example>
             <code>
             <![CDATA[
             //Attach this script to a Toggle GameObject. To do this, go to Create>UI>Toggle.
             //Set your own Text in the Inspector window
            
             using UnityEngine;
             using UnityEngine.UI;
            
             public class Example : MonoBehaviour
             {
                 Toggle m_Toggle;
                 public Text m_Text;
            
                 void Start()
                 {
                     //Fetch the Toggle GameObject
                     m_Toggle = GetComponent<Toggle>();
                     //Add listener for when the state of the Toggle changes, to take action
                     m_Toggle.onValueChanged.AddListener(delegate {
                             ToggleValueChanged(m_Toggle);
                         });
            
                     //Initialise the Text to say the first state of the Toggle
                     m_Text.text = "First Value : " + m_Toggle.isOn;
                 }
            
                 //Output the new state of the Toggle into Text
                 void ToggleValueChanged(Toggle change)
                 {
                     m_Text.text =  "New Value : " + m_Toggle.isOn;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Toggle.isOn">
             <summary>
             Whether the toggle is currently active.
             </summary>
             <example>
             <code>
             <![CDATA[
             /Attach this script to a Toggle GameObject. To do this, go to Create>UI>Toggle.
             //Set your own Text in the Inspector window
            
             using UnityEngine;
             using UnityEngine.UI;
            
             public class Example : MonoBehaviour
             {
                 Toggle m_Toggle;
                 public Text m_Text;
            
                 void Start()
                 {
                     //Fetch the Toggle GameObject
                     m_Toggle = GetComponent<Toggle>();
                     //Add listener for when the state of the Toggle changes, and output the state
                     m_Toggle.onValueChanged.AddListener(delegate {
                             ToggleValueChanged(m_Toggle);
                         });
            
                     //Initialize the Text to say whether the Toggle is in a positive or negative state
                     m_Text.text = "Toggle is : " + m_Toggle.isOn;
                 }
            
                 //Output the new state of the Toggle into Text when the user uses the Toggle
                 void ToggleValueChanged(Toggle change)
                 {
                     m_Text.text =  "Toggle is : " + m_Toggle.isOn;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.Toggle.SetIsOnWithoutNotify(System.Boolean)">
            <summary>
            Set isOn without invoking onValueChanged callback.
            </summary>
            <param name="value">New Value for isOn.</param>
        </member>
        <member name="M:UnityEngine.UI.Toggle.PlayEffect(System.Boolean)">
            <summary>
            Play the appropriate effect.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Toggle.Start">
            <summary>
            Assume the correct visual state.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Toggle.OnPointerClick(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            React to clicks.
            </summary>
        </member>
        <member name="T:UnityEngine.UI.Slider.Direction">
            <summary>
            Setting that indicates one of four directions.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Slider.Direction.LeftToRight">
            <summary>
            From the left to the right
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Slider.Direction.RightToLeft">
            <summary>
            From the right to the left
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Slider.Direction.BottomToTop">
            <summary>
            From the bottom to the top.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Slider.Direction.TopToBottom">
            <summary>
            From the top to the bottom.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Slider.fillRect">
             <summary>
             Optional RectTransform to use as fill for the slider.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;  // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public Slider mainSlider;
                 //Reference to new "RectTransform"(Child of FillArea).
                 public RectTransform newFillRect;
            
                 //Deactivates the old FillRect and assigns a new one.
                 void Start()
                 {
                     mainSlider.fillRect.gameObject.SetActive(false);
                     mainSlider.fillRect = newFillRect;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Slider.handleRect">
             <summary>
             Optional RectTransform to use as a handle for the slider.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public Slider mainSlider;
                 //Reference to new "RectTransform" (Child of "Handle Slide Area").
                 public RectTransform handleHighlighted;
            
                 //Deactivates the old Handle, then assigns and enables the new one.
                 void Start()
                 {
                     mainSlider.handleRect.gameObject.SetActive(false);
                     mainSlider.handleRect = handleHighlighted;
                     mainSlider.handleRect.gameObject.SetActive(true);
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Slider.direction">
             <summary>
             The direction of the slider, from minimum to maximum value.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public Slider mainSlider;
            
                 public void Start()
                 {
                     //Changes the direction of the slider.
                     if (mainSlider.direction == Slider.Direction.BottomToTop)
                     {
                         mainSlider.direction = Slider.Direction.TopToBottom;
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Slider.minValue">
             <summary>
             The minimum allowed value of the slider.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public Slider mainSlider;
            
                 void Start()
                 {
                     // Changes the minimum value of the slider to 10;
                     mainSlider.minValue = 10;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Slider.maxValue">
             <summary>
             The maximum allowed value of the slider.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public Slider mainSlider;
            
                 void Start()
                 {
                     // Changes the max value of the slider to 20;
                     mainSlider.maxValue = 20;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Slider.wholeNumbers">
             <summary>
             Should the value only be allowed to be whole numbers?
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public Slider mainSlider;
            
                 public void Start()
                 {
                     //sets the slider's value to accept whole numbers only.
                     mainSlider.wholeNumbers = true;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Slider.value">
             <summary>
             The current value of the slider.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public Slider mainSlider;
            
                 //Invoked when a submit button is clicked.
                 public void SubmitSliderSetting()
                 {
                     //Displays the value of the slider in the console.
                     Debug.Log(mainSlider.value);
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.Slider.SetValueWithoutNotify(System.Single)">
            <summary>
            Set the value of the slider without invoking onValueChanged callback.
            </summary>
            <param name="input">The new value for the slider.</param>
        </member>
        <member name="P:UnityEngine.UI.Slider.normalizedValue">
             <summary>
             The current value of the slider normalized into a value between 0 and 1.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public Slider mainSlider;
            
                 //Set to invoke when "OnValueChanged" method is called.
                 void CheckNormalisedValue()
                 {
                     //Displays the normalised value of the slider everytime the value changes.
                     Debug.Log(mainSlider.normalizedValue);
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Slider.onValueChanged">
             <summary>
             Callback executed when the value of the slider is changed.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public Slider mainSlider;
            
                 public void Start()
                 {
                     //Adds a listener to the main slider and invokes a method when the value changes.
                     mainSlider.onValueChanged.AddListener(delegate {ValueChangeCheck(); });
                 }
            
                 // Invoked when the value of the slider changes.
                 public void ValueChangeCheck()
                 {
                     Debug.Log(mainSlider.value);
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.Slider.LayoutComplete">
            <summary>
            See ICanvasElement.LayoutComplete
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Slider.GraphicUpdateComplete">
            <summary>
            See ICanvasElement.GraphicUpdateComplete
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Slider.Update">
            <summary>
            Update the rect based on the delayed update visuals.
            Got around issue of calling sendMessage from onValidate.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Slider.Set(System.Single,System.Boolean)">
            <summary>
            Set the value of the slider.
            </summary>
            <param name="input">The new value for the slider.</param>
            <param name="sendCallback">If the OnValueChanged callback should be invoked.</param>
            <remarks>
            Process the input to ensure the value is between min and max value. If the input is different set the value and send the callback is required.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.Slider.FindSelectableOnLeft">
            <summary>
            See Selectable.FindSelectableOnLeft
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Slider.FindSelectableOnRight">
            <summary>
            See Selectable.FindSelectableOnRight
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Slider.FindSelectableOnUp">
            <summary>
            See Selectable.FindSelectableOnUp
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Slider.FindSelectableOnDown">
            <summary>
            See Selectable.FindSelectableOnDown
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Slider.SetDirection(UnityEngine.UI.Slider.Direction,System.Boolean)">
             <summary>
             Sets the direction of this slider, optionally changing the layout as well.
             </summary>
             <param name="direction">The direction of the slider</param>
             <param name="includeRectLayouts">Should the layout be flipped together with the slider direction</param>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public Slider mainSlider;
            
                 public void Start()
                 {
                     mainSlider.SetDirection(Slider.Direction.LeftToRight, false);
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="T:UnityEngine.UI.GridLayoutGroup.Corner">
            <summary>
            Which corner is the starting corner for the grid.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.GridLayoutGroup.Corner.UpperLeft">
            <summary>
            Upper Left corner.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.GridLayoutGroup.Corner.UpperRight">
            <summary>
            Upper Right corner.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.GridLayoutGroup.Corner.LowerLeft">
            <summary>
            Lower Left corner.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.GridLayoutGroup.Corner.LowerRight">
            <summary>
            Lower Right corner.
            </summary>
        </member>
        <member name="T:UnityEngine.UI.GridLayoutGroup.Axis">
            <summary>
            The grid axis we are looking at.
            </summary>
            <remarks>
            As the storage is a [][] we make access easier by passing a axis.
            </remarks>
        </member>
        <member name="F:UnityEngine.UI.GridLayoutGroup.Axis.Horizontal">
            <summary>
            Horizontal axis
            </summary>
        </member>
        <member name="F:UnityEngine.UI.GridLayoutGroup.Axis.Vertical">
            <summary>
            Vertical axis.
            </summary>
        </member>
        <member name="T:UnityEngine.UI.GridLayoutGroup.Constraint">
            <summary>
            Constraint type on either the number of columns or rows.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.GridLayoutGroup.Constraint.Flexible">
            <summary>
            Don't constrain the number of rows or columns.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.GridLayoutGroup.Constraint.FixedColumnCount">
            <summary>
            Constrain the number of columns to a specified number.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.GridLayoutGroup.Constraint.FixedRowCount">
            <summary>
            Constraint the number of rows to a specified number.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.GridLayoutGroup.startCorner">
            <summary>
            Which corner should the first cell be placed in?
            </summary>
        </member>
        <member name="P:UnityEngine.UI.GridLayoutGroup.startAxis">
            <summary>
            Which axis should cells be placed along first
            </summary>
            <remarks>
            When startAxis is set to horizontal, an entire row will be filled out before proceeding to the next row. When set to vertical, an entire column will be filled out before proceeding to the next column.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.GridLayoutGroup.cellSize">
            <summary>
            The size to use for each cell in the grid.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.GridLayoutGroup.spacing">
            <summary>
            The spacing to use between layout elements in the grid on both axises.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.GridLayoutGroup.constraint">
            <summary>
            Which constraint to use for the GridLayoutGroup.
            </summary>
            <remarks>
            Specifying a constraint can make the GridLayoutGroup work better in conjunction with a [[ContentSizeFitter]] component. When GridLayoutGroup is used on a RectTransform with a manually specified size, there's no need to specify a constraint.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.GridLayoutGroup.constraintCount">
            <summary>
            How many cells there should be along the constrained axis.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.GridLayoutGroup.CalculateLayoutInputHorizontal">
            <summary>
            Called by the layout system to calculate the horizontal layout size.
            Also see ILayoutElement
            </summary>
        </member>
        <member name="M:UnityEngine.UI.GridLayoutGroup.CalculateLayoutInputVertical">
            <summary>
            Called by the layout system to calculate the vertical layout size.
            Also see ILayoutElement
            </summary>
        </member>
        <member name="M:UnityEngine.UI.GridLayoutGroup.SetLayoutHorizontal">
            <summary>
            Called by the layout system
            Also see ILayoutElement
            </summary>
        </member>
        <member name="M:UnityEngine.UI.GridLayoutGroup.SetLayoutVertical">
            <summary>
            Called by the layout system
            Also see ILayoutElement
            </summary>
        </member>
        <member name="P:UnityEngine.UI.SpriteState.highlightedSprite">
            <summary>
            Highlighted sprite.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.SpriteState.pressedSprite">
            <summary>
            Pressed sprite.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.SpriteState.selectedSprite">
            <summary>
            Selected sprite.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.SpriteState.disabledSprite">
            <summary>
            Disabled sprite.
            </summary>
        </member>
        <member name="T:UnityEngine.UI.Graphic">
            <summary>
            Base class for all UI components that should be derived from when creating new Graphic types.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Graphic.defaultGraphicMaterial">
            <summary>
            Default material used to draw UI elements if no explicit material was specified.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Graphic.color">
             <summary>
             Base color of the Graphic.
             </summary>
             <remarks>
             The builtin UI Components use this as their vertex color. Use this to fetch or change the Color of visual UI elements, such as an Image.
             </remarks>
             <example>
             <code>
             <![CDATA[
             //Place this script on a GameObject with a Graphic component attached e.g. a visual UI element (Image).
            
             using UnityEngine;
             using UnityEngine.UI;
            
             public class Example : MonoBehaviour
             {
                 Graphic m_Graphic;
                 Color m_MyColor;
            
                 void Start()
                 {
                     //Fetch the Graphic from the GameObject
                     m_Graphic = GetComponent<Graphic>();
                     //Create a new Color that starts as red
                     m_MyColor = Color.red;
                     //Change the Graphic Color to the new Color
                     m_Graphic.color = m_MyColor;
                 }
            
                 // Update is called once per frame
                 void Update()
                 {
                     //When the mouse button is clicked, change the Graphic Color
                     if (Input.GetKey(KeyCode.Mouse0))
                     {
                         //Change the Color over time between blue and red while the mouse button is pressed
                         m_MyColor = Color.Lerp(Color.red, Color.blue, Mathf.PingPong(Time.time, 1));
                     }
                     //Change the Graphic Color to the new Color
                     m_Graphic.color = m_MyColor;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Graphic.raycastTarget">
            <summary>
            Should this graphic be considered a target for raycasting?
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Graphic.raycastPadding">
            <summary>
            Padding to be applied to the masking
            X = Left
            Y = Bottom
            Z = Right
            W = Top
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Graphic.SetAllDirty">
            <summary>
            Set all properties of the Graphic dirty and needing rebuilt.
            Dirties Layout, Vertices, and Materials.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Graphic.SetLayoutDirty">
            <summary>
            Mark the layout as dirty and needing rebuilt.
            </summary>
            <remarks>
            Send a OnDirtyLayoutCallback notification if any elements are registered. See RegisterDirtyLayoutCallback
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.Graphic.SetVerticesDirty">
            <summary>
            Mark the vertices as dirty and needing rebuilt.
            </summary>
            <remarks>
            Send a OnDirtyVertsCallback notification if any elements are registered. See RegisterDirtyVerticesCallback
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.Graphic.SetMaterialDirty">
            <summary>
            Mark the material as dirty and needing rebuilt.
            </summary>
            <remarks>
            Send a OnDirtyMaterialCallback notification if any elements are registered. See RegisterDirtyMaterialCallback
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.Graphic.depth">
             <summary>
             Absolute depth of the graphic, used by rendering and events -- lowest to highest.
             </summary>
             <example>
             The depth is relative to the first root canvas.
            
             Canvas
              Graphic - 1
              Graphic - 2
              Nested Canvas
                 Graphic - 3
                 Graphic - 4
              Graphic - 5
            
             This value is used to determine draw and event ordering.
             </example>
        </member>
        <member name="P:UnityEngine.UI.Graphic.rectTransform">
            <summary>
            The RectTransform component used by the Graphic. Cached for speed.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Graphic.canvas">
            <summary>
            A reference to the Canvas this Graphic is rendering to.
            </summary>
            <remarks>
            In the situation where the Graphic is used in a hierarchy with multiple Canvases, the Canvas closest to the root will be used.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.Graphic.canvasRenderer">
            <summary>
            A reference to the CanvasRenderer populated by this Graphic.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Graphic.defaultMaterial">
            <summary>
            Returns the default material for the graphic.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Graphic.material">
            <summary>
            The Material set by the user
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Graphic.materialForRendering">
            <summary>
            The material that will be sent for Rendering (Read only).
            </summary>
            <remarks>
            This is the material that actually gets sent to the CanvasRenderer. By default it's the same as [[Graphic.material]]. When extending Graphic you can override this to send a different material to the CanvasRenderer than the one set by Graphic.material. This is useful if you want to modify the user set material in a non destructive manner.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.Graphic.mainTexture">
             <summary>
             The graphic's texture. (Read Only).
             </summary>
             <remarks>
             This is the Texture that gets passed to the CanvasRenderer, Material and then Shader _MainTex.
            
             When implementing your own Graphic you can override this to control which texture goes through the UI Rendering pipeline.
            
             Bear in mind that Unity tries to batch UI elements together to improve performance, so its ideal to work with atlas to reduce the number of draw calls.
             </remarks>
        </member>
        <member name="M:UnityEngine.UI.Graphic.OnEnable">
            <summary>
            Mark the Graphic and the canvas as having been changed.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Graphic.OnDisable">
            <summary>
            Clear references.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Graphic.OnCullingChanged">
            <summary>
            This method must be called when <c>CanvasRenderer.cull</c> is modified.
            </summary>
            <remarks>
            This can be used to perform operations that were previously skipped because the <c>Graphic</c> was culled.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.Graphic.Rebuild(UnityEngine.UI.CanvasUpdate)">
            <summary>
            Rebuilds the graphic geometry and its material on the PreRender cycle.
            </summary>
            <param name="update">The current step of the rendering CanvasUpdate cycle.</param>
            <remarks>
            See CanvasUpdateRegistry for more details on the canvas update cycle.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.Graphic.UpdateMaterial">
            <summary>
            Call to update the Material of the graphic onto the CanvasRenderer.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Graphic.UpdateGeometry">
            <summary>
            Call to update the geometry of the Graphic onto the CanvasRenderer.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Graphic.OnPopulateMesh(UnityEngine.UI.VertexHelper)">
            <summary>
            Callback function when a UI element needs to generate vertices. Fills the vertex buffer data.
            </summary>
            <param name="vh">VertexHelper utility.</param>
            <remarks>
            Used by Text, UI.Image, and RawImage for example to generate vertices specific to their use case.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.Graphic.OnRebuildRequested">
            <summary>
            Editor-only callback that is issued by Unity if a rebuild of the Graphic is required.
            Currently sent when an asset is reimported.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Graphic.SetNativeSize">
            <summary>
            Make the Graphic have the native size of its content.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Graphic.Raycast(UnityEngine.Vector2,UnityEngine.Camera)">
            <summary>
            When a GraphicRaycaster is raycasting into the scene it does two things. First it filters the elements using their RectTransform rect. Then it uses this Raycast function to determine the elements hit by the raycast.
            </summary>
            <param name="sp">Screen point being tested</param>
            <param name="eventCamera">Camera that is being used for the testing.</param>
            <returns>True if the provided point is a valid location for GraphicRaycaster raycasts.</returns>
        </member>
        <member name="M:UnityEngine.UI.Graphic.PixelAdjustPoint(UnityEngine.Vector2)">
            <summary>
            Adjusts the given pixel to be pixel perfect.
            </summary>
            <param name="point">Local space point.</param>
            <returns>Pixel perfect adjusted point.</returns>
            <remarks>
            Note: This is only accurate if the Graphic root Canvas is in Screen Space.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.Graphic.GetPixelAdjustedRect">
            <summary>
            Returns a pixel perfect Rect closest to the Graphic RectTransform.
            </summary>
            <remarks>
            Note: This is only accurate if the Graphic root Canvas is in Screen Space.
            </remarks>
            <returns>A Pixel perfect Rect.</returns>
        </member>
        <member name="M:UnityEngine.UI.Graphic.CrossFadeColor(UnityEngine.Color,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Tweens the CanvasRenderer color associated with this Graphic.
            </summary>
            <param name="targetColor">Target color.</param>
            <param name="duration">Tween duration.</param>
            <param name="ignoreTimeScale">Should ignore Time.scale?</param>
            <param name="useAlpha">Should also Tween the alpha channel?</param>
        </member>
        <member name="M:UnityEngine.UI.Graphic.CrossFadeColor(UnityEngine.Color,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Tweens the CanvasRenderer color associated with this Graphic.
            </summary>
            <param name="targetColor">Target color.</param>
            <param name="duration">Tween duration.</param>
            <param name="ignoreTimeScale">Should ignore Time.scale?</param>
            <param name="useAlpha">Should also Tween the alpha channel?</param>
             <param name="useRGB">Should the color or the alpha be used to tween</param>
        </member>
        <member name="M:UnityEngine.UI.Graphic.CrossFadeAlpha(System.Single,System.Single,System.Boolean)">
            <summary>
            Tweens the alpha of the CanvasRenderer color associated with this Graphic.
            </summary>
            <param name="alpha">Target alpha.</param>
            <param name="duration">Duration of the tween in seconds.</param>
            <param name="ignoreTimeScale">Should ignore [[Time.scale]]?</param>
        </member>
        <member name="M:UnityEngine.UI.Graphic.RegisterDirtyLayoutCallback(UnityEngine.Events.UnityAction)">
            <summary>
            Add a listener to receive notification when the graphics layout is dirtied.
            </summary>
            <param name="action">The method to call when invoked.</param>
        </member>
        <member name="M:UnityEngine.UI.Graphic.UnregisterDirtyLayoutCallback(UnityEngine.Events.UnityAction)">
            <summary>
            Remove a listener from receiving notifications when the graphics layout are dirtied
            </summary>
            <param name="action">The method to call when invoked.</param>
        </member>
        <member name="M:UnityEngine.UI.Graphic.RegisterDirtyVerticesCallback(UnityEngine.Events.UnityAction)">
            <summary>
            Add a listener to receive notification when the graphics vertices are dirtied.
            </summary>
            <param name="action">The method to call when invoked.</param>
        </member>
        <member name="M:UnityEngine.UI.Graphic.UnregisterDirtyVerticesCallback(UnityEngine.Events.UnityAction)">
            <summary>
            Remove a listener from receiving notifications when the graphics vertices are dirtied
            </summary>
            <param name="action">The method to call when invoked.</param>
        </member>
        <member name="M:UnityEngine.UI.Graphic.RegisterDirtyMaterialCallback(UnityEngine.Events.UnityAction)">
            <summary>
            Add a listener to receive notification when the graphics material is dirtied.
            </summary>
            <param name="action">The method to call when invoked.</param>
        </member>
        <member name="M:UnityEngine.UI.Graphic.UnregisterDirtyMaterialCallback(UnityEngine.Events.UnityAction)">
            <summary>
            Remove a listener from receiving notifications when the graphics material are dirtied
            </summary>
            <param name="action">The method to call when invoked.</param>
        </member>
        <member name="T:UnityEngine.UI.IClipper">
            <summary>
            Interface that can be used to recieve clipping callbacks as part of the canvas update loop.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.IClipper.PerformClipping">
            <summary>
            Function to to cull / clip children elements.
            </summary>
            <remarks>
            Called after layout and before Graphic update of the Canvas update loop.
            </remarks>
        </member>
        <member name="T:UnityEngine.UI.IClippable">
            <summary>
            Interface for elements that can be clipped if they are under an IClipper
            </summary>
        </member>
        <member name="P:UnityEngine.UI.IClippable.gameObject">
            <summary>
            GameObject of the IClippable object
            </summary>
        </member>
        <member name="M:UnityEngine.UI.IClippable.RecalculateClipping">
            <summary>
            Will be called when the state of a parent IClippable changed.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.IClippable.rectTransform">
            <summary>
            The RectTransform of the clippable.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.IClippable.Cull(UnityEngine.Rect,System.Boolean)">
            <summary>
            Clip and cull the IClippable given a specific clipping rect
            </summary>
            <param name="clipRect">The Rectangle in which to clip against.</param>
            <param name="validRect">Is the Rect valid. If not then the rect has 0 size.</param>
        </member>
        <member name="M:UnityEngine.UI.IClippable.SetClipRect(UnityEngine.Rect,System.Boolean)">
            <summary>
            Set the clip rect for the IClippable.
            </summary>
            <param name="value">The Rectangle for the clipping</param>
            <param name="validRect">Is the rect valid.</param>
        </member>
        <member name="M:UnityEngine.UI.IClippable.SetClipSoftness(UnityEngine.Vector2)">
             <summary>
             Set the clip softness for the IClippable.
            
             The softness is a linear alpha falloff over clipSoftness pixels.
             </summary>
             <param name="clipSoftness">The number of pixels to apply the softness to </param>
        </member>
        <member name="T:UnityEngine.UI.InputField">
            <summary>
            Turn a simple label into a interactable input field.
            </summary>
        </member>
        <member name="T:UnityEngine.UI.InputField.ContentType">
            <summary>
            Setting the content type acts as a shortcut for setting a combination of InputType, CharacterValidation, LineType, and TouchScreenKeyboardType
            </summary>
            <remarks>
            The ContentType affects character validation, keyboard type used (on platforms with on-screen keyboards), whether the InputField accepts multiple lines, and whether the text is autocorrected (on platforms that offer input auto-correction) or is treated as a password where the characters are not shown directly.
            </remarks>
        </member>
        <member name="F:UnityEngine.UI.InputField.ContentType.Standard">
            <summary>
            Allows all input.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.InputField.ContentType.Autocorrected">
            <summary>
            Allows all input and performs auto-correction on platforms that support it.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.InputField.ContentType.IntegerNumber">
            <summary>
            Allow whole numbers (positive or negative).
            </summary>
        </member>
        <member name="F:UnityEngine.UI.InputField.ContentType.DecimalNumber">
            <summary>
            Allows decimal numbers (positive or negative).
            </summary>
        </member>
        <member name="F:UnityEngine.UI.InputField.ContentType.Alphanumeric">
            <summary>
            Allows letters A-Z, a-z and numbers 0-9.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.InputField.ContentType.Name">
            <summary>
            The InputField is used for typing in a name, and enforces capitalization of the first letter of each word. Note that the user can circumvent the first letter capitalization rules by deleting automatically-capitalized letters.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.InputField.ContentType.EmailAddress">
            <summary>
            The input is used for typing in an email address.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.InputField.ContentType.Password">
            <summary>
            Allows all input and hides the typed characters by showing them as asterisks characters.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.InputField.ContentType.Pin">
            <summary>
            Allows integer numbers and hides the typed characters by showing them as asterisks characters.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.InputField.ContentType.Custom">
            <summary>
            Custom types that allows user-defined settings.
            </summary>
        </member>
        <member name="T:UnityEngine.UI.InputField.InputType">
            <summary>
            Type of data expected by the input field mobile keyboard.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.InputField.InputType.Standard">
            <summary>
            The standard mobile keyboard
            </summary>
        </member>
        <member name="F:UnityEngine.UI.InputField.InputType.AutoCorrect">
            <summary>
            The mobile autocorrect keyboard.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.InputField.InputType.Password">
            <summary>
            The mobile password keyboard.
            </summary>
        </member>
        <member name="T:UnityEngine.UI.InputField.CharacterValidation">
            <summary>
            The type of characters that are allowed to be added to the string.
            </summary>
            <remarks>
            Note that the character validation does not validate the entire string as being valid or not. It only does validation on a per-character level, resulting in the typed character either being added to the string or not
            </remarks>
        </member>
        <member name="F:UnityEngine.UI.InputField.CharacterValidation.None">
            <summary>
            No validation. Any input is valid.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.InputField.CharacterValidation.Integer">
            <summary>
            Allow whole numbers (positive or negative).
            Characters 0-9 and - (dash / minus sign) are allowed. The dash is only allowed as the first character.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.InputField.CharacterValidation.Decimal">
            <summary>
            Allows decimal numbers (positive or negative).
            </summary>
            <remarks>
            Characters 0-9, . (dot), and - (dash / minus sign) are allowed. The dash is only allowed as the first character. Only one dot in the string is allowed.
            </remarks>
        </member>
        <member name="F:UnityEngine.UI.InputField.CharacterValidation.Alphanumeric">
            <summary>
            Allows letters A-Z, a-z and numbers 0-9.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.InputField.CharacterValidation.Name">
             <summary>
             Only allow names and enforces capitalization.
             </summary>
             <remarks>
             Allows letters, spaces, and ' (apostrophe). A character after a space is automatically made upper case. A character not after a space is automatically made lowercase. A character after an apostrophe can be either upper or lower case. Only one apostrophe in the string is allowed. More than one space in a row is not allowed.
            
             A characters is considered a letter if it is categorized as a Unicode letter, as implemented by the Char.Isletter method in .Net.
             </remarks>
        </member>
        <member name="F:UnityEngine.UI.InputField.CharacterValidation.EmailAddress">
             <summary>
             Allows the characters that are allowed in an email address.
             </summary>
             <remarks>
             Allows characters A-Z, a.z, 0-9, @, . (dot), !, #, $, %, &amp;, ', *, +, -, /, =, ?, ^, _, `, {, |, }, and ~.
            
             Only one @ is allowed in the string and more than one dot in a row are not allowed. Note that the character validation does not validate the entire string as being a valid email address since it only does validation on a per-character level, resulting in the typed character either being added to the string or not.
             </remarks>
        </member>
        <member name="T:UnityEngine.UI.InputField.LineType">
            <summary>
            The LineType is used to describe the behavior of the InputField.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.InputField.LineType.SingleLine">
            <summary>
            Only allows 1 line to be entered. Has horizontal scrolling and no word wrap. Pressing enter will submit the InputField.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.InputField.LineType.MultiLineSubmit">
            <summary>
            Is a multiline InputField with vertical scrolling and overflow. Pressing the return key will submit.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.InputField.LineType.MultiLineNewline">
            <summary>
            Is a multiline InputField with vertical scrolling and overflow. Pressing the return key will insert a new line character.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.InputField.m_TextComponent">
            <summary>
            Text Text used to display the input's value.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.InputField.shouldHideMobileInput">
             <summary>
             Should the mobile keyboard input be hidden. This allows for input to happen with a caret in the InputField instead of a OS input box above the keyboard.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public InputField mainInputField;
            
                 public void Start()
                 {
                     //This setting can be toggled in the inspector.
                     mainInputField.shouldHideMobileInput = true;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.InputField.shouldActivateOnSelect">
            <summary>
            Should the inputfield be automatically activated upon selection.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.InputField.text">
             <summary>
             Input field's current text value. This is not necessarily the same as what is visible on screen.
             </summary>
             <remarks>
             Note that null is invalid value  for InputField.text.
             </remarks>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public InputField mainInputField;
            
                 public void Start()
                 {
                     mainInputField.text = "Enter Text Here...";
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.InputField.SetTextWithoutNotify(System.String)">
            <summary>
            Set the current text value of the Input field without invoking onValueChanged.
            </summary>
            <remarks>
            This is not necessarily the same as what is visible on screen.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.InputField.isFocused">
             <summary>
             Whether the InputField has focus and whether it is able to process events.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public GameObject mainInputField;
            
                 void Update()
                 {
                     //If the input field is focused, change its color to green.
                     if (mainInputField.GetComponent<InputField>().isFocused == true)
                     {
                         mainInputField.GetComponent<Image>().color = Color.green;
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.InputField.caretBlinkRate">
            <summary>
            The blinking rate of the input caret, defined as the number of times the blink cycle occurs per second.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.InputField.caretWidth">
            <summary>
            The width of the caret in pixels.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.InputField.textComponent">
            <summary>
            The Text component that is going to be used to render the text to screen.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.InputField.placeholder">
            <summary>
            This is an optional ‘empty’ graphic to show that the InputField text field is empty. Note that this ‘empty' graphic still displays even when the InputField is selected (that is; when there is focus on it).
            A placeholder graphic can be used to show subtle hints or make it more obvious that the control is an InputField.
            </summary>
            <remarks>
            If a Text component is used as the placeholder, it's recommended to make the placeholder text look different from the real text of the InputField so they are not easily confused. For example, the placeholder text might be a more subtle color or have lower alpha value.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.InputField.caretColor">
            <summary>
            The custom caret color used if customCaretColor is set.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.InputField.customCaretColor">
            <summary>
            Should a custom caret color be used or should the textComponent.color be used.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.InputField.selectionColor">
             <summary>
             The color of the highlight to show which characters are selected.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public InputField mainInputField;
            
                 // Changes the color of the highlight that shows what characters are selected.
                 void ChangeSelectionColor()
                 {
                     mainInputField.selectionColor = Color.red;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.InputField.onEndEdit">
             <summary>
             The Unity Event to call when editing has ended
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public InputField mainInputField;
            
                 // Checks if there is anything entered into the input field.
                 void LockInput(InputField input)
                 {
                     if (input.text.Length > 0)
                     {
                         Debug.Log("Text has been entered");
                     }
                     else if (input.text.Length == 0)
                     {
                         Debug.Log("Main Input Empty");
                     }
                 }
            
                 public void Start()
                 {
                     //Adds a listener that invokes the "LockInput" method when the player finishes editing the main input field.
                     //Passes the main input field into the method when "LockInput" is invoked
                     mainInputField.onEndEdit.AddListener(delegate {LockInput(mainInputField); });
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.InputField.onSubmit">
             <summary>
             The Unity Event to call when editing has ended
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public InputField mainInputField;
            
                 // Checks if there is anything entered into the input field.
                 void LockInput(InputField input)
                 {
                     if (input.text.Length > 0)
                     {
                         Debug.Log("Text has been entered");
                     }
                     else if (input.text.Length == 0)
                     {
                         Debug.Log("Main Input Empty");
                     }
                 }
            
                 public void Start()
                 {
                     //Adds a listener that invokes the "LockInput" method when the player finishes editing the main input field.
                     //Passes the main input field into the method when "LockInput" is invoked
                     mainInputField.onSubmit.AddListener(delegate {LockInput(mainInputField); });
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.InputField.onValueChanged">
             <summary>
             Accessor to the OnChangeEvent.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public InputField mainInputField;
            
                 public void Start()
                 {
                     //Adds a listener to the main input field and invokes a method when the value changes.
                     mainInputField.onValueChange.AddListener(delegate {ValueChangeCheck(); });
                 }
            
                 // Invoked when the value of the text field changes.
                 public void ValueChangeCheck()
                 {
                     Debug.Log("Value Changed");
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.InputField.onValidateInput">
             <summary>
             The function to call to validate the input characters.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public InputField mainInputField;
            
                 public void Start()
                 {
                     // Sets the MyValidate method to invoke after the input field's default input validation invoke (default validation happens every time a character is entered into the text field.)
                     mainInputField.onValidateInput += delegate(string input, int charIndex, char addedChar) { return MyValidate(addedChar); };
                 }
            
                 private char MyValidate(char charToValidate)
                 {
                     //Checks if a dollar sign is entered....
                     if (charToValidate == '$')
                     {
                         // ... if it is change it to an empty character.
                         charToValidate = '\0';
                     }
                     return charToValidate;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.InputField.characterLimit">
             <summary>
             How many characters the input field is limited to. 0 = infinite.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public InputField mainInputField;
                 public string playerName;
            
                 void Start()
                 {
                     //Changes the character limit in the main input field.
                     mainInputField.characterLimit = playerName.Length;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.InputField.contentType">
             <summary>
             Specifies the type of the input text content.
             </summary>
             <remarks>
             The ContentType affects character validation, keyboard type used (on platforms with on-screen keyboards), whether the InputField accepts multiple lines, and whether the text is autocorrected (on platforms that offer input auto-correction) or is treated as a password where the characters are not shown directly.
             </remarks>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public InputField mainInputField;
                 public string playerName;
            
                 void Start()
                 {
                     //Changes the character limit in the main input field.
                     mainInputField.characterLimit = playerName.Length;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.InputField.lineType">
             <summary>
             The LineType used by the InputField.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public GameObject mainInputField;
            
                 //When you press a button, this method is called.
                 public void ChangeInputField(int type)
                 {
                     if (type == 0)
                     {
                         //Change the input field to "Single Line" line type.
                         mainInputField.GetComponent<InputField>().lineType = InputField.LineType.SingleLine;
                     }
                     else if (type == 1)
                     {
                         //Change the input field to "MultiLine Newline" line type.
                         mainInputField.GetComponent<InputField>().lineType = InputField.LineType.MultiLineNewline;
                     }
                     else if (type == 2)
                     {
                         //Change the input field to "MultiLine Submit" line type.
                         mainInputField.GetComponent<InputField>().lineType = InputField.LineType.MultiLineSubmit;
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.InputField.inputType">
            <summary>
            The type of input expected. See InputField.InputType.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.InputField.touchScreenKeyboard">
            <summary>
            The TouchScreenKeyboard being used to edit the Input Field.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.InputField.keyboardType">
            <summary>
            They type of mobile keyboard that will be used.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.InputField.characterValidation">
            <summary>
            The type of validation to perform on a character
            </summary>
        </member>
        <member name="P:UnityEngine.UI.InputField.readOnly">
            <summary>
            Set the InputField to be read only.
            </summary>
            <remarks>
            Setting read only allows for highlighting of text without allowing modifications via keyboard.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.InputField.multiLine">
             <summary>
             If the input field supports multiple lines.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public InputField mainInputField;
            
                 public void Update()
                 {
                     //Check to see if the input field is set to allow multiple lines.
                     if (mainInputField.multiLine)
                     {
                         //Set the input field to only allow Single Lines, if it is currently set to allow Multiple lines.
                         mainInputField.lineType = InputField.LineType.SingleLine;
                         //Print to console
                         Debug.Log("The main input field is now set to allow single lines only!");
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.InputField.asteriskChar">
             <summary>
             The character used to hide text in password field.
             </summary>
             <remarks>
             Not shown in the inspector.
             </remarks>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public InputField mainInputField;
            
                 void Start()
                 {
                     // changes the password symbol. 0 = $, 1 = ! 2 = £ and so on.
                     mainInputField.asteriskChar = "$!£%&*"[0];
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.InputField.wasCanceled">
            <summary>
            If the InputField was canceled and will revert back to the original text upon DeactivateInputField.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.InputField.ClampPos(System.Int32@)">
            <summary>
            Clamp a value (by reference) between 0 and the current text length.
            </summary>
            <param name="pos">The input position to be clampped</param>
        </member>
        <member name="P:UnityEngine.UI.InputField.caretPositionInternal">
            <summary>
            Current position of the cursor.
            Getters are public Setters are protected
            </summary>
        </member>
        <member name="P:UnityEngine.UI.InputField.caretPosition">
            <summary>
            Get: Returns the focus position as thats the position that moves around even during selection.
            Set: Set both the anchor and focus position such that a selection doesn't happen
            </summary>
        </member>
        <member name="P:UnityEngine.UI.InputField.selectionAnchorPosition">
            <summary>
            The beginning point of the selection.
            </summary>
            <remarks>
            When making a selection with a mouse, the anchor is where in the document the mouse button is initially pressed.
            Get: Returns the beginning position of selection
            Set: If Input.compositionString is 0 set the fixed position.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.InputField.selectionFocusPosition">
            <summary>
            The end point of the selection.
            </summary>
            <remarks>
            When making a selection with a mouse, the focus is where in the document the mouse button is released.
            Get: Returns the end position of selection
            Set: If Input.compositionString is 0 set the variable position.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.InputField.OnFocus">
             <summary>
             Focus the input field initializing properties.
             </summary>
             <remarks>
             Handles what happens after a user selects an InputField. This is a protected property. To return the focus state use InputField.isFocused. To shift focus to another GameObject, use EventSystem.SetSelectedGameObject.
             A common use of this is allowing the user to type once focussed. Another way is outputting a message when the user clicks on a field(often seen when creating passwords).
             </remarks>
             <example>
             //Create an Input Field by going to __Create__>__UI__>__Input Field__. Attach this script to the Input Field GameObject
             <code>
             <![CDATA[
             using UnityEngine;
             using UnityEngine.UI;
            
             public class Example : MonoBehaviour
             {
                 InputField m_InputField;
                 void Start()
                 {
                     //Fetch the Input Field component from the GameObject
                     m_InputField = GetComponent<InputField>();
                 }
            
                 void Update()
                 {
                     //Check if the Input Field is in focus and able to alter
                     if (m_InputField.isFocused)
                     {
                         //Change the Color of the Input Field's Image to green
                         m_InputField.GetComponent<Image>().color = Color.green;
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.InputField.SelectAll">
            <summary>
            Highlight the whole InputField.
            </summary>
            <remarks>
            Sets the caretPosition to the length of the text and caretSelectPos to 0.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.InputField.MoveTextEnd(System.Boolean)">
            <summary>
            Move the caret index to end of text.
            </summary>
            <param name="shift">Only move the selection position to facilate selection</param>
        </member>
        <member name="M:UnityEngine.UI.InputField.MoveTextStart(System.Boolean)">
            <summary>
            Move the caret index to start of text.
            </summary>
            <param name="shift">Only move the selection position to facilate selection</param>
        </member>
        <member name="M:UnityEngine.UI.InputField.LateUpdate">
            <summary>
            Update the text based on input.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.InputField.GetCharacterIndexFromPosition(UnityEngine.Vector2)">
            <summary>
            Given an input position in local space on the Text return the index for the selection cursor at this position.
            </summary>
            <param name="pos">Mouse position.</param>
            <returns>Character index with in value.</returns>
        </member>
        <member name="M:UnityEngine.UI.InputField.OnBeginDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Capture the OnBeginDrag callback from the EventSystem and ensure we should listen to the drag events to follow.
            </summary>
            <param name="eventData">The data passed by the EventSystem</param>
        </member>
        <member name="M:UnityEngine.UI.InputField.OnDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            If we are able to drag, try and select the character range underneath the bounding rect.
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="M:UnityEngine.UI.InputField.OnEndDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Capture the OnEndDrag callback from the EventSystem and cancel the listening of drag events.
            </summary>
            <param name="eventData">The eventData sent by the EventSystem.</param>
        </member>
        <member name="M:UnityEngine.UI.InputField.OnPointerDown(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            The action to perform when the event system sends a pointer down Event.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.InputField.KeyPressed(UnityEngine.Event)">
            <summary>
            Process the Event and perform the appropriate action for that key.
            </summary>
            <param name="evt">The Event that is currently being processed.</param>
            <returns>If we should continue processing events or we have hit an end condition.</returns>
        </member>
        <member name="F:UnityEngine.UI.InputField.m_ProcessingEvent">
            <summary>
            Handle the specified event.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.InputField.ProcessEvent(UnityEngine.Event)">
            <summary>
            Helper function to allow separate events to be processed by the InputField.
            </summary>
            <param name="e">The Event to process</param>
        </member>
        <member name="M:UnityEngine.UI.InputField.OnUpdateSelected(UnityEngine.EventSystems.BaseEventData)">
            <summary>
            What to do when the event system sends a Update selected Event.
            </summary>
            <param name="eventData">The data on which to process.</param>
        </member>
        <member name="M:UnityEngine.UI.InputField.LineUpCharacterPosition(System.Int32,System.Boolean)">
            <summary>
             Use cachedInputTextGenerator as the y component for the UICharInfo is not required
            </summary>
        </member>
        <member name="M:UnityEngine.UI.InputField.LineDownCharacterPosition(System.Int32,System.Boolean)">
            <summary>
             Use cachedInputTextGenerator as the y component for the UICharInfo is not required
            </summary>
        </member>
        <member name="M:UnityEngine.UI.InputField.SendOnEndEdit">
            <summary>
            Convenience function to make functionality to send the ::ref::EndEditEvent easier.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.InputField.SendOnSubmit">
            <summary>
            Convenience function to make functionality to send the ::ref::SubmitEvent easier.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.InputField.Append(System.String)">
            <summary>
            Append the specified text to the end of the current text string. Appends character by character testing validation criteria.
            </summary>
            <param name="input">The String to append.</param>
        </member>
        <member name="M:UnityEngine.UI.InputField.Append(System.Char)">
            <summary>
            Append a character to the input field, taking into account the validation of each character.
            </summary>
            <param name="input">Character to append.</param>
        </member>
        <member name="M:UnityEngine.UI.InputField.UpdateLabel">
            <summary>
            Update the Text associated with this input field.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.InputField.ForceLabelUpdate">
            <summary>
            Force the label to update immediatly. This will recalculate the positioning of the caret and the visible text.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.InputField.Rebuild(UnityEngine.UI.CanvasUpdate)">
            <summary>
            Rebuild the input fields geometry. (caret and highlight).
            </summary>
            <param name="update">Which update loop we are in.</param>
        </member>
        <member name="M:UnityEngine.UI.InputField.LayoutComplete">
            <summary>
            See ICanvasElement.LayoutComplete. Does nothing by default.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.InputField.GraphicUpdateComplete">
            <summary>
            See ICanvasElement.GraphicUpdateComplete. Does nothing by default.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.InputField.Validate(System.String,System.Int32,System.Char)">
            <summary>
            Predefined validation functionality for different characterValidation types.
            </summary>
            <param name="text">The whole text string to validate.</param>
            <param name="pos">The position at which the current character is being inserted.</param>
            <param name="ch">The character that is being inserted</param>
            <returns>The character that should be inserted.</returns>
        </member>
        <member name="M:UnityEngine.UI.InputField.ActivateInputField">
             <summary>
             Function to activate the InputField to begin processing Events.
             </summary>
             <remarks>
             Will only activate if deactivated.
             </remarks>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;
            
             public class Example : MonoBehaviour
             {
                 public InputField mainInputField;
            
                 // Activate the main input field when the scene starts.
                 void Start()
                 {
                     mainInputField.ActivateInputField();
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.InputField.OnSelect(UnityEngine.EventSystems.BaseEventData)">
            <summary>
            What to do when the event system sends a submit Event.
            </summary>
            <param name="eventData">The data on which to process</param>
        </member>
        <member name="M:UnityEngine.UI.InputField.OnPointerClick(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            What to do when the event system sends a pointer click Event
            </summary>
            <param name="eventData">The data on which to process</param>
        </member>
        <member name="M:UnityEngine.UI.InputField.DeactivateInputField">
             <summary>
             Function to deactivate the InputField to stop the processing of Events and send OnSubmit if not canceled.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class Example : MonoBehaviour
             {
                 public InputField mainInputField;
            
                 // Deactivates the main input field when the scene starts.
                 void Start()
                 {
                     mainInputField.DeactivateInputField();
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.InputField.OnDeselect(UnityEngine.EventSystems.BaseEventData)">
            <summary>
            What to do when the event system sends a Deselect Event. Defaults to deactivating the inputfield.
            </summary>
            <param name="eventData">The data sent by the EventSystem</param>
        </member>
        <member name="M:UnityEngine.UI.InputField.CalculateLayoutInputHorizontal">
            <summary>
            See ILayoutElement.CalculateLayoutInputHorizontal.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.InputField.CalculateLayoutInputVertical">
            <summary>
            See ILayoutElement.CalculateLayoutInputVertical.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.InputField.minWidth">
            <summary>
            See ILayoutElement.minWidth.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.InputField.preferredWidth">
            <summary>
            Get the displayed with of all input characters.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.InputField.flexibleWidth">
            <summary>
            See ILayoutElement.flexibleWidth.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.InputField.minHeight">
            <summary>
            See ILayoutElement.minHeight.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.InputField.preferredHeight">
            <summary>
            Get the height of all the text if constrained to the height of the RectTransform.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.InputField.flexibleHeight">
            <summary>
            See ILayoutElement.flexibleHeight.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.InputField.layoutPriority">
            <summary>
            See ILayoutElement.layoutPriority.
            </summary>
        </member>
        <member name="T:UnityEngine.UI.GraphicRegistry">
            <summary>
              Registry which maps a Graphic to the canvas it belongs to.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.GraphicRegistry.instance">
            <summary>
            The singleton instance of the GraphicRegistry. Creates a new instance if it does not exist.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.GraphicRegistry.RegisterGraphicForCanvas(UnityEngine.Canvas,UnityEngine.UI.Graphic)">
            <summary>
            Associates a Graphic with a Canvas and stores this association in the registry.
            </summary>
            <param name="c">The canvas being associated with the Graphic.</param>
            <param name="graphic">The Graphic being associated with the Canvas.</param>
        </member>
        <member name="M:UnityEngine.UI.GraphicRegistry.RegisterRaycastGraphicForCanvas(UnityEngine.Canvas,UnityEngine.UI.Graphic)">
            <summary>
            Associates a raycastable Graphic with a Canvas and stores this association in the registry.
            </summary>
            <param name="c">The canvas being associated with the Graphic.</param>
            <param name="graphic">The Graphic being associated with the Canvas.</param>
        </member>
        <member name="M:UnityEngine.UI.GraphicRegistry.UnregisterGraphicForCanvas(UnityEngine.Canvas,UnityEngine.UI.Graphic)">
            <summary>
            Dissociates a Graphic from a Canvas, removing this association from the registry.
            </summary>
            <param name="c">The Canvas to dissociate from the Graphic.</param>
            <param name="graphic">The Graphic to dissociate from the Canvas.</param>
        </member>
        <member name="M:UnityEngine.UI.GraphicRegistry.UnregisterRaycastGraphicForCanvas(UnityEngine.Canvas,UnityEngine.UI.Graphic)">
            <summary>
            Dissociates a Graphic from a Canvas, removing this association from the registry.
            </summary>
            <param name="c">The Canvas to dissociate from the Graphic.</param>
            <param name="graphic">The Graphic to dissociate from the Canvas.</param>
        </member>
        <member name="M:UnityEngine.UI.GraphicRegistry.DisableGraphicForCanvas(UnityEngine.Canvas,UnityEngine.UI.Graphic)">
            <summary>
            Disables a Graphic from a Canvas, disabling this association from the registry.
            </summary>
            <param name="c">The Canvas to dissociate from the Graphic.</param>
            <param name="graphic">The Graphic to dissociate from the Canvas.</param>
        </member>
        <member name="M:UnityEngine.UI.GraphicRegistry.DisableRaycastGraphicForCanvas(UnityEngine.Canvas,UnityEngine.UI.Graphic)">
            <summary>
            Disables the raycast for a Graphic from a Canvas, disabling this association from the registry.
            </summary>
            <param name="c">The Canvas to dissociate from the Graphic.</param>
            <param name="graphic">The Graphic to dissociate from the Canvas.</param>
        </member>
        <member name="M:UnityEngine.UI.GraphicRegistry.GetGraphicsForCanvas(UnityEngine.Canvas)">
            <summary>
            Retrieves the list of Graphics associated with a Canvas.
            </summary>
            <param name="canvas">The Canvas to search</param>
            <returns>Returns a list of Graphics. Returns an empty list if no Graphics are associated with the specified Canvas.</returns>
        </member>
        <member name="M:UnityEngine.UI.GraphicRegistry.GetRaycastableGraphicsForCanvas(UnityEngine.Canvas)">
            <summary>
            Retrieves the list of Graphics that are raycastable and associated with a Canvas.
            </summary>
            <param name="canvas">The Canvas to search</param>
            <returns>Returns a list of Graphics. Returns an empty list if no Graphics are associated with the specified Canvas.</returns>
        </member>
        <member name="T:UnityEngine.UI.FontUpdateTracker">
            <summary>
            Utility class that is used to help with Text update.
            </summary>
            <remarks>
            When Unity rebuilds a font atlas a callback is sent to the font. Using this class you can register your text as needing to be rebuilt if the font atlas is updated.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.FontUpdateTracker.TrackText(UnityEngine.UI.Text)">
            <summary>
            Register a Text element for receiving texture atlas rebuild calls.
            </summary>
            <param name="t">The Text object to track</param>
        </member>
        <member name="M:UnityEngine.UI.FontUpdateTracker.UntrackText(UnityEngine.UI.Text)">
            <summary>
            Deregister a Text element from receiving texture atlas rebuild calls.
            </summary>
            <param name="t">The Text object to no longer track</param>
        </member>
        <member name="P:UnityEngine.UI.Dropdown.OptionData.text">
            <summary>
            The text associated with the option.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Dropdown.OptionData.image">
            <summary>
            The image associated with the option.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Dropdown.OptionData.#ctor(System.String,UnityEngine.Sprite)">
            <summary>
            Create an object representing a single option for the dropdown list.
            </summary>
            <param name="text">Optional text for the option.</param>
            <param name="image">Optional image for the option.</param>
        </member>
        <member name="P:UnityEngine.UI.Dropdown.OptionDataList.options">
            <summary>
            The list of options for the dropdown list.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Dropdown.template">
            <summary>
            The Rect Transform of the template for the dropdown list.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Dropdown.captionText">
            <summary>
            The Text component to hold the text of the currently selected option.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Dropdown.captionImage">
            <summary>
            The Image component to hold the image of the currently selected option.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Dropdown.itemText">
            <summary>
            The Text component to hold the text of the item.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Dropdown.itemImage">
            <summary>
            The Image component to hold the image of the item
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Dropdown.options">
             <summary>
             The list of possible options. A text string and an image can be specified for each option.
             </summary>
             <remarks>
             This is the list of options within the Dropdown. Each option contains Text and/or image data that you can specify using UI.Dropdown.OptionData before adding to the Dropdown list.
             This also unlocks the ability to edit the Dropdown, including the insertion, removal, and finding of options, as well as other useful tools
             </remarks>
             /// <example>
             <code>
             <![CDATA[
             //Create a new Dropdown GameObject by going to the Hierarchy and clicking __Create__>__UI__>__Dropdown__. Attach this script to the Dropdown GameObject.
            
             using UnityEngine;
             using UnityEngine.UI;
             using System.Collections.Generic;
            
             public class Example : MonoBehaviour
             {
                 //Use these for adding options to the Dropdown List
                 Dropdown.OptionData m_NewData, m_NewData2;
                 //The list of messages for the Dropdown
                 List<Dropdown.OptionData> m_Messages = new List<Dropdown.OptionData>();
            
            
                 //This is the Dropdown
                 Dropdown m_Dropdown;
                 string m_MyString;
                 int m_Index;
            
                 void Start()
                 {
                     //Fetch the Dropdown GameObject the script is attached to
                     m_Dropdown = GetComponent<Dropdown>();
                     //Clear the old options of the Dropdown menu
                     m_Dropdown.ClearOptions();
            
                     //Create a new option for the Dropdown menu which reads "Option 1" and add to messages List
                     m_NewData = new Dropdown.OptionData();
                     m_NewData.text = "Option 1";
                     m_Messages.Add(m_NewData);
            
                     //Create a new option for the Dropdown menu which reads "Option 2" and add to messages List
                     m_NewData2 = new Dropdown.OptionData();
                     m_NewData2.text = "Option 2";
                     m_Messages.Add(m_NewData2);
            
                     //Take each entry in the message List
                     foreach (Dropdown.OptionData message in m_Messages)
                     {
                         //Add each entry to the Dropdown
                         m_Dropdown.options.Add(message);
                         //Make the index equal to the total number of entries
                         m_Index = m_Messages.Count - 1;
                     }
                 }
            
                 //This OnGUI function is used here for a quick demonstration. See the [[wiki:UISystem|UI Section]] for more information about setting up your own UI.
                 void OnGUI()
                 {
                     //TextField for user to type new entry to add to Dropdown
                     m_MyString = GUI.TextField(new Rect(0, 40, 100, 40), m_MyString);
            
                     //Press the "Add" Button to add a new entry to the Dropdown
                     if (GUI.Button(new Rect(0, 0, 100, 40), "Add"))
                     {
                         //Make the index the last number of entries
                         m_Index = m_Messages.Count;
                         //Create a temporary option
                         Dropdown.OptionData temp = new Dropdown.OptionData();
                         //Make the option the data from the TextField
                         temp.text = m_MyString;
            
                         //Update the messages list with the TextField data
                         m_Messages.Add(temp);
            
                         //Add the Textfield data to the Dropdown
                         m_Dropdown.options.Insert(m_Index, temp);
                     }
            
                     //Press the "Remove" button to delete the selected option
                     if (GUI.Button(new Rect(110, 0, 100, 40), "Remove"))
                     {
                         //Remove the current selected item from the Dropdown from the messages List
                         m_Messages.RemoveAt(m_Dropdown.value);
                         //Remove the current selection from the Dropdown
                         m_Dropdown.options.RemoveAt(m_Dropdown.value);
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Dropdown.onValueChanged">
             <summary>
             A UnityEvent that is invoked when when a user has clicked one of the options in the dropdown list.
             </summary>
             <remarks>
             Use this to detect when a user selects one or more options in the Dropdown. Add a listener to perform an action when this UnityEvent detects a selection by the user. See https://unity3d.com/learn/tutorials/topics/scripting/delegates for more information on delegates.
             </remarks>
             <example>
             <code>
             <![CDATA[
             //Create a new Dropdown GameObject by going to the Hierarchy and clicking Create>UI>Dropdown. Attach this script to the Dropdown GameObject.
             //Set your own Text in the Inspector window
            
             using UnityEngine;
             using UnityEngine.UI;
            
             public class Example : MonoBehaviour
             {
                 Dropdown m_Dropdown;
                 public Text m_Text;
            
                 void Start()
                 {
                     //Fetch the Dropdown GameObject
                     m_Dropdown = GetComponent<Dropdown>();
                     //Add listener for when the value of the Dropdown changes, to take action
                     m_Dropdown.onValueChanged.AddListener(delegate {
                             DropdownValueChanged(m_Dropdown);
                         });
            
                     //Initialise the Text to say the first value of the Dropdown
                     m_Text.text = "First Value : " + m_Dropdown.value;
                 }
            
                 //Ouput the new value of the Dropdown into Text
                 void DropdownValueChanged(Dropdown change)
                 {
                     m_Text.text =  "New Value : " + change.value;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Dropdown.alphaFadeSpeed">
            <summary>
            The time interval at which a drop down will appear and disappear
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Dropdown.value">
             <summary>
             The Value is the index number of the current selection in the Dropdown. 0 is the first option in the Dropdown, 1 is the second, and so on.
             </summary>
             <example>
             <code>
             <![CDATA[
             //Create a new Dropdown GameObject by going to the Hierarchy and clicking __Create__>__UI__>__Dropdown__. Attach this script to the Dropdown GameObject.
             //Set your own Text in the Inspector window
            
             using UnityEngine;
             using UnityEngine.UI;
            
             public class Example : MonoBehaviour
             {
                 //Attach this script to a Dropdown GameObject
                 Dropdown m_Dropdown;
                 //This is the string that stores the current selection m_Text of the Dropdown
                 string m_Message;
                 //This Text outputs the current selection to the screen
                 public Text m_Text;
                 //This is the index value of the Dropdown
                 int m_DropdownValue;
            
                 void Start()
                 {
                     //Fetch the DropDown component from the GameObject
                     m_Dropdown = GetComponent<Dropdown>();
                     //Output the first Dropdown index value
                     Debug.Log("Starting Dropdown Value : " + m_Dropdown.value);
                 }
            
                 void Update()
                 {
                     //Keep the current index of the Dropdown in a variable
                     m_DropdownValue = m_Dropdown.value;
                     //Change the message to say the name of the current Dropdown selection using the value
                     m_Message = m_Dropdown.options[m_DropdownValue].text;
                     //Change the onscreen Text to reflect the current Dropdown selection
                     m_Text.text = m_Message;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.Dropdown.SetValueWithoutNotify(System.Int32)">
            <summary>
            Set index number of the current selection in the Dropdown without invoking onValueChanged callback.
            </summary>
            <param name="input"> The new index for the current selection. </param>
        </member>
        <member name="M:UnityEngine.UI.Dropdown.RefreshShownValue">
            <summary>
            Refreshes the text and image (if available) of the currently selected option.
            </summary>
            <remarks>
            If you have modified the list of options, you should call this method afterwards to ensure that the visual state of the dropdown corresponds to the updated options.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.Dropdown.AddOptions(System.Collections.Generic.List{UnityEngine.UI.Dropdown.OptionData})">
            <summary>
            Add multiple options to the options of the Dropdown based on a list of OptionData objects.
            </summary>
            <param name="options">The list of OptionData to add.</param>
            <remarks>
            <![CDATA[
            See AddOptions(List<string> options) for code example of usages.
            ]]>
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.Dropdown.AddOptions(System.Collections.Generic.List{System.String})">
             <summary>
             Add multiple text-only options to the options of the Dropdown based on a list of strings.
             </summary>
             <remarks>
             Add a List of string messages to the Dropdown. The Dropdown shows each member of the list as a separate option.
             </remarks>
             <param name="options">The list of text strings to add.</param>
             <example>
             <code>
             <![CDATA[
             //Create a new Dropdown GameObject by going to the Hierarchy and clicking Create>UI>Dropdown. Attach this script to the Dropdown GameObject.
            
             using System.Collections.Generic;
             using UnityEngine;
             using UnityEngine.UI;
            
             public class Example : MonoBehaviour
             {
                 //Create a List of new Dropdown options
                 List<string> m_DropOptions = new List<string> { "Option 1", "Option 2"};
                 //This is the Dropdown
                 Dropdown m_Dropdown;
            
                 void Start()
                 {
                     //Fetch the Dropdown GameObject the script is attached to
                     m_Dropdown = GetComponent<Dropdown>();
                     //Clear the old options of the Dropdown menu
                     m_Dropdown.ClearOptions();
                     //Add the options created in the List above
                     m_Dropdown.AddOptions(m_DropOptions);
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.Dropdown.AddOptions(System.Collections.Generic.List{UnityEngine.Sprite})">
            <summary>
            Add multiple image-only options to the options of the Dropdown based on a list of Sprites.
            </summary>
            <param name="options">The list of Sprites to add.</param>
            <remarks>
            <![CDATA[
            See AddOptions(List<string> options) for code example of usages.
            ]]>
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.Dropdown.ClearOptions">
            <summary>
            Clear the list of options in the Dropdown.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Dropdown.OnPointerClick(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Handling for when the dropdown is initially 'clicked'. Typically shows the dropdown
            </summary>
            <param name="eventData">The asocciated event data.</param>
        </member>
        <member name="M:UnityEngine.UI.Dropdown.OnSubmit(UnityEngine.EventSystems.BaseEventData)">
            <summary>
            Handling for when the dropdown is selected and a submit event is processed. Typically shows the dropdown
            </summary>
            <param name="eventData">The asocciated event data.</param>
        </member>
        <member name="M:UnityEngine.UI.Dropdown.OnCancel(UnityEngine.EventSystems.BaseEventData)">
            <summary>
            This will hide the dropdown list.
            </summary>
            <remarks>
            Called by a BaseInputModule when a Cancel event occurs.
            </remarks>
            <param name="eventData">The asocciated event data.</param>
        </member>
        <member name="M:UnityEngine.UI.Dropdown.Show">
             <summary>
             Show the dropdown.
            
             Plan for dropdown scrolling to ensure dropdown is contained within screen.
            
             We assume the Canvas is the screen that the dropdown must be kept inside.
             This is always valid for screen space canvas modes.
             For world space canvases we don't know how it's used, but it could be e.g. for an in-game monitor.
             We consider it a fair constraint that the canvas must be big enough to contain dropdowns.
             </summary>
        </member>
        <member name="M:UnityEngine.UI.Dropdown.CreateBlocker(UnityEngine.Canvas)">
            <summary>
            Create a blocker that blocks clicks to other controls while the dropdown list is open.
            </summary>
            <remarks>
            Override this method to implement a different way to obtain a blocker GameObject.
            </remarks>
            <param name="rootCanvas">The root canvas the dropdown is under.</param>
            <returns>The created blocker object</returns>
        </member>
        <member name="M:UnityEngine.UI.Dropdown.DestroyBlocker(UnityEngine.GameObject)">
            <summary>
            Convenience method to explicitly destroy the previously generated blocker object
            </summary>
            <remarks>
            Override this method to implement a different way to dispose of a blocker GameObject that blocks clicks to other controls while the dropdown list is open.
            </remarks>
            <param name="blocker">The blocker object to destroy.</param>
        </member>
        <member name="M:UnityEngine.UI.Dropdown.CreateDropdownList(UnityEngine.GameObject)">
            <summary>
            Create the dropdown list to be shown when the dropdown is clicked. The dropdown list should correspond to the provided template GameObject, equivalent to instantiating a copy of it.
            </summary>
            <remarks>
            Override this method to implement a different way to obtain a dropdown list GameObject.
            </remarks>
            <param name="template">The template to create the dropdown list from.</param>
            <returns>The created drop down list gameobject.</returns>
        </member>
        <member name="M:UnityEngine.UI.Dropdown.DestroyDropdownList(UnityEngine.GameObject)">
            <summary>
            Convenience method to explicitly destroy the previously generated dropdown list
            </summary>
            <remarks>
            Override this method to implement a different way to dispose of a dropdown list GameObject.
            </remarks>
            <param name="dropdownList">The dropdown list GameObject to destroy</param>
        </member>
        <member name="M:UnityEngine.UI.Dropdown.CreateItem(UnityEngine.UI.Dropdown.DropdownItem)">
            <summary>
            Create a dropdown item based upon the item template.
            </summary>
            <remarks>
            Override this method to implement a different way to obtain an option item.
            The option item should correspond to the provided template DropdownItem and its GameObject, equivalent to instantiating a copy of it.
            </remarks>
            <param name="itemTemplate">e template to create the option item from.</param>
            <returns>The created dropdown item component</returns>
        </member>
        <member name="M:UnityEngine.UI.Dropdown.DestroyItem(UnityEngine.UI.Dropdown.DropdownItem)">
            <summary>
             Convenience method to explicitly destroy the previously generated Items.
            </summary>
            <remarks>
            Override this method to implement a different way to dispose of an option item.
            Likely no action needed since destroying the dropdown list destroys all contained items as well.
            </remarks>
            <param name="item">The Item to destroy.</param>
        </member>
        <member name="M:UnityEngine.UI.Dropdown.Hide">
            <summary>
            Hide the dropdown list. I.e. close it.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Shadow.effectColor">
            <summary>
            Color for the effect
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Shadow.effectDistance">
            <summary>
            How far is the shadow from the graphic.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Shadow.useGraphicAlpha">
            <summary>
            Should the shadow inherit the alpha from the graphic?
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Shadow.ApplyShadow(System.Collections.Generic.List{UnityEngine.UIVertex},UnityEngine.Color32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Duplicate vertices from start to end and turn them into shadows with the given offset.
            </summary>
            <param name="verts">Vert list to copy</param>
            <param name="color">Shadow color</param>
            <param name="start">The start index in the verts list</param>
            <param name="end">The end index in the vers list</param>
            <param name="x">The shadows x offset</param>
            <param name="y">The shadows y offset</param>
        </member>
        <member name="T:UnityEngine.UI.IMaterialModifier">
            <summary>
            Use this interface to modify a Material that renders a Graphic. The Material is modified before the it is passed to the CanvasRenderer.
            </summary>
            <remarks>
            When a Graphic sets a material that is passed (in order) to any components on the GameObject that implement IMaterialModifier. This component can modify the material to be used for rendering.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.IMaterialModifier.GetModifiedMaterial(UnityEngine.Material)">
            <summary>
            Perform material modification in this function.
            </summary>
            <param name="baseMaterial">The material that is to be modified</param>
            <returns>The modified material.</returns>
        </member>
        <member name="T:UnityEngine.UI.MaskUtilities">
            <summary>
            Mask related utility class. This class provides masking-specific utility functions.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.MaskUtilities.Notify2DMaskStateChanged(UnityEngine.Component)">
            <summary>
            Notify all IClippables under the given component that they need to recalculate clipping.
            </summary>
            <param name="mask">The object thats changed for whose children should be notified.</param>
        </member>
        <member name="M:UnityEngine.UI.MaskUtilities.NotifyStencilStateChanged(UnityEngine.Component)">
            <summary>
            Notify all IMaskable under the given component that they need to recalculate masking.
            </summary>
            <param name="mask">The object thats changed for whose children should be notified.</param>
        </member>
        <member name="M:UnityEngine.UI.MaskUtilities.FindRootSortOverrideCanvas(UnityEngine.Transform)">
            <summary>
            Find a root Canvas.
            </summary>
            <param name="start">Transform to start the search at going up the hierarchy.</param>
            <returns>Finds either the most root canvas, or the first canvas that overrides sorting.</returns>
        </member>
        <member name="M:UnityEngine.UI.MaskUtilities.GetStencilDepth(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Find the stencil depth for a given element.
            </summary>
            <param name="transform">The starting transform to search.</param>
            <param name="stopAfter">Where the search of parents should stop</param>
            <returns>What the proper stencil buffer index should be.</returns>
        </member>
        <member name="M:UnityEngine.UI.MaskUtilities.IsDescendantOrSelf(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Helper function to determine if the child is a descendant of father or is father.
            </summary>
            <param name="father">The transform to compare against.</param>
            <param name="child">The starting transform to search up the hierarchy.</param>
            <returns>Is child equal to father or is a descendant.</returns>
        </member>
        <member name="M:UnityEngine.UI.MaskUtilities.GetRectMaskForClippable(UnityEngine.UI.IClippable)">
            <summary>
            Find the correct RectMask2D for a given IClippable.
            </summary>
            <param name="clippable">Clippable to search from.</param>
            <returns>The Correct RectMask2D</returns>
        </member>
        <member name="M:UnityEngine.UI.MaskUtilities.GetRectMasksForClip(UnityEngine.UI.RectMask2D,System.Collections.Generic.List{UnityEngine.UI.RectMask2D})">
            <summary>
            Search for all RectMask2D that apply to the given RectMask2D (includes self).
            </summary>
            <param name="clipper">Starting clipping object.</param>
            <param name="masks">The list of Rect masks</param>
        </member>
        <member name="T:UnityEngine.UI.BaseMeshEffect">
             <summary>
             Base class for effects that modify the generated Mesh.
             </summary>
             <example>
             <code>
             <![CDATA[
            using UnityEngine;
            using UnityEngine.UI;
            
            public class PositionAsUV1 : BaseMeshEffect
            {
                protected PositionAsUV1()
                {}
            
                public override void ModifyMesh(Mesh mesh)
                {
                    if (!IsActive())
                        return;
            
                    var verts = mesh.vertices.ToList();
                    var uvs = ListPool<Vector2>.Get();
            
                    for (int i = 0; i < verts.Count; i++)
                    {
                        var vert = verts[i];
                        uvs.Add(new Vector2(verts[i].x, verts[i].y));
                        verts[i] = vert;
                    }
                    mesh.SetUVs(1, uvs);
                    ListPool<Vector2>.Release(uvs);
                }
            }
             ]]>
            </code>
            </example>
        </member>
        <member name="P:UnityEngine.UI.BaseMeshEffect.graphic">
            <summary>
            The graphic component that the Mesh Effect will aplly to.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.BaseMeshEffect.OnDidApplyAnimationProperties">
            <summary>
            Called from the native side any time a animation property is changed.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.BaseMeshEffect.ModifyMesh(UnityEngine.Mesh)">
            <summary>
            Function that is called when the Graphic is populating the mesh.
            </summary>
            <param name="mesh">The generated mesh of the Graphic element that needs modification.</param>
        </member>
        <member name="T:UnityEngine.UI.LayoutRebuilder">
            <summary>
            Wrapper class for managing layout rebuilding of CanvasElement.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.LayoutRebuilder.IsDestroyed">
            <summary>
            Has the native representation of this LayoutRebuilder been destroyed?
            </summary>
        </member>
        <member name="M:UnityEngine.UI.LayoutRebuilder.ForceRebuildLayoutImmediate(UnityEngine.RectTransform)">
            <summary>
            Forces an immediate rebuild of the layout element and child layout elements affected by the calculations.
            </summary>
            <param name="layoutRoot">The layout element to perform the layout rebuild on.</param>
            <remarks>
            Normal use of the layout system should not use this method. Instead MarkLayoutForRebuild should be used instead, which triggers a delayed layout rebuild during the next layout pass. The delayed rebuild automatically handles objects in the entire layout hierarchy in the correct order, and prevents multiple recalculations for the same layout elements.
            However, for special layout calculation needs, ::ref::ForceRebuildLayoutImmediate can be used to get the layout of a sub-tree resolved immediately. This can even be done from inside layout calculation methods such as ILayoutController.SetLayoutHorizontal orILayoutController.SetLayoutVertical. Usage should be restricted to cases where multiple layout passes are unavaoidable despite the extra cost in performance.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.LayoutRebuilder.MarkLayoutForRebuild(UnityEngine.RectTransform)">
            <summary>
            Mark the given RectTransform as needing it's layout to be recalculated during the next layout pass.
            </summary>
            <param name="rect">Rect to rebuild.</param>
        </member>
        <member name="M:UnityEngine.UI.LayoutRebuilder.Equals(System.Object)">
            <summary>
            Does the passed rebuilder point to the same CanvasElement.
            </summary>
            <param name="obj">The other object to compare</param>
            <returns>Are they equal</returns>
        </member>
        <member name="T:UnityEngine.UI.HorizontalOrVerticalLayoutGroup">
             <summary>
             Abstract base class for HorizontalLayoutGroup and VerticalLayoutGroup to generalize common functionality.
             </summary>
            
        </member>
        <member name="P:UnityEngine.UI.HorizontalOrVerticalLayoutGroup.spacing">
            <summary>
            The spacing to use between layout elements in the layout group.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.HorizontalOrVerticalLayoutGroup.childForceExpandWidth">
            <summary>
            Whether to force the children to expand to fill additional available horizontal space.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.HorizontalOrVerticalLayoutGroup.childForceExpandHeight">
            <summary>
            Whether to force the children to expand to fill additional available vertical space.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.HorizontalOrVerticalLayoutGroup.childControlWidth">
             <summary>
             Returns true if the Layout Group controls the widths of its children. Returns false if children control their own widths.
             </summary>
             <remarks>
             If set to false, the layout group will only affect the positions of the children while leaving the widths untouched. The widths of the children can be set via the respective RectTransforms in this case.
            
             If set to true, the widths of the children are automatically driven by the layout group according to their respective minimum, preferred, and flexible widths. This is useful if the widths of the children should change depending on how much space is available.In this case the width of each child cannot be set manually in the RectTransform, but the minimum, preferred and flexible width for each child can be controlled by adding a LayoutElement component to it.
             </remarks>
        </member>
        <member name="P:UnityEngine.UI.HorizontalOrVerticalLayoutGroup.childControlHeight">
             <summary>
             Returns true if the Layout Group controls the heights of its children. Returns false if children control their own heights.
             </summary>
             <remarks>
             If set to false, the layout group will only affect the positions of the children while leaving the heights untouched. The heights of the children can be set via the respective RectTransforms in this case.
            
             If set to true, the heights of the children are automatically driven by the layout group according to their respective minimum, preferred, and flexible heights. This is useful if the heights of the children should change depending on how much space is available.In this case the height of each child cannot be set manually in the RectTransform, but the minimum, preferred and flexible height for each child can be controlled by adding a LayoutElement component to it.
             </remarks>
        </member>
        <member name="P:UnityEngine.UI.HorizontalOrVerticalLayoutGroup.childScaleWidth">
            <summary>
            Whether to use the x scale of each child when calculating its width.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.HorizontalOrVerticalLayoutGroup.childScaleHeight">
            <summary>
            Whether to use the y scale of each child when calculating its height.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.HorizontalOrVerticalLayoutGroup.reverseArrangement">
            <summary>
            Whether the order of children objects should be sorted in reverse.
            </summary>
            <remarks>
            If False the first child object will be positioned first.
            If True the last child object will be positioned first.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.HorizontalOrVerticalLayoutGroup.CalcAlongAxis(System.Int32,System.Boolean)">
            <summary>
            Calculate the layout element properties for this layout element along the given axis.
            </summary>
            <param name="axis">The axis to calculate for. 0 is horizontal and 1 is vertical.</param>
            <param name="isVertical">Is this group a vertical group?</param>
        </member>
        <member name="M:UnityEngine.UI.HorizontalOrVerticalLayoutGroup.SetChildrenAlongAxis(System.Int32,System.Boolean)">
            <summary>
            Set the positions and sizes of the child layout elements for the given axis.
            </summary>
            <param name="axis">The axis to handle. 0 is horizontal and 1 is vertical.</param>
            <param name="isVertical">Is this group a vertical group?</param>
        </member>
        <member name="T:UnityEngine.UI.IMeshModifier">
            <summary>
            Interface which allows for the modification of verticies in a Graphic before they are passed to the CanvasRenderer.
            When a Graphic generates a list of vertices they are passed (in order) to any components on the GameObject that implement IMeshModifier. This component can modify the given Mesh.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.IMeshModifier.ModifyMesh(UnityEngine.UI.VertexHelper)">
            <summary>
            Call used to modify mesh.
            Place any custom mesh processing in this function.
            </summary>
        </member>
        <member name="T:UnityEngine.UI.AspectRatioFitter.AspectMode">
            <summary>
            Specifies a mode to use to enforce an aspect ratio.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.AspectRatioFitter.AspectMode.None">
            <summary>
            The aspect ratio is not enforced
            </summary>
        </member>
        <member name="F:UnityEngine.UI.AspectRatioFitter.AspectMode.WidthControlsHeight">
            <summary>
            Changes the height of the rectangle to match the aspect ratio.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.AspectRatioFitter.AspectMode.HeightControlsWidth">
            <summary>
            Changes the width of the rectangle to match the aspect ratio.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.AspectRatioFitter.AspectMode.FitInParent">
            <summary>
            Sizes the rectangle such that it's fully contained within the parent rectangle.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.AspectRatioFitter.AspectMode.EnvelopeParent">
            <summary>
            Sizes the rectangle such that the parent rectangle is fully contained within.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.AspectRatioFitter.aspectMode">
            <summary>
            The mode to use to enforce the aspect ratio.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.AspectRatioFitter.aspectRatio">
            <summary>
            The aspect ratio to enforce. This means width divided by height.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.AspectRatioFitter.Update">
            <summary>
            Update the rect based on the delayed dirty.
            Got around issue of calling onValidate from OnEnable function.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.AspectRatioFitter.OnRectTransformDimensionsChange">
            <summary>
            Function called when this RectTransform or parent RectTransform has changed dimensions.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.AspectRatioFitter.SetLayoutHorizontal">
            <summary>
            Method called by the layout system. Has no effect
            </summary>
        </member>
        <member name="M:UnityEngine.UI.AspectRatioFitter.SetLayoutVertical">
            <summary>
            Method called by the layout system. Has no effect
            </summary>
        </member>
        <member name="M:UnityEngine.UI.AspectRatioFitter.SetDirty">
            <summary>
            Mark the AspectRatioFitter as dirty.
            </summary>
        </member>
        <member name="T:UnityEngine.UI.Misc">
            <summary>
            Helper class containing generic functions used throughout the UI library.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Misc.Destroy(UnityEngine.Object)">
            <summary>
            Destroy the specified object, immediately if in edit mode.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Misc.DestroyImmediate(UnityEngine.Object)">
            <summary>
            Destroy the specified object immediately, unless not in the editor, in which case the regular Destroy is used instead.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.LayoutGroup.padding">
            <summary>
            The padding to add around the child layout elements.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.LayoutGroup.childAlignment">
            <summary>
            The alignment to use for the child layout elements in the layout group.
            </summary>
            <remarks>
            If a layout element does not specify a flexible width or height, its child elements many not use the available space within the layout group. In this case, use the alignment settings to specify how to align child elements within their layout group.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.LayoutGroup.minWidth">
            <summary>
            See LayoutElement.minWidth
            </summary>
        </member>
        <member name="P:UnityEngine.UI.LayoutGroup.preferredWidth">
            <summary>
            See LayoutElement.preferredWidth
            </summary>
        </member>
        <member name="P:UnityEngine.UI.LayoutGroup.flexibleWidth">
            <summary>
            See LayoutElement.flexibleWidth
            </summary>
        </member>
        <member name="P:UnityEngine.UI.LayoutGroup.minHeight">
            <summary>
            See LayoutElement.minHeight
            </summary>
        </member>
        <member name="P:UnityEngine.UI.LayoutGroup.preferredHeight">
            <summary>
            See LayoutElement.preferredHeight
            </summary>
        </member>
        <member name="P:UnityEngine.UI.LayoutGroup.flexibleHeight">
            <summary>
            See LayoutElement.flexibleHeight
            </summary>
        </member>
        <member name="P:UnityEngine.UI.LayoutGroup.layoutPriority">
            <summary>
            See LayoutElement.layoutPriority
            </summary>
        </member>
        <member name="M:UnityEngine.UI.LayoutGroup.OnDidApplyAnimationProperties">
            <summary>
            Callback for when properties have been changed by animation.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.LayoutGroup.GetTotalMinSize(System.Int32)">
            <summary>
            The min size for the layout group on the given axis.
            </summary>
            <param name="axis">The axis index. 0 is horizontal and 1 is vertical.</param>
            <returns>The min size</returns>
        </member>
        <member name="M:UnityEngine.UI.LayoutGroup.GetTotalPreferredSize(System.Int32)">
            <summary>
            The preferred size for the layout group on the given axis.
            </summary>
            <param name="axis">The axis index. 0 is horizontal and 1 is vertical.</param>
            <returns>The preferred size.</returns>
        </member>
        <member name="M:UnityEngine.UI.LayoutGroup.GetTotalFlexibleSize(System.Int32)">
            <summary>
            The flexible size for the layout group on the given axis.
            </summary>
            <param name="axis">The axis index. 0 is horizontal and 1 is vertical.</param>
            <returns>The flexible size</returns>
        </member>
        <member name="M:UnityEngine.UI.LayoutGroup.GetStartOffset(System.Int32,System.Single)">
            <summary>
            Returns the calculated position of the first child layout element along the given axis.
            </summary>
            <param name="axis">The axis index. 0 is horizontal and 1 is vertical.</param>
            <param name="requiredSpaceWithoutPadding">The total space required on the given axis for all the layout elements including spacing and excluding padding.</param>
            <returns>The position of the first child along the given axis.</returns>
        </member>
        <member name="M:UnityEngine.UI.LayoutGroup.GetAlignmentOnAxis(System.Int32)">
            <summary>
            Returns the alignment on the specified axis as a fraction where 0 is left/top, 0.5 is middle, and 1 is right/bottom.
            </summary>
            <param name="axis">The axis to get alignment along. 0 is horizontal and 1 is vertical.</param>
            <returns>The alignment as a fraction where 0 is left/top, 0.5 is middle, and 1 is right/bottom.</returns>
        </member>
        <member name="M:UnityEngine.UI.LayoutGroup.SetLayoutInputForAxis(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Used to set the calculated layout properties for the given axis.
            </summary>
            <param name="totalMin">The min size for the layout group.</param>
            <param name="totalPreferred">The preferred size for the layout group.</param>
            <param name="totalFlexible">The flexible size for the layout group.</param>
            <param name="axis">The axis to set sizes for. 0 is horizontal and 1 is vertical.</param>
        </member>
        <member name="M:UnityEngine.UI.LayoutGroup.SetChildAlongAxis(UnityEngine.RectTransform,System.Int32,System.Single)">
            <summary>
            Set the position and size of a child layout element along the given axis.
            </summary>
            <param name="rect">The RectTransform of the child layout element.</param>
            <param name="axis">The axis to set the position and size along. 0 is horizontal and 1 is vertical.</param>
            <param name="pos">The position from the left side or top.</param>
        </member>
        <member name="M:UnityEngine.UI.LayoutGroup.SetChildAlongAxisWithScale(UnityEngine.RectTransform,System.Int32,System.Single,System.Single)">
            <summary>
            Set the position and size of a child layout element along the given axis.
            </summary>
            <param name="rect">The RectTransform of the child layout element.</param>
            <param name="axis">The axis to set the position and size along. 0 is horizontal and 1 is vertical.</param>
            <param name="pos">The position from the left side or top.</param>
        </member>
        <member name="M:UnityEngine.UI.LayoutGroup.SetChildAlongAxis(UnityEngine.RectTransform,System.Int32,System.Single,System.Single)">
            <summary>
            Set the position and size of a child layout element along the given axis.
            </summary>
            <param name="rect">The RectTransform of the child layout element.</param>
            <param name="axis">The axis to set the position and size along. 0 is horizontal and 1 is vertical.</param>
            <param name="pos">The position from the left side or top.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:UnityEngine.UI.LayoutGroup.SetChildAlongAxisWithScale(UnityEngine.RectTransform,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Set the position and size of a child layout element along the given axis.
            </summary>
            <param name="rect">The RectTransform of the child layout element.</param>
            <param name="axis">The axis to set the position and size along. 0 is horizontal and 1 is vertical.</param>
            <param name="pos">The position from the left side or top.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:UnityEngine.UI.LayoutGroup.SetProperty``1(``0@,``0)">
            <summary>
            Helper method used to set a given property if it has changed.
            </summary>
            <param name="currentValue">A reference to the member value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:UnityEngine.UI.LayoutGroup.SetDirty">
            <summary>
            Mark the LayoutGroup as dirty.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Selectable.allSelectablesArray">
             <summary>
             Copy of the array of all the selectable objects currently active in the scene.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // required when using UI elements in scripts
            
             public class Example : MonoBehaviour
             {
                 //Displays the names of all selectable elements in the scene
                 public void GetNames()
                 {
                     foreach (Selectable selectableUI in Selectable.allSelectablesArray)
                     {
                         Debug.Log(selectableUI.name);
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Selectable.allSelectableCount">
            <summary>
            How many selectable elements are currently active.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Selectable.allSelectables">
            <summary>
            A List instance of the allSelectablesArray to maintain API compatibility.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Selectable.AllSelectablesNoAlloc(UnityEngine.UI.Selectable[])">
             <summary>
             Non allocating version for getting the all selectables.
             If selectables.Length is less then s_SelectableCount only selectables.Length elments will be copied which
             could result in a incomplete list of elements.
             </summary>
             <param name="selectables">The array to be filled with current selectable objects</param>
             <returns>The number of element copied.</returns>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // required when using UI elements in scripts
            
             public class Example : MonoBehaviour
             {
                 Selectable[] m_Selectables = new Selectable[10];
            
                 //Displays the names of all selectable elements in the scene
                 public void GetNames()
                 {
                     if (m_Selectables.Length < Selectable.allSelectableCount)
                         m_Selectables = new Selectable[Selectable.allSelectableCount];
            
                     int count = Selectable.AllSelectablesNoAlloc(ref m_Selectables);
            
                     for (int i = 0; i < count; ++i)
                     {
                         Debug.Log(m_Selectables[i].name);
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="T:UnityEngine.UI.Selectable.Transition">
             <summary>
            Transition mode for a Selectable.
             </summary>
        </member>
        <member name="F:UnityEngine.UI.Selectable.Transition.None">
            <summary>
            No Transition.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Selectable.Transition.ColorTint">
            <summary>
            Use an color tint transition.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Selectable.Transition.SpriteSwap">
            <summary>
            Use a sprite swap transition.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Selectable.Transition.Animation">
            <summary>
            Use an animation transition.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Selectable.navigation">
             <summary>
             The Navigation setting for this selectable object.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public Button button;
            
                 void Start()
                 {
                     //Set the navigation to the default value. ("Automatic" is the default value).
                     button.navigation = Navigation.defaultNavigation;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Selectable.transition">
             <summary>
             The type of transition that will be applied to the targetGraphic when the state changes.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public Button btnMain;
            
                 void SomeFunction()
                 {
                     //Sets the main button's transition setting to "Color Tint".
                     btnMain.transition = Selectable.Transition.ColorTint;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Selectable.colors">
             <summary>
             The ColorBlock for this selectable object.
             </summary>
             <remarks>
             Modifications will not be visible if  transition is not ColorTint.
             </remarks>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public Button button;
            
                 void Start()
                 {
                     //Resets the colors in the buttons transitions.
                     button.colors = ColorBlock.defaultColorBlock;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Selectable.spriteState">
             <summary>
             The SpriteState for this selectable object.
             </summary>
             <remarks>
             Modifications will not be visible if transition is not SpriteSwap.
             </remarks>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 //Creates an instance of a sprite state (This includes the highlighted, pressed and disabled sprite.
                 public SpriteState sprState = new SpriteState();
                 public Button btnMain;
            
            
                 void Start()
                 {
                     //Assigns the new sprite states to the button.
                     btnMain.spriteState = sprState;
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Selectable.animationTriggers">
            <summary>
            The AnimationTriggers for this selectable object.
            </summary>
            <remarks>
            Modifications will not be visible if transition is not Animation.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.Selectable.targetGraphic">
             <summary>
             Graphic that will be transitioned upon.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public Image newImage;
                 public Button btnMain;
            
                 void SomeFunction()
                 {
                     //Displays the sprite transitions on the image when the transition to Highlighted,pressed or disabled is made.
                     btnMain.targetGraphic = newImage;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Selectable.interactable">
             <summary>
             Is this object interactable.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // required when using UI elements in scripts
            
             public class Example : MonoBehaviour
             {
                 public Button startButton;
                 public bool playersReady;
            
            
                 void Update()
                 {
                     // checks if the players are ready and if the start button is useable
                     if (playersReady == true && startButton.interactable == false)
                     {
                         //allows the start button to be used
                         startButton.interactable = true;
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Selectable.image">
            <summary>
            Convenience function that converts the referenced Graphic to a Image, if possible.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Selectable.animator">
             <summary>
             Convenience function to get the Animator component on the GameObject.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 private Animator buttonAnimator;
                 public Button button;
            
                 void Start()
                 {
                     //Assigns the "buttonAnimator" with the button's animator.
                     buttonAnimator = button.animator;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.Selectable.IsInteractable">
             <summary>
             Is the object interactable.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // required when using UI elements in scripts
            
             public class Example : MonoBehaviour
             {
                 public Button startButton;
            
                 void Update()
                 {
                     if (!startButton.IsInteractable())
                     {
                         Debug.Log("Start Button has been Disabled");
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.Selectable.InstantClearState">
            <summary>
            Clear any internal state from the Selectable (used when disabling).
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Selectable.DoStateTransition(UnityEngine.UI.Selectable.SelectionState,System.Boolean)">
            <summary>
            Transition the Selectable to the entered state.
            </summary>
            <param name="state">State to transition to</param>
            <param name="instant">Should the transition occur instantly.</param>
        </member>
        <member name="T:UnityEngine.UI.Selectable.SelectionState">
            <summary>
            An enumeration of selected states of objects
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Selectable.SelectionState.Normal">
            <summary>
            The UI object can be selected.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Selectable.SelectionState.Highlighted">
            <summary>
            The UI object is highlighted.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Selectable.SelectionState.Pressed">
            <summary>
            The UI object is pressed.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Selectable.SelectionState.Selected">
            <summary>
            The UI object is selected
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Selectable.SelectionState.Disabled">
            <summary>
            The UI object cannot be selected.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Selectable.FindSelectable(UnityEngine.Vector3)">
             <summary>
             Finds the selectable object next to this one.
             </summary>
             <remarks>
             The direction is determined by a Vector3 variable.
             </remarks>
             <param name="dir">The direction in which to search for a neighbouring Selectable object.</param>
             <returns>The neighbouring Selectable object. Null if none found.</returns>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // required when using UI elements in scripts
            
             public class ExampleClass : MonoBehaviour
             {
                 //Sets the direction as "Up" (Y is in positive).
                 public Vector3 direction = new Vector3(0, 1, 0);
                 public Button btnMain;
            
                 public void Start()
                 {
                     //Finds and assigns the selectable above the main button
                     Selectable newSelectable = btnMain.FindSelectable(direction);
            
                     Debug.Log(newSelectable.name);
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.Selectable.FindSelectableOnLeft">
             <summary>
             Find the selectable object to the left of this one.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // required when using UI elements in scripts
            
             public class ExampleClass : MonoBehaviour
             {
                 public Button btnMain;
            
                 // Disables the selectable UI element directly to the left of the Start Button
                 public void IgnoreSelectables()
                 {
                     //Finds the selectable UI element to the left the start button and assigns it to a variable of type "Selectable"
                     Selectable secondButton = startButton.FindSelectableOnLeft();
                     //Disables interaction with the selectable UI element
                     secondButton.interactable = false;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.Selectable.FindSelectableOnRight">
             <summary>
             Find the selectable object to the right of this one.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // required when using UI elements in scripts
            
             public class ExampleClass : MonoBehaviour
             {
                 public Button btnMain;
            
                 // Disables the selectable UI element directly to the right the Start Button
                 public void IgnoreSelectables()
                 {
                     //Finds the selectable UI element to the right the start button and assigns it to a variable of type "Selectable"
                     Selectable secondButton = startButton.FindSelectableOnRight();
                     //Disables interaction with the selectable UI element
                     secondButton.interactable = false;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.Selectable.FindSelectableOnUp">
             <summary>
             The Selectable object above current
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // required when using UI elements in scripts
            
             public class ExampleClass : MonoBehaviour
             {
                 public Button btnMain;
            
                 // Disables the selectable UI element directly above the Start Button
                 public void IgnoreSelectables()
                 {
                     //Finds the selectable UI element above the start button and assigns it to a variable of type "Selectable"
                     Selectable secondButton = startButton.FindSelectableOnUp();
                     //Disables interaction with the selectable UI element
                     secondButton.interactable = false;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.Selectable.FindSelectableOnDown">
             <summary>
             Find the selectable object below this one.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // required when using UI elements in scripts
            
             public class Example : MonoBehaviour
             {
                 public Button startButton;
            
                 // Disables the selectable UI element directly below the Start Button
                 public void IgnoreSelectables()
                 {
                     //Finds the selectable UI element below the start button and assigns it to a variable of type "Selectable"
                     Selectable secondButton = startButton.FindSelectableOnDown();
                     //Disables interaction with the selectable UI element
                     secondButton.interactable = false;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.Selectable.OnMove(UnityEngine.EventSystems.AxisEventData)">
             <summary>
             Determine in which of the 4 move directions the next selectable object should be found.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;
             using UnityEngine.EventSystems;// Required when using Event data.
            
             public class ExampleClass : MonoBehaviour, IMoveHandler
             {
                 //When the focus moves to another selectable object, Invoke this Method.
                 public void OnMove(AxisEventData eventData)
                 {
                     //Assigns the move direction and the raw input vector representing the direction from the event data.
                     MoveDirection moveDir = eventData.moveDir;
                     Vector2 moveVector = eventData.moveVector;
            
                     //Displays the information in the console
                     Debug.Log(moveDir + ", " + moveVector);
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.Selectable.IsHighlighted">
             <summary>
             Returns whether the selectable is currently 'highlighted' or not.
             </summary>
             <remarks>
             Use this to check if the selectable UI element is currently highlighted.
             </remarks>
             <example>
             <code>
             <![CDATA[
             //Create a UI element. To do this go to Create>UI and select from the list. Attach this script to the UI GameObject to see this script working. The script also works with non-UI elements, but highlighting works better with UI.
            
             using UnityEngine;
             using UnityEngine.Events;
             using UnityEngine.EventSystems;
             using UnityEngine.UI;
            
             //Use the Selectable class as a base class to access the IsHighlighted method
             public class Example : Selectable
             {
                 //Use this to check what Events are happening
                 BaseEventData m_BaseEvent;
            
                 void Update()
                 {
                     //Check if the GameObject is being highlighted
                     if (IsHighlighted())
                     {
                         //Output that the GameObject was highlighted, or do something else
                         Debug.Log("Selectable is Highlighted");
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.Selectable.IsPressed">
            <summary>
            Whether the current selectable is being pressed.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Selectable.OnPointerDown(UnityEngine.EventSystems.PointerEventData)">
             <summary>
             Evaluate current state and transition to pressed state.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;
             using UnityEngine.EventSystems;// Required when using Event data.
            
             public class ExampleClass : MonoBehaviour, IPointerDownHandler// required interface when using the OnPointerDown method.
             {
                 //Do this when the mouse is clicked over the selectable object this script is attached to.
                 public void OnPointerDown(PointerEventData eventData)
                 {
                     Debug.Log(this.gameObject.name + " Was Clicked.");
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.Selectable.OnPointerUp(UnityEngine.EventSystems.PointerEventData)">
             <summary>
             Evaluate eventData and transition to appropriate state.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;
             using UnityEngine.EventSystems;// Required when using Event data.
            
             public class ExampleClass : MonoBehaviour, IPointerUpHandler, IPointerDownHandler// These are the interfaces the OnPointerUp method requires.
             {
                 //OnPointerDown is also required to receive OnPointerUp callbacks
                 public void OnPointerDown(PointerEventData eventData)
                 {
                 }
            
                 //Do this when the mouse click on this selectable UI object is released.
                 public void OnPointerUp(PointerEventData eventData)
                 {
                     Debug.Log("The mouse click was released");
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.Selectable.OnPointerEnter(UnityEngine.EventSystems.PointerEventData)">
             <summary>
             Evaluate current state and transition to appropriate state.
             New state could be pressed or hover depending on pressed state.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;
             using UnityEngine.EventSystems;// Required when using Event data.
            
             public class ExampleClass : MonoBehaviour, IPointerEnterHandler// required interface when using the OnPointerEnter method.
             {
                 //Do this when the cursor enters the rect area of this selectable UI object.
                 public void OnPointerEnter(PointerEventData eventData)
                 {
                     Debug.Log("The cursor entered the selectable UI element.");
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.Selectable.OnPointerExit(UnityEngine.EventSystems.PointerEventData)">
             <summary>
             Evaluate current state and transition to normal state.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;
             using UnityEngine.EventSystems;// Required when using Event data.
            
             public class ExampleClass : MonoBehaviour, IPointerExitHandler// required interface when using the OnPointerExit method.
             {
                 //Do this when the cursor exits the rect area of this selectable UI object.
                 public void OnPointerExit(PointerEventData eventData)
                 {
                     Debug.Log("The cursor exited the selectable UI element.");
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.Selectable.OnSelect(UnityEngine.EventSystems.BaseEventData)">
             <summary>
             Set selection and transition to appropriate state.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;
             using UnityEngine.EventSystems;// Required when using Event data.
            
             public class ExampleClass : MonoBehaviour, ISelectHandler// required interface when using the OnSelect method.
             {
                 //Do this when the selectable UI object is selected.
                 public void OnSelect(BaseEventData eventData)
                 {
                     Debug.Log(this.gameObject.name + " was selected");
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.Selectable.OnDeselect(UnityEngine.EventSystems.BaseEventData)">
             <summary>
             Unset selection and transition to appropriate state.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;
             using UnityEngine.EventSystems;// Required when using Event data.
            
             public class ExampleClass : MonoBehaviour, IDeselectHandler //This Interface is required to receive OnDeselect callbacks.
             {
                 public void OnDeselect(BaseEventData data)
                 {
                     Debug.Log("Deselected");
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.Selectable.Select">
             <summary>
             Selects this Selectable.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // required when using UI elements in scripts
             using UnityEngine.EventSystems;// Required when using Event data.
            
             public class ExampleClass : MonoBehaviour// required interface when using the OnSelect method.
             {
                 public InputField myInputField;
            
                 //Do this OnClick.
                 public void SaveGame()
                 {
                     //Makes the Input Field the selected UI Element.
                     myInputField.Select();
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="T:UnityEngine.UI.StencilMaterial">
            <summary>
            Dynamic material class makes it possible to create custom materials on the fly on a per-Graphic basis,
            and still have them get cleaned up correctly.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.StencilMaterial.Add(UnityEngine.Material,System.Int32,UnityEngine.Rendering.StencilOp,UnityEngine.Rendering.CompareFunction,UnityEngine.Rendering.ColorWriteMask)">
            <summary>
            Add a new material using the specified base and stencil ID.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.StencilMaterial.Add(UnityEngine.Material,System.Int32,UnityEngine.Rendering.StencilOp,UnityEngine.Rendering.CompareFunction,UnityEngine.Rendering.ColorWriteMask,System.Int32,System.Int32)">
            <summary>
            Add a new material using the specified base and stencil ID.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.StencilMaterial.Remove(UnityEngine.Material)">
            <summary>
            Remove an existing material, automatically cleaning it up if it's no longer in use.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Navigation.Mode.None">
            <summary>
            No navigation is allowed from this object.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.Navigation.Mode.Horizontal">
            <summary>
            Horizontal Navigation.
            </summary>
            <remarks>
            Navigation should only be allowed when left / right move events happen.
            </remarks>
        </member>
        <member name="F:UnityEngine.UI.Navigation.Mode.Vertical">
            <summary>
            Vertical navigation.
            </summary>
            <remarks>
            Navigation should only be allowed when up / down move events happen.
            </remarks>
        </member>
        <member name="F:UnityEngine.UI.Navigation.Mode.Automatic">
            <summary>
            Automatic navigation.
            </summary>
            <remarks>
            Attempt to find the 'best' next object to select. This should be based on a sensible heuristic.
            </remarks>
        </member>
        <member name="F:UnityEngine.UI.Navigation.Mode.Explicit">
            <summary>
            Explicit navigation.
            </summary>
            <remarks>
            User should explicitly specify what is selected by each move event.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.Navigation.mode">
            <summary>
            Navigation mode.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.Navigation.wrapAround">
            <summary>
            Enables navigation to wrap around from last to first or first to last element.
            Will find the furthest element from the current element in the opposite direction of movement.
            </summary>
            <example>
            Note: If you have a grid of elements and you are on the last element in a row it will not wrap over to the next row it will pick the furthest element in the opposite direction.
            </example>
        </member>
        <member name="P:UnityEngine.UI.Navigation.selectOnUp">
             <summary>
             Specify a Selectable UI GameObject to highlight when the Up arrow key is pressed.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;  // Required when Using UI elements.
            
             public class HighlightOnKey : MonoBehaviour
             {
                 public Button btnSave;
                 public Button btnLoad;
            
                 public void Start()
                 {
                     // get the Navigation data
                     Navigation navigation = btnLoad.navigation;
            
                     // switch mode to Explicit to allow for custom assigned behavior
                     navigation.mode = Navigation.Mode.Explicit;
            
                     // highlight the Save button if the up arrow key is pressed
                     navigation.selectOnUp = btnSave;
            
                     // reassign the struct data to the button
                     btnLoad.navigation = navigation;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Navigation.selectOnDown">
             <summary>
             Specify a Selectable UI GameObject to highlight when the down arrow key is pressed.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;  // Required when Using UI elements.
            
             public class HighlightOnKey : MonoBehaviour
             {
                 public Button btnSave;
                 public Button btnLoad;
            
                 public void Start()
                 {
                     // get the Navigation data
                     Navigation navigation = btnLoad.navigation;
            
                     // switch mode to Explicit to allow for custom assigned behavior
                     navigation.mode = Navigation.Mode.Explicit;
            
                     // highlight the Save button if the down arrow key is pressed
                     navigation.selectOnDown = btnSave;
            
                     // reassign the struct data to the button
                     btnLoad.navigation = navigation;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Navigation.selectOnLeft">
             <summary>
             Specify a Selectable UI GameObject to highlight when the left arrow key is pressed.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;  // Required when Using UI elements.
            
             public class HighlightOnKey : MonoBehaviour
             {
                 public Button btnSave;
                 public Button btnLoad;
            
                 public void Start()
                 {
                     // get the Navigation data
                     Navigation navigation = btnLoad.navigation;
            
                     // switch mode to Explicit to allow for custom assigned behavior
                     navigation.mode = Navigation.Mode.Explicit;
            
                     // highlight the Save button if the left arrow key is pressed
                     navigation.selectOnLeft = btnSave;
            
                     // reassign the struct data to the button
                     btnLoad.navigation = navigation;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Navigation.selectOnRight">
             <summary>
             Specify a Selectable UI GameObject to highlight when the right arrow key is pressed.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;  // Required when Using UI elements.
            
             public class HighlightOnKey : MonoBehaviour
             {
                 public Button btnSave;
                 public Button btnLoad;
            
                 public void Start()
                 {
                     // get the Navigation data
                     Navigation navigation = btnLoad.navigation;
            
                     // switch mode to Explicit to allow for custom assigned behavior
                     navigation.mode = Navigation.Mode.Explicit;
            
                     // highlight the Save button if the right arrow key is pressed
                     navigation.selectOnRight = btnSave;
            
                     // reassign the struct data to the button
                     btnLoad.navigation = navigation;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.Navigation.defaultNavigation">
             <summary>
             Return a Navigation with sensible default values.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public Button button;
            
                 void Start()
                 {
                     //Set the navigation to the default value. ("Automatic" is the default value).
                     button.navigation = Navigation.defaultNavigation;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="T:UnityEngine.UI.CanvasUpdate">
            <summary>
            Values of 'update' called on a Canvas update.
            </summary>
            <remarks> If modifying also modify m_CanvasUpdateProfilerStrings to match.</remarks>
        </member>
        <member name="F:UnityEngine.UI.CanvasUpdate.Prelayout">
            <summary>
            Called before layout.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.CanvasUpdate.Layout">
            <summary>
            Called for layout.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.CanvasUpdate.PostLayout">
            <summary>
            Called after layout.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.CanvasUpdate.PreRender">
            <summary>
            Called before rendering.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.CanvasUpdate.LatePreRender">
            <summary>
            Called late, before render.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.CanvasUpdate.MaxUpdateValue">
            <summary>
            Max enum value. Always last.
            </summary>
        </member>
        <member name="T:UnityEngine.UI.ICanvasElement">
            <summary>
            This is an element that can live on a Canvas.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.ICanvasElement.Rebuild(UnityEngine.UI.CanvasUpdate)">
            <summary>
            Rebuild the element for the given stage.
            </summary>
            <param name="executing">The current CanvasUpdate stage being rebuild.</param>
        </member>
        <member name="P:UnityEngine.UI.ICanvasElement.transform">
            <summary>
            Get the transform associated with the ICanvasElement.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.ICanvasElement.LayoutComplete">
            <summary>
            Callback sent when this ICanvasElement has completed layout.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.ICanvasElement.GraphicUpdateComplete">
            <summary>
            Callback sent when this ICanvasElement has completed Graphic rebuild.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.ICanvasElement.IsDestroyed">
            <summary>
            Used if the native representation has been destroyed.
            </summary>
            <returns>Return true if the element is considered destroyed.</returns>
        </member>
        <member name="T:UnityEngine.UI.CanvasUpdateRegistry">
            <summary>
            A place where CanvasElements can register themselves for rebuilding.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.CanvasUpdateRegistry.instance">
            <summary>
            Get the singleton registry instance.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.CanvasUpdateRegistry.RegisterCanvasElementForLayoutRebuild(UnityEngine.UI.ICanvasElement)">
            <summary>
            Try and add the given element to the layout rebuild list.
            Will not return if successfully added.
            </summary>
            <param name="element">The element that is needing rebuilt.</param>
        </member>
        <member name="M:UnityEngine.UI.CanvasUpdateRegistry.TryRegisterCanvasElementForLayoutRebuild(UnityEngine.UI.ICanvasElement)">
            <summary>
            Try and add the given element to the layout rebuild list.
            </summary>
            <param name="element">The element that is needing rebuilt.</param>
            <returns>
            True if the element was successfully added to the rebuilt list.
            False if either already inside a Graphic Update loop OR has already been added to the list.
            </returns>
        </member>
        <member name="M:UnityEngine.UI.CanvasUpdateRegistry.RegisterCanvasElementForGraphicRebuild(UnityEngine.UI.ICanvasElement)">
            <summary>
            Try and add the given element to the rebuild list.
            Will not return if successfully added.
            </summary>
            <param name="element">The element that is needing rebuilt.</param>
        </member>
        <member name="M:UnityEngine.UI.CanvasUpdateRegistry.TryRegisterCanvasElementForGraphicRebuild(UnityEngine.UI.ICanvasElement)">
            <summary>
            Try and add the given element to the rebuild list.
            </summary>
            <param name="element">The element that is needing rebuilt.</param>
            <returns>
            True if the element was successfully added to the rebuilt list.
            False if either already inside a Graphic Update loop OR has already been added to the list.
            </returns>
        </member>
        <member name="M:UnityEngine.UI.CanvasUpdateRegistry.UnRegisterCanvasElementForRebuild(UnityEngine.UI.ICanvasElement)">
            <summary>
            Remove the given element from both the graphic and the layout rebuild lists.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:UnityEngine.UI.CanvasUpdateRegistry.DisableCanvasElementForRebuild(UnityEngine.UI.ICanvasElement)">
            <summary>
            Disable the given element from both the graphic and the layout rebuild lists.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:UnityEngine.UI.CanvasUpdateRegistry.IsRebuildingLayout">
            <summary>
            Are graphics layouts currently being calculated..
            </summary>
            <returns>True if the rebuild loop is CanvasUpdate.Prelayout, CanvasUpdate.Layout or CanvasUpdate.Postlayout</returns>
        </member>
        <member name="M:UnityEngine.UI.CanvasUpdateRegistry.IsRebuildingGraphics">
            <summary>
            Are graphics currently being rebuild.
            </summary>
            <returns>True if the rebuild loop is CanvasUpdate.PreRender or CanvasUpdate.Render</returns>
        </member>
        <member name="P:UnityEngine.UI.ColorBlock.normalColor">
             <summary>
             The normal color for this color block.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public Button button;
                 public Color newColor;
            
                 void Start()
                 {
                     //Changes the button's Normal color to the new color.
                     ColorBlock cb = button.colors;
                     cb.normalColor = newColor;
                     button.colors = cb;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.ColorBlock.highlightedColor">
             <summary>
             The highlight color for this color block.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public Button button;
                 public Color newColor;
            
                 void Start()
                 {
                     //Changes the button's Highlighted color to the new color.
                     ColorBlock cb = button.colors;
                     cb.highlightedColor = newColor;
                     button.colors = cb;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.ColorBlock.pressedColor">
             <summary>
             The pressed color for this color block.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public Button button;
                 public Color newColor;
            
                 void Start()
                 {
                     //Changes the button's Pressed color to the new color.
                     ColorBlock cb = button.colors;
                     cb.pressedColor = newColor;
                     button.colors = cb;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.ColorBlock.selectedColor">
             <summary>
             The selected color for this color block.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public Button button;
                 public Color newColor;
            
                 void Start()
                 {
                     //Changes the button's Selected color to the new color.
                     ColorBlock cb = button.colors;
                     cb.selectedColor = newColor;
                     button.colors = cb;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.ColorBlock.disabledColor">
             <summary>
             The disabled color for this color block.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public Button button;
                 public Color newColor;
            
                 void Start()
                 {
                     //Changes the button's Disabled color to the new color.
                     ColorBlock cb = button.colors;
                     cb.disabledColor = newColor;
                     button.colors = cb;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.ColorBlock.colorMultiplier">
            <summary>
            Multiplier applied to colors (allows brightening greater then base color).
            </summary>
        </member>
        <member name="P:UnityEngine.UI.ColorBlock.fadeDuration">
            <summary>
            How long a color transition between states should take.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.ColorBlock.defaultColorBlock">
            <summary>
            Simple getter for a code generated default ColorBlock.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.FontData.defaultFontData">
            <summary>
            Get a font data with sensible defaults.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.FontData.font">
            <summary>
            The Font to use for this generated Text object.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.FontData.fontSize">
            <summary>
            The Font size to use for this generated Text object.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.FontData.fontStyle">
            <summary>
            The font style to use for this generated Text object.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.FontData.bestFit">
            <summary>
            Is best fit used for this generated Text object.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.FontData.minSize">
            <summary>
            The min size for this generated Text object.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.FontData.maxSize">
            <summary>
            The max size for this generated Text object.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.FontData.alignment">
            <summary>
            How is the text aligned for this generated Text object.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.FontData.alignByGeometry">
            <summary>
            Use the extents of glyph geometry to perform horizontal alignment rather than glyph metrics.
            </summary>
            <remarks>
            This can result in better fitting left and right alignment, but may result in incorrect positioning when attempting to overlay multiple fonts (such as a specialized outline font) on top of each other.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.FontData.richText">
            <summary>
            Should rich text be used for this generated Text object.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.FontData.horizontalOverflow">
            <summary>
            The horizontal overflow policy for this generated Text object.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.FontData.verticalOverflow">
            <summary>
            The vertical overflow policy for this generated Text object.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.FontData.lineSpacing">
            <summary>
            The line spaceing for this generated Text object.
            </summary>
        </member>
        <member name="T:UnityEngine.UI.GraphicRebuildTracker">
            <summary>
            EditorOnly class for tracking all Graphics.
            Used when a source asset is reimported into the editor to ensure that Graphics are updated as intended.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.GraphicRebuildTracker.TrackGraphic(UnityEngine.UI.Graphic)">
            <summary>
            Add a Graphic to the list of tracked Graphics
            </summary>
            <param name="g">The graphic to track</param>
        </member>
        <member name="M:UnityEngine.UI.GraphicRebuildTracker.UnTrackGraphic(UnityEngine.UI.Graphic)">
            <summary>
            Remove a Graphic to the list of tracked Graphics
            </summary>
            <param name="g">The graphic to remove from tracking.</param>
        </member>
        <member name="M:UnityEngine.UI.GraphicRebuildTracker.DisableTrackGraphic(UnityEngine.UI.Graphic)">
            <summary>
            Remove a Graphic to the list of tracked Graphics
            </summary>
            <param name="g">The graphic to remove from tracking.</param>
        </member>
        <member name="T:UnityEngine.UI.MaskableGraphic">
            <summary>
            A Graphic that is capable of being masked out.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.MaskableGraphic.onCullStateChanged">
            <summary>
            Callback issued when culling changes.
            </summary>
            <remarks>
            Called whene the culling state of this MaskableGraphic either becomes culled or visible. You can use this to control other elements of your UI as culling happens.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.MaskableGraphic.maskable">
            <summary>
            Does this graphic allow masking.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.MaskableGraphic.isMaskingGraphic">
            <summary>
            Is this graphic the graphic on the same object as a Mask that is enabled.
            </summary>
            <remarks>
            If toggled ensure to call MaskUtilities.NotifyStencilStateChanged(this); manually as it changes how stenciles are calculated for this image.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.MaskableGraphic.GetModifiedMaterial(UnityEngine.Material)">
            <summary>
            See IMaterialModifier.GetModifiedMaterial
            </summary>
        </member>
        <member name="M:UnityEngine.UI.MaskableGraphic.Cull(UnityEngine.Rect,System.Boolean)">
            <summary>
            See IClippable.Cull
            </summary>
        </member>
        <member name="M:UnityEngine.UI.MaskableGraphic.SetClipRect(UnityEngine.Rect,System.Boolean)">
            <summary>
            See IClippable.SetClipRect
            </summary>
        </member>
        <member name="M:UnityEngine.UI.MaskableGraphic.RecalculateClipping">
            <summary>
            See IClippable.RecalculateClipping
            </summary>
        </member>
        <member name="M:UnityEngine.UI.MaskableGraphic.RecalculateMasking">
            <summary>
            See IMaskable.RecalculateMasking
            </summary>
        </member>
        <member name="T:UnityEngine.UI.AnimationTriggers">
            <summary>
            Structure that stores the state of an animation transition on a Selectable.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.AnimationTriggers.normalTrigger">
             <summary>
             Trigger to send to animator when entering normal state.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public Animator buttonAnimator;
                 public Button button;
                 void SomeFunction()
                 {
                     //Sets the button to the Normal state (Useful when making tutorials).
                     buttonAnimator.SetTrigger(button.animationTriggers.normalTrigger);
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.AnimationTriggers.highlightedTrigger">
             <summary>
             Trigger to send to animator when entering highlighted state.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public Animator buttonAnimator;
                 public Button button;
                 void SomeFunction()
                 {
                     //Sets the button to the Highlighted state (Useful when making tutorials).
                     buttonAnimator.SetTrigger(button.animationTriggers.highlightedTrigger);
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.AnimationTriggers.pressedTrigger">
             <summary>
             Trigger to send to animator when entering pressed state.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public Animator buttonAnimator;
                 public Button button;
                 void SomeFunction()
                 {
                     //Sets the button to the Pressed state (Useful when making tutorials).
                     buttonAnimator.SetTrigger(button.animationTriggers.pressedTrigger);
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.AnimationTriggers.selectedTrigger">
             <summary>
             Trigger to send to animator when entering selected state.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public Animator buttonAnimator;
                 public Button button;
                 void SomeFunction()
                 {
                     //Sets the button to the Selected state (Useful when making tutorials).
                     buttonAnimator.SetTrigger(button.animationTriggers.selectedTrigger);
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.UI.AnimationTriggers.disabledTrigger">
             <summary>
             Trigger to send to animator when entering disabled state.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI; // Required when Using UI elements.
            
             public class ExampleClass : MonoBehaviour
             {
                 public Animator buttonAnimator;
                 public Button button;
                 void SomeFunction()
                 {
                     //Sets the button to the Disabled state (Useful when making tutorials).
                     buttonAnimator.SetTrigger(button.animationTriggers.disabledTrigger);
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="T:UnityEngine.UI.VertexHelper">
             <summary>
             A utility class that can aid in the generation of meshes for the UI.
             </summary>
             <remarks>
             This class implements IDisposable to aid with memory management.
             </remarks>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using UnityEngine.UI;
            
             public class ExampleClass : MonoBehaviour
             {
                 Mesh m;
            
                 void Start()
                 {
                     Color32 color32 = Color.red;
                     using (var vh = new VertexHelper())
                     {
                         vh.AddVert(new Vector3(0, 0), color32, new Vector2(0f, 0f));
                         vh.AddVert(new Vector3(0, 100), color32, new Vector2(0f, 1f));
                         vh.AddVert(new Vector3(100, 100), color32, new Vector2(1f, 1f));
                         vh.AddVert(new Vector3(100, 0), color32, new Vector2(1f, 0f));
            
                         vh.AddTriangle(0, 1, 2);
                         vh.AddTriangle(2, 3, 0);
                         vh.FillMesh(m);
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.UI.VertexHelper.Dispose">
            <summary>
            Cleanup allocated memory.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.VertexHelper.Clear">
            <summary>
            Clear all vertices from the stream.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.VertexHelper.currentVertCount">
            <summary>
            Current number of vertices in the buffer.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.VertexHelper.currentIndexCount">
            <summary>
            Get the number of indices set on the VertexHelper.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.VertexHelper.PopulateUIVertex(UnityEngine.UIVertex@,System.Int32)">
            <summary>
            Fill a UIVertex with data from index i of the stream.
            </summary>
            <param name="vertex">Vertex to populate</param>
            <param name="i">Index to populate.</param>
        </member>
        <member name="M:UnityEngine.UI.VertexHelper.SetUIVertex(UnityEngine.UIVertex,System.Int32)">
            <summary>
            Set a UIVertex at the given index.
            </summary>
            <param name="vertex">The vertex to fill</param>
            <param name="i">the position in the current list to fill.</param>
        </member>
        <member name="M:UnityEngine.UI.VertexHelper.FillMesh(UnityEngine.Mesh)">
            <summary>
            Fill the given mesh with the stream data.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.VertexHelper.AddVert(UnityEngine.Vector3,UnityEngine.Color32,UnityEngine.Vector4,UnityEngine.Vector4,UnityEngine.Vector4,UnityEngine.Vector4,UnityEngine.Vector3,UnityEngine.Vector4)">
            <summary>
            Add a single vertex to the stream.
            </summary>
            <param name="position">Position of the vert</param>
            <param name="color">Color of the vert</param>
            <param name="uv0">UV of the vert</param>
            <param name="uv1">UV1 of the vert</param>
            <param name="uv2">UV2 of the vert</param>
            <param name="uv3">UV3 of the vert</param>
            <param name="normal">Normal of the vert.</param>
            <param name="tangent">Tangent of the vert</param>
        </member>
        <member name="M:UnityEngine.UI.VertexHelper.AddVert(UnityEngine.Vector3,UnityEngine.Color32,UnityEngine.Vector4,UnityEngine.Vector4,UnityEngine.Vector3,UnityEngine.Vector4)">
            <summary>
            Add a single vertex to the stream.
            </summary>
            <param name="position">Position of the vert</param>
            <param name="color">Color of the vert</param>
            <param name="uv0">UV of the vert</param>
            <param name="uv1">UV1 of the vert</param>
            <param name="normal">Normal of the vert.</param>
            <param name="tangent">Tangent of the vert</param>
        </member>
        <member name="M:UnityEngine.UI.VertexHelper.AddVert(UnityEngine.Vector3,UnityEngine.Color32,UnityEngine.Vector4)">
            <summary>
            Add a single vertex to the stream.
            </summary>
            <param name="position">Position of the vert</param>
            <param name="color">Color of the vert</param>
            <param name="uv0">UV of the vert</param>
        </member>
        <member name="M:UnityEngine.UI.VertexHelper.AddVert(UnityEngine.UIVertex)">
            <summary>
            Add a single vertex to the stream.
            </summary>
            <param name="v">The vertex to add</param>
        </member>
        <member name="M:UnityEngine.UI.VertexHelper.AddTriangle(System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a triangle to the buffer.
            </summary>
            <param name="idx0">index 0</param>
            <param name="idx1">index 1</param>
            <param name="idx2">index 2</param>
        </member>
        <member name="M:UnityEngine.UI.VertexHelper.AddUIVertexQuad(UnityEngine.UIVertex[])">
            <summary>
            Add a quad to the stream.
            </summary>
            <param name="verts">4 Vertices representing the quad.</param>
        </member>
        <member name="M:UnityEngine.UI.VertexHelper.AddUIVertexStream(System.Collections.Generic.List{UnityEngine.UIVertex},System.Collections.Generic.List{System.Int32})">
            <summary>
            Add a stream of custom UIVertex and corresponding indices.
            </summary>
            <param name="verts">The custom stream of verts to add to the helpers internal data.</param>
            <param name="indices">The custom stream of indices to add to the helpers internal data.</param>
        </member>
        <member name="M:UnityEngine.UI.VertexHelper.AddUIVertexTriangleStream(System.Collections.Generic.List{UnityEngine.UIVertex})">
            <summary>
            Add a list of triangles to the stream.
            </summary>
            <param name="verts">Vertices to add. Length should be divisible by 3.</param>
        </member>
        <member name="M:UnityEngine.UI.VertexHelper.GetUIVertexStream(System.Collections.Generic.List{UnityEngine.UIVertex})">
            <summary>
            Create a stream of UI vertex (in triangles) from the stream.
            </summary>
        </member>
        <member name="T:UnityEngine.UI.LayoutUtility">
            <summary>
            Utility functions for querying layout elements for their minimum, preferred, and flexible sizes.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.LayoutUtility.GetMinSize(UnityEngine.RectTransform,System.Int32)">
            <summary>
            Returns the minimum size of the layout element.
            </summary>
            <param name="rect">The RectTransform of the layout element to query.</param>
            <param name="axis">The axis to query. This can be 0 or 1.</param>
            <remarks>All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used.</remarks>
        </member>
        <member name="M:UnityEngine.UI.LayoutUtility.GetPreferredSize(UnityEngine.RectTransform,System.Int32)">
            <summary>
            Returns the preferred size of the layout element.
            </summary>
            <param name="rect">The RectTransform of the layout element to query.</param>
            <param name="axis">The axis to query. This can be 0 or 1.</param>
            <remarks>
            All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.LayoutUtility.GetFlexibleSize(UnityEngine.RectTransform,System.Int32)">
            <summary>
            Returns the flexible size of the layout element.
            </summary>
            <remarks>
            All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used.
            </remarks>
            <param name="rect">The RectTransform of the layout element to query.</param>
            <param name="axis">The axis to query. This can be 0 or 1.</param>
        </member>
        <member name="M:UnityEngine.UI.LayoutUtility.GetMinWidth(UnityEngine.RectTransform)">
            <summary>
            Returns the minimum width of the layout element.
            </summary>
            <param name="rect">The RectTransform of the layout element to query.</param>
            <remarks>
            All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.LayoutUtility.GetPreferredWidth(UnityEngine.RectTransform)">
            <summary>
            Returns the preferred width of the layout element.
            </summary>
            <param name="rect">The RectTransform of the layout element to query.</param>
            <returns>
            All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used.
            </returns>
        </member>
        <member name="M:UnityEngine.UI.LayoutUtility.GetFlexibleWidth(UnityEngine.RectTransform)">
            <summary>
            Returns the flexible width of the layout element.
            </summary>
            <remarks>
            All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used
            </remarks>
            <param name="rect">The RectTransform of the layout element to query.</param>
        </member>
        <member name="M:UnityEngine.UI.LayoutUtility.GetMinHeight(UnityEngine.RectTransform)">
            <summary>
            Returns the minimum height of the layout element.
            </summary>
            <param name="rect">The RectTransform of the layout element to query.</param>
            <remarks>
            All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.LayoutUtility.GetPreferredHeight(UnityEngine.RectTransform)">
            <summary>
            Returns the preferred height of the layout element.
            </summary>
            <param name="rect">The RectTransform of the layout element to query.</param>
            <remarks>
            All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.LayoutUtility.GetFlexibleHeight(UnityEngine.RectTransform)">
            <summary>
            Returns the flexible height of the layout element.
            </summary>
            <remarks>
            All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used.
            </remarks>
            <param name="rect">The RectTransform of the layout element to query.</param>
        </member>
        <member name="M:UnityEngine.UI.LayoutUtility.GetLayoutProperty(UnityEngine.RectTransform,System.Func{UnityEngine.UI.ILayoutElement,System.Single},System.Single)">
            <summary>
            Gets a calculated layout property for the layout element with the given RectTransform.
            </summary>
            <param name="rect">The RectTransform of the layout element to get a property for.</param>
            <param name="property">The property to calculate.</param>
            <param name="defaultValue">The default value to use if no component on the layout element supplies the given property</param>
            <returns>The calculated value of the layout property.</returns>
        </member>
        <member name="M:UnityEngine.UI.LayoutUtility.GetLayoutProperty(UnityEngine.RectTransform,System.Func{UnityEngine.UI.ILayoutElement,System.Single},System.Single,UnityEngine.UI.ILayoutElement@)">
            <summary>
            Gets a calculated layout property for the layout element with the given RectTransform.
            </summary>
            <param name="rect">The RectTransform of the layout element to get a property for.</param>
            <param name="property">The property to calculate.</param>
            <param name="defaultValue">The default value to use if no component on the layout element supplies the given property</param>
            <param name="source">Optional out parameter to get the component that supplied the calculated value.</param>
            <returns>The calculated value of the layout property.</returns>
        </member>
        <member name="P:UnityEngine.UI.ToggleGroup.allowSwitchOff">
            <summary>
            Is it allowed that no toggle is switched on?
            </summary>
            <remarks>
            If this setting is enabled, pressing the toggle that is currently switched on will switch it off, so that no toggle is switched on. If this setting is disabled, pressing the toggle that is currently switched on will not change its state.
            Note that even if allowSwitchOff is false, the Toggle Group will not enforce its constraint right away if no toggles in the group are switched on when the scene is loaded or when the group is instantiated. It will only prevent the user from switching a toggle off.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.ToggleGroup.Start">
            <summary>
            Because all the Toggles have registered themselves in the OnEnabled, Start should check to
            make sure at least one Toggle is active in groups that do not AllowSwitchOff
            </summary>
        </member>
        <member name="M:UnityEngine.UI.ToggleGroup.NotifyToggleOn(UnityEngine.UI.Toggle,System.Boolean)">
            <summary>
            Notify the group that the given toggle is enabled.
            </summary>
            <param name="toggle">The toggle that got triggered on.</param>
            <param name="sendCallback">If other toggles should send onValueChanged.</param>
        </member>
        <member name="M:UnityEngine.UI.ToggleGroup.UnregisterToggle(UnityEngine.UI.Toggle)">
            <summary>
            Unregister a toggle from the group.
            </summary>
            <param name="toggle">The toggle to remove.</param>
        </member>
        <member name="M:UnityEngine.UI.ToggleGroup.RegisterToggle(UnityEngine.UI.Toggle)">
            <summary>
            Register a toggle with the toggle group so it is watched for changes and notified if another toggle in the group changes.
            </summary>
            <param name="toggle">The toggle to register with the group.</param>
        </member>
        <member name="M:UnityEngine.UI.ToggleGroup.EnsureValidState">
            <summary>
            Ensure that the toggle group still has a valid state. This is only relevant when a ToggleGroup is Started
            or a Toggle has been deleted from the group.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.ToggleGroup.AnyTogglesOn">
            <summary>
            Are any of the toggles on?
            </summary>
            <returns>Are and of the toggles on?</returns>
        </member>
        <member name="M:UnityEngine.UI.ToggleGroup.ActiveToggles">
            <summary>
            Returns the toggles in this group that are active.
            </summary>
            <returns>The active toggles in the group.</returns>
            <remarks>
            Toggles belonging to this group but are not active either because their GameObject is inactive or because the Toggle component is disabled, are not returned as part of the list.
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.ToggleGroup.GetFirstActiveToggle">
            <summary>
            Returns the toggle that is the first in the list of active toggles.
            </summary>
            <returns>The first active toggle from m_Toggles</returns>
            <remarks>
            Get the active toggle for this group. As the group
            </remarks>
        </member>
        <member name="M:UnityEngine.UI.ToggleGroup.SetAllTogglesOff(System.Boolean)">
            <summary>
            Switch all toggles off.
            </summary>
            <remarks>
            This method can be used to switch all toggles off, regardless of whether the allowSwitchOff property is enabled or not.
            </remarks>
        </member>
        <member name="T:UnityEngine.UI.ILayoutElement">
             <summary>
               A component is treated as a layout element by the auto layout system if it implements ILayoutElement.
             </summary>
             <remarks>
             The layout system will invoke CalculateLayoutInputHorizontal before querying minWidth, preferredWidth, and flexibleWidth. It can potentially save performance if these properties are cached when CalculateLayoutInputHorizontal is invoked, so they don't need to be recalculated every time the properties are queried.
            
             The layout system will invoke CalculateLayoutInputVertical before querying minHeight, preferredHeight, and flexibleHeight.It can potentially save performance if these properties are cached when CalculateLayoutInputVertical is invoked, so they don't need to be recalculated every time the properties are queried.
            
             The minWidth, preferredWidth, and flexibleWidth properties should not rely on any properties of the RectTransform of the layout element, otherwise the behavior will be non-deterministic.
             The minHeight, preferredHeight, and flexibleHeight properties may rely on horizontal aspects of the RectTransform, such as the width or the X component of the position.
             Any properties of the RectTransforms on child layout elements may always be relied on.
             </remarks>
        </member>
        <member name="M:UnityEngine.UI.ILayoutElement.CalculateLayoutInputHorizontal">
            <summary>
            After this method is invoked, layout horizontal input properties should return up-to-date values.
             Children will already have up-to-date layout horizontal inputs when this methods is called.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.ILayoutElement.CalculateLayoutInputVertical">
             <summary>
            After this method is invoked, layout vertical input properties should return up-to-date values.
            Children will already have up-to-date layout vertical inputs when this methods is called.
             </summary>
        </member>
        <member name="P:UnityEngine.UI.ILayoutElement.minWidth">
            <summary>
            The minimum width this layout element may be allocated.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.ILayoutElement.preferredWidth">
            <summary>
            The preferred width this layout element should be allocated if there is sufficient space.
            </summary>
            <remarks>
            PreferredWidth can be set to -1 to remove the size.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.ILayoutElement.flexibleWidth">
             <summary>
             The extra relative width this layout element should be allocated if there is additional available space.
             </summary>
             <remarks>
             Setting preferredWidth to -1 removed the preferredWidth.
             </remarks>
             <example>
            <code>
            <![CDATA[
            using UnityEngine;
            using System.Collections;
            using UnityEngine.UI; // Required when using UI elements.
            
            public class ExampleClass : MonoBehaviour
            {
                public Transform MyContentPanel;
            
                //Sets the flexible height on on all children in the content panel.
                public void Start()
                {
                    //Assign all the children of the content panel to an array.
                    LayoutElement[] myLayoutElements = MyContentPanel.GetComponentsInChildren<LayoutElement>();
            
                    //For each child in the array change its LayoutElement's flexible width to 200.
                    foreach (LayoutElement element in myLayoutElements)
                    {
                        element.flexibleWidth = 200f;
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:UnityEngine.UI.ILayoutElement.minHeight">
            <summary>
            The minimum height this layout element may be allocated.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.ILayoutElement.preferredHeight">
            <summary>
            The preferred height this layout element should be allocated if there is sufficient space.
            </summary>
            <remarks>
            PreferredHeight can be set to -1 to remove the size.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.ILayoutElement.flexibleHeight">
             <summary>
             The extra relative height this layout element should be allocated if there is additional available space.
             </summary>
            <example>
            <code>
            <![CDATA[
            using UnityEngine;
            using System.Collections;
            using UnityEngine.UI; // Required when using UI elements.
            
            public class ExampleClass : MonoBehaviour
            {
                public Transform MyContentPanel;
            
                //Sets the flexible height on on all children in the content panel.
                public void Start()
                {
                    //Assign all the children of the content panel to an array.
                    LayoutElement[] myLayoutElements = MyContentPanel.GetComponentsInChildren<LayoutElement>();
            
                    //For each child in the array change its LayoutElement's flexible height to 100.
                    foreach (LayoutElement element in myLayoutElements)
                    {
                        element.flexibleHeight = 100f;
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:UnityEngine.UI.ILayoutElement.layoutPriority">
            <summary>
            The layout priority of this component.
            </summary>
            <remarks>
            If multiple components on the same GameObject implement the ILayoutElement interface, the values provided by components that return a higher priority value are given priority. However, values less than zero are ignored. This way a component can override only select properties by leaving the remaning values to be -1 or other values less than zero.
            </remarks>
        </member>
        <member name="T:UnityEngine.UI.ILayoutController">
             <summary>
             Base interface to be implemented by components that control the layout of RectTransforms.
             </summary>
             <remarks>
             If a component is driving its own RectTransform it should implement the interface [[ILayoutSelfController]].
             If a component is driving the RectTransforms of its children, it should implement [[ILayoutGroup]].
            
             The layout system will first invoke SetLayoutHorizontal and then SetLayoutVertical.
            
             In the SetLayoutHorizontal call it is valid to call LayoutUtility.GetMinWidth, LayoutUtility.GetPreferredWidth, and LayoutUtility.GetFlexibleWidth on the RectTransform of itself or any of its children.
             In the SetLayoutVertical call it is valid to call LayoutUtility.GetMinHeight, LayoutUtility.GetPreferredHeight, and LayoutUtility.GetFlexibleHeight on the RectTransform of itself or any of its children.
            
             The component may use this information to determine the width and height to use for its own RectTransform or the RectTransforms of its children.
             </remarks>
        </member>
        <member name="M:UnityEngine.UI.ILayoutController.SetLayoutHorizontal">
            <summary>
            Callback invoked by the auto layout system which handles horizontal aspects of the layout.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.ILayoutController.SetLayoutVertical">
            <summary>
            Callback invoked by the auto layout system which handles vertical aspects of the layout.
            </summary>
        </member>
        <member name="T:UnityEngine.UI.ILayoutGroup">
            <summary>
            ILayoutGroup is an ILayoutController that should drive the RectTransforms of its children.
            </summary>
            <remarks>
            ILayoutGroup derives from ILayoutController and requires the same members to be implemented.
            </remarks>
        </member>
        <member name="T:UnityEngine.UI.ILayoutSelfController">
             <summary>
             ILayoutSelfController is an ILayoutController that should drive its own RectTransform.
             </summary>
             <remarks>
             The iLayoutSelfController derives from the base controller [[ILayoutController]] and controls the layout of a RectTransform.
            
             Use the ILayoutSelfController to manipulate a GameObject’s own RectTransform component, which you attach in the Inspector.Use ILayoutGroup to manipulate RectTransforms belonging to the children of the GameObject.
            
             Call ILayoutController.SetLayoutHorizontal to handle horizontal parts of the layout, and call ILayoutController.SetLayoutVertical to handle vertical parts.
             You can change the height, width, position and rotation of the RectTransform.
             </remarks>
             <example>
             <code>
             <![CDATA[
             //This script shows how the GameObject’s own RectTransforms can be changed.
             //This creates a rectangle on the screen of the scale, positition and rotation you define in the Inspector.
             //Make sure to set the X and Y scale to be more than 0 to see it
            
             using UnityEngine;
             using UnityEngine.UI;
             using UnityEngine.EventSystems;
            
             public class Example : UIBehaviour, ILayoutSelfController
             {
                 //Fields in the inspector used to manipulate the RectTransform
                 public Vector3 m_Position;
                 public Vector3 m_Rotation;
                 public Vector2 m_Scale;
            
                 //This handles horizontal aspects of the layout (derived from ILayoutController)
                 public virtual void SetLayoutHorizontal()
                 {
                     //Move and Rotate the RectTransform appropriately
                     UpdateRectTransform();
                 }
            
                 //This handles vertical aspects of the layout
                 public virtual void SetLayoutVertical()
                 {
                     //Move and Rotate the RectTransform appropriately
                     UpdateRectTransform();
                 }
            
                 //This tells when there is a change in the inspector
                 #if UNITY_EDITOR
                 protected override void OnValidate()
                 {
                     Debug.Log("Validate");
                     //Update the RectTransform position, rotation and scale
                     UpdateRectTransform();
                 }
            
                 #endif
            
                 //This tells when there has been a change to the RectTransform's settings in the inspector
                 protected override void OnRectTransformDimensionsChange()
                 {
                     //Update the RectTransform position, rotation and scale
                     UpdateRectTransform();
                 }
            
                 void UpdateRectTransform()
                 {
                     //Fetch the RectTransform from the GameObject
                     RectTransform rectTransform = GetComponent<RectTransform>();
            
                     //Change the scale of the RectTransform using the fields in the inspector
                     rectTransform.localScale = new Vector3(m_Scale.x, m_Scale.y, 0);
            
                     //Change the position and rotation of the RectTransform
                     rectTransform.SetPositionAndRotation(m_Position, Quaternion.Euler(m_Rotation));
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="T:UnityEngine.UI.ILayoutIgnorer">
            <summary>
            A RectTransform will be ignored by the layout system if it has a component which implements ILayoutIgnorer.
            </summary>
            <remarks>
            A components that implements ILayoutIgnorer can be used to make a parent layout group component not consider this RectTransform part of the group. The RectTransform can then be manually positioned despite being a child GameObject of a layout group.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.ILayoutIgnorer.ignoreLayout">
            <summary>
            Should this RectTransform be ignored bvy the layout system?
            </summary>
            <remarks>
            Setting this property to true will make a parent layout group component not consider this RectTransform part of the group. The RectTransform can then be manually positioned despite being a child GameObject of a layout group.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.RectMask2D.padding">
            <summary>
            Padding to be applied to the masking
            X = Left
            Y = Bottom
            Z = Right
            W = Top
            </summary>
        </member>
        <member name="P:UnityEngine.UI.RectMask2D.softness">
            <summary>
            The softness to apply to the horizontal and vertical axis.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.RectMask2D.m_Canvas">
            <remarks>
            Returns a non-destroyed instance or a null reference.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.RectMask2D.canvasRect">
            <summary>
            Get the Rect for the mask in canvas space.
            </summary>
        </member>
        <member name="P:UnityEngine.UI.RectMask2D.rectTransform">
            <summary>
            Helper function to get the RectTransform for the mask.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.RectMask2D.AddClippable(UnityEngine.UI.IClippable)">
            <summary>
            Add a IClippable to be tracked by the mask.
            </summary>
            <param name="clippable">Add the clippable object for this mask</param>
        </member>
        <member name="M:UnityEngine.UI.RectMask2D.RemoveClippable(UnityEngine.UI.IClippable)">
            <summary>
            Remove an IClippable from being tracked by the mask.
            </summary>
            <param name="clippable">Remove the clippable object from this mask</param>
        </member>
        <member name="T:UnityEngine.UI.DefaultControls">
             <summary>
             Utility class for creating default implementations of builtin UI controls.
             </summary>
             <remarks>
             The recommended workflow for using UI controls with the UI system is to create a prefab for each type of control and instantiate those when needed. This way changes can be made to the prefabs which immediately have effect on all used instances.
            
             However, in certain cases there can be reasons to create UI controls entirely from code. The DefaultControls class provide methods to create each of the builtin UI controls. The resulting objects are the same as are obtained from using the corresponding UI menu entries in the GameObject menu in the Editor.
            
             An example use of this is creating menu items for custom new UI controls that mimics the ones that are builtin in Unity. Some such UI controls may contain other UI controls. For example, a scroll view contains scrollbars.By using the DefaultControls methods to create those parts, it is ensured that they are identical in look and setup to the ones provided in the menu items builtin with Unity.
            
             Note that the details of the setup of the UI controls created by the methods in this class may change with later revisions of the UI system.As such, they are not guaranteed to be 100% backwards compatible. It is recommended not to rely on the specific hierarchies of the GameObjects created by these methods, and limit your code to only interface with the root GameObject created by each method.
             </remarks>
        </member>
        <member name="T:UnityEngine.UI.DefaultControls.IFactoryControls">
            <summary>
            Factory interface to create a GameObject in this class.
            It is necessary to use this interface in the whole class so MenuOption and Editor can work using ObjectFactory and default Presets.
            </summary>
            <remarks>
            The only available method is CreateGameObject.
            It needs to be called with every Components the created Object will need because of a bug with Undo and RectTransform.
            Adding a UI component on the created GameObject may crash if done after Undo.SetTransformParent,
            So it's better to prevent such behavior in this class by asking for full creation with all the components.
            </remarks>
        </member>
        <member name="T:UnityEngine.UI.DefaultControls.Resources">
            <summary>
            Object used to pass resources to use for the default controls.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.DefaultControls.Resources.standard">
            <summary>
            The primary sprite to be used for graphical UI elements, used by the button, toggle, and dropdown controls, among others.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.DefaultControls.Resources.background">
            <summary>
            Sprite used for background elements.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.DefaultControls.Resources.inputField">
            <summary>
            Sprite used as background for input fields.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.DefaultControls.Resources.knob">
            <summary>
            Sprite used for knobs that can be dragged, such as on a slider.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.DefaultControls.Resources.checkmark">
            <summary>
            Sprite used for representation of an "on" state when present, such as a checkmark.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.DefaultControls.Resources.dropdown">
            <summary>
            Sprite used to indicate that a button will open a dropdown when clicked.
            </summary>
        </member>
        <member name="F:UnityEngine.UI.DefaultControls.Resources.mask">
            <summary>
            Sprite used for masking purposes, for example to be used for the viewport of a scroll view.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.DefaultControls.CreatePanel(UnityEngine.UI.DefaultControls.Resources)">
            <summary>
            Create the basic UI Panel.
            </summary>
            <remarks>
            Hierarchy:
            (root)
                Image
            </remarks>
            <param name="resources">The resources to use for creation.</param>
            <returns>The root GameObject of the created element.</returns>
        </member>
        <member name="M:UnityEngine.UI.DefaultControls.CreateButton(UnityEngine.UI.DefaultControls.Resources)">
            <summary>
            Create the basic UI button.
            </summary>
            <remarks>
            Hierarchy:
            (root)
                Button
                    -Text
            </remarks>
            <param name="resources">The resources to use for creation.</param>
            <returns>The root GameObject of the created element.</returns>
        </member>
        <member name="M:UnityEngine.UI.DefaultControls.CreateText(UnityEngine.UI.DefaultControls.Resources)">
            <summary>
            Create the basic UI Text.
            </summary>
            <remarks>
            Hierarchy:
            (root)
                Text
            </remarks>
            <param name="resources">The resources to use for creation.</param>
            <returns>The root GameObject of the created element.</returns>
        </member>
        <member name="M:UnityEngine.UI.DefaultControls.CreateImage(UnityEngine.UI.DefaultControls.Resources)">
            <summary>
            Create the basic UI Image.
            </summary>
            <remarks>
            Hierarchy:
            (root)
                Image
            </remarks>
            <param name="resources">The resources to use for creation.</param>
            <returns>The root GameObject of the created element.</returns>
        </member>
        <member name="M:UnityEngine.UI.DefaultControls.CreateRawImage(UnityEngine.UI.DefaultControls.Resources)">
            <summary>
            Create the basic UI RawImage.
            </summary>
            <remarks>
            Hierarchy:
            (root)
                RawImage
            </remarks>
            <param name="resources">The resources to use for creation.</param>
            <returns>The root GameObject of the created element.</returns>
        </member>
        <member name="M:UnityEngine.UI.DefaultControls.CreateSlider(UnityEngine.UI.DefaultControls.Resources)">
            <summary>
            Create the basic UI Slider.
            </summary>
            <remarks>
            Hierarchy:
            (root)
                Slider
                    - Background
                    - Fill Area
                        - Fill
                    - Handle Slide Area
                        - Handle
            </remarks>
            <param name="resources">The resources to use for creation.</param>
            <returns>The root GameObject of the created element.</returns>
        </member>
        <member name="M:UnityEngine.UI.DefaultControls.CreateScrollbar(UnityEngine.UI.DefaultControls.Resources)">
            <summary>
            Create the basic UI Scrollbar.
            </summary>
            <remarks>
            Hierarchy:
            (root)
                Scrollbar
                    - Sliding Area
                        - Handle
            </remarks>
            <param name="resources">The resources to use for creation.</param>
            <returns>The root GameObject of the created element.</returns>
        </member>
        <member name="M:UnityEngine.UI.DefaultControls.CreateToggle(UnityEngine.UI.DefaultControls.Resources)">
            <summary>
            Create the basic UI Toggle.
            </summary>
            <remarks>
            Hierarchy:
            (root)
                Toggle
                    - Background
                        - Checkmark
                    - Label
            </remarks>
            <param name="resources">The resources to use for creation.</param>
            <returns>The root GameObject of the created element.</returns>
        </member>
        <member name="M:UnityEngine.UI.DefaultControls.CreateInputField(UnityEngine.UI.DefaultControls.Resources)">
            <summary>
            Create the basic UI input field.
            </summary>
            <remarks>
            Hierarchy:
            (root)
                InputField
                    - PlaceHolder
                    - Text
            </remarks>
            <param name="resources">The resources to use for creation.</param>
            <returns>The root GameObject of the created element.</returns>
        </member>
        <member name="M:UnityEngine.UI.DefaultControls.CreateDropdown(UnityEngine.UI.DefaultControls.Resources)">
            <summary>
            Create the basic UI dropdown.
            </summary>
            <remarks>
            Hierarchy:
            (root)
                Dropdown
                    - Label
                    - Arrow
                    - Template
                        - Viewport
                            - Content
                                - Item
                                    - Item Background
                                    - Item Checkmark
                                    - Item Label
                        - Scrollbar
                            - Sliding Area
                                - Handle
            </remarks>
            <param name="resources">The resources to use for creation.</param>
            <returns>The root GameObject of the created element.</returns>
        </member>
        <member name="M:UnityEngine.UI.DefaultControls.CreateScrollView(UnityEngine.UI.DefaultControls.Resources)">
            <summary>
            Create the basic UI Scrollview.
            </summary>
            <remarks>
            Hierarchy:
            (root)
                Scrollview
                    - Viewport
                        - Content
                    - Scrollbar Horizontal
                        - Sliding Area
                            - Handle
                    - Scrollbar Vertical
                        - Sliding Area
                            - Handle
            </remarks>
            <param name="resources">The resources to use for creation.</param>
            <returns>The root GameObject of the created element.</returns>
        </member>
        <member name="M:UnityEngine.UI.MultipleDisplayUtilities.GetRelativeMousePositionForDrag(UnityEngine.EventSystems.PointerEventData,UnityEngine.Vector2@)">
            <summary>
            Converts the current drag position into a relative position for the display.
            </summary>
            <param name="eventData"></param>
            <param name="position"></param>
            <returns>Returns true except when the drag operation is not on the same display as it originated</returns>
        </member>
        <member name="M:UnityEngine.UI.MultipleDisplayUtilities.RelativeMouseAtScaled(UnityEngine.Vector2)">
            <summary>
            A version of Display.RelativeMouseAt that scales the position when the main display has a different rendering resolution to the system resolution.
            By default, the mouse position is relative to the main render area, we need to adjust this so it is relative to the system resolution
            in order to correctly determine the position on other displays.
            </summary>
            <returns></returns>
        </member>
        <member name="T:UnityEngine.UI.IMaskable">
            <summary>
            This element is capable of being masked out.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.IMaskable.RecalculateMasking">
            <summary>
            Recalculate masking for this element and all children elements.
            </summary>
            <remarks>
            Use this to update the internal state (recreate materials etc).
            </remarks>
        </member>
        <member name="T:UnityEngine.UI.ClipperRegistry">
            <summary>
            Registry class to keep track of all IClippers that exist in the scene
            </summary>
            <remarks>
            This is used during the CanvasUpdate loop to cull clippable elements. The clipping is called after layout, but before Graphic update.
            </remarks>
        </member>
        <member name="P:UnityEngine.UI.ClipperRegistry.instance">
            <summary>
            The singleton instance of the clipper registry.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.ClipperRegistry.Cull">
            <summary>
            Perform the clipping on all registered IClipper
            </summary>
        </member>
        <member name="M:UnityEngine.UI.ClipperRegistry.Register(UnityEngine.UI.IClipper)">
            <summary>
            Register a unique IClipper element
            </summary>
            <param name="c">The clipper element to add</param>
        </member>
        <member name="M:UnityEngine.UI.ClipperRegistry.Unregister(UnityEngine.UI.IClipper)">
            <summary>
            UnRegister a IClipper element
            </summary>
            <param name="c">The Element to try and remove.</param>
        </member>
        <member name="M:UnityEngine.UI.ClipperRegistry.Disable(UnityEngine.UI.IClipper)">
            <summary>
            Disable a IClipper element
            </summary>
            <param name="c">The Element to try and disable.</param>
        </member>
        <member name="T:UnityEngine.UI.Clipping">
            <summary>
            Utility class to help when clipping using IClipper.
            </summary>
        </member>
        <member name="M:UnityEngine.UI.Clipping.FindCullAndClipWorldRect(System.Collections.Generic.List{UnityEngine.UI.RectMask2D},System.Boolean@)">
            <summary>
            Find the Rect to use for clipping.
            Given the input RectMask2ds find a rectangle that is the overlap of all the inputs.
            </summary>
            <param name="rectMaskParents">RectMasks to build the overlap rect from.</param>
            <param name="validRect">Was there a valid Rect found.</param>
            <returns>The final compounded overlapping rect</returns>
        </member>
        <member name="T:UnityEngine.EventSystems.PointerEventData">
            <summary>
            Each touch event creates one of these containing all the relevant information.
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.PointerEventData.InputButton">
            <summary>
            Input press tracking.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.PointerEventData.InputButton.Left">
            <summary>
            Left button
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.PointerEventData.InputButton.Right">
            <summary>
            Right button.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.PointerEventData.InputButton.Middle">
            <summary>
            Middle button
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.PointerEventData.FramePressState">
            <summary>
            The state of a press for the given frame.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.PointerEventData.FramePressState.Pressed">
            <summary>
            Button was pressed this frame.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.PointerEventData.FramePressState.Released">
            <summary>
            Button was released this frame.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.PointerEventData.FramePressState.PressedAndReleased">
            <summary>
            Button was pressed and released this frame.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.PointerEventData.FramePressState.NotChanged">
            <summary>
            Same as last frame.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.pointerEnter">
            <summary>
            The object that received 'OnPointerEnter'.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.lastPress">
            <summary>
            The raw GameObject for the last press event. This means that it is the 'pressed' GameObject even if it can not receive the press event itself.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.rawPointerPress">
            <summary>
            The object that the press happened on even if it can not handle the press event.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.pointerDrag">
            <summary>
            The object that is receiving 'OnDrag'.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.pointerClick">
            <summary>
            The object that should receive the 'OnPointerClick' event.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.pointerCurrentRaycast">
            <summary>
            RaycastResult associated with the current event.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.pointerPressRaycast">
            <summary>
            RaycastResult associated with the pointer press.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.eligibleForClick">
            <summary>
            Is it possible to click this frame
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.pointerId">
            <summary>
            Id of the pointer (touch id).
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.position">
            <summary>
            Current pointer position.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.delta">
            <summary>
            Pointer delta since last update.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.pressPosition">
            <summary>
            Position of the press.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.worldPosition">
            <summary>
            World-space position where a ray cast into the screen hits something
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.worldNormal">
            <summary>
            World-space normal where a ray cast into the screen hits something
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.clickTime">
            <summary>
            The last time a click event was sent. Used for double click
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.clickCount">
             <summary>
             Number of clicks in a row.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.UI;
             using UnityEngine.EventSystems;// Required when using Event data.
            
             public class ExampleClass : MonoBehaviour, IPointerDownHandler
             {
                 public void OnPointerDown(PointerEventData eventData)
                 {
                     //Grab the number of consecutive clicks and assign it to an integer varible.
                     int i = eventData.clickCount;
                     //Display the click count.
                     Debug.Log(i);
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.scrollDelta">
            <summary>
            The amount of scroll since the last update.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.useDragThreshold">
            <summary>
            Should a drag threshold be used?
            </summary>
            <remarks>
            If you do not want a drag threshold set this to false in IInitializePotentialDragHandler.OnInitializePotentialDrag.
            </remarks>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.dragging">
            <summary>
            Is a drag operation currently occuring.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.button">
            <summary>
            The EventSystems.PointerEventData.InputButton for this event.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.pressure">
            <summary>
            The amount of pressure currently applied by a touch.
            </summary>
            <remarks>
            If the device does not report pressure, the value of this property is 1.0f.
            </remarks>
            <seealso cref="T:UnityEngine.UIElements.IPointerEvent" />
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.tangentialPressure">
            <summary>
            The pressure applied to an additional pressure-sensitive control on the stylus.
            </summary>
            <seealso cref="T:UnityEngine.UIElements.IPointerEvent" />
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.altitudeAngle">
            <summary>
            The angle of the stylus relative to the surface, in radians
            </summary>
            <remarks>
            A value of 0 indicates that the stylus is parallel to the surface. A value of pi/2 indicates that it is perpendicular to the surface.
            </remarks>
            <seealso cref="T:UnityEngine.UIElements.IPointerEvent" />
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.azimuthAngle">
            <summary>
            The angle of the stylus relative to the x-axis, in radians.
            </summary>
            <remarks>
            A value of 0 indicates that the stylus is pointed along the x-axis of the device.
            </remarks>
            <seealso cref="T:UnityEngine.UIElements.IPointerEvent" />
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.twist">
            <summary>
            The rotation of the stylus around its axis, in radians.
            </summary>
            <seealso cref="T:UnityEngine.UIElements.IPointerEvent" />
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.radius">
            <summary>
            An estimate of the radius of a touch.
            </summary>
            <remarks>
            Add `radiusVariance` to get the maximum touch radius, subtract it to get the minimum touch radius.
            </remarks>
            <seealso cref="T:UnityEngine.UIElements.IPointerEvent" />
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.radiusVariance">
            <summary>
            The accuracy of the touch radius.
            </summary>
            <remarks>
            Add this value to the radius to get the maximum touch radius, subtract it to get the minimum touch radius.
            </remarks>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.fullyExited">
            <summary>
            Specifies in the case of a pointer exit if the pointer has fully exited the area or if it has just entered a child.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.reentered">
            <summary>
            Specifies in the case of a pointer enter if the pointer has entered a new area or if it has just reentered a parent after leaving a child.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.PointerEventData.#ctor(UnityEngine.EventSystems.EventSystem)">
            <seealso cref="T:UnityEngine.UIElements.IPointerEvent" />
        </member>
        <member name="M:UnityEngine.EventSystems.PointerEventData.IsPointerMoving">
            <summary>
            Is the pointer moving.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.PointerEventData.IsScrolling">
            <summary>
            Is scroll being used on the input device.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.enterEventCamera">
            <summary>
            The camera associated with the last OnPointerEnter event.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.pressEventCamera">
            <summary>
            The camera associated with the last OnPointerPress event.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PointerEventData.pointerPress">
            <summary>
            The GameObject that received the OnPointerDown.
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.MoveDirection">
             <summary>
             This is an 4 direction movement enum.
             </summary>
             <remarks>
             MoveDirection provides a way of switching between moving states. You must assign these states to actions, such as moving the GameObject by an up vector when in the Up state.
             Having states like these are easier to identify than always having to include a large amount of vectors and calculations.Instead, you define what you want the state to do in only one part, and switch to the appropriate state when it is needed.
             </remarks>
             <example>
             <code>
             <![CDATA[
             //This is a full example of how a GameObject changes direction using MoveDirection states
             //Assign this script to a visible GameObject (with a Rigidbody attached) to see it in action
            
             using UnityEngine;
             using UnityEngine.EventSystems;
            
             public class Example : MonoBehaviour
             {
                 Vector3 m_StartPosition, m_StartForce;
                 Rigidbody m_Rigidbody;
                 //Use Enum for easy switching between direction states
                 MoveDirection m_MoveDirection;
            
                 //Use these Vectors for moving Rigidbody components
                 Vector3 m_ResetVector;
                 Vector3 m_UpVector;
                 Vector3 m_RightVector;
                 const float speed = 5.0f;
            
                 void Start()
                 {
                     //You get the Rigidbody component attached to the GameObject
                     m_Rigidbody = GetComponent<Rigidbody>();
                     //This starts with the Rigidbody not moving in any direction at all
                     m_MoveDirection = MoveDirection.None;
            
                     //These are the GameObject’s starting position and Rigidbody position
                     m_StartPosition = transform.position;
                     m_StartForce = m_Rigidbody.transform.position;
            
                     //This Vector is set to 1 in the y axis (for moving upwards)
                     m_UpVector = Vector3.up;
                     //This Vector is set to 1 in the x axis (for moving in the right direction)
                     m_RightVector = Vector3.right;
                     //This Vector is zeroed out for when the Rigidbody should not move
                     m_ResetVector = Vector3.zero;
                 }
            
                 void Update()
                 {
                     //This switches the direction depending on button presses
                     switch (m_MoveDirection)
                     {
                         //The starting state which resets the object
                         case MoveDirection.None:
                             //Reset to the starting position of the GameObject and Rigidbody
                             transform.position = m_StartPosition;
                             m_Rigidbody.transform.position = m_StartForce;
                             //This resets the velocity of the Rigidbody
                             m_Rigidbody.velocity = m_ResetVector;
                             break;
            
                         //This is for moving in an upwards direction
                         case MoveDirection.Up:
                             //Change the velocity so that the Rigidbody travels upwards
                             m_Rigidbody.velocity = m_UpVector * speed;
                             break;
            
                         //This is for moving left
                         case MoveDirection.Left:
                             //This moves the Rigidbody to the left (minus right Vector)
                             m_Rigidbody.velocity = -m_RightVector * speed;
                             break;
            
                         //This is for moving right
                         case MoveDirection.Right:
                             //This moves the Rigidbody to the right
                             m_Rigidbody.velocity = m_RightVector * speed;
                             break;
            
                         //This is for moving down
                         case MoveDirection.Down:
                             //This moves the Rigidbody down
                             m_Rigidbody.velocity = -m_UpVector * speed;
                             break;
                     }
                 }
            
                 void OnGUI()
                 {
                     //Press the reset Button to switch to no mode
                     if (GUI.Button(new Rect(100, 0, 150, 30), "Reset"))
                     {
                         //Switch to start/reset case
                         m_MoveDirection = MoveDirection.None;
                     }
            
                     //Press the Left button to switch the Rigidbody direction to the left
                     if (GUI.Button(new Rect(100, 30, 150, 30), "Move Left"))
                     {
                         //Switch to the left direction
                         m_MoveDirection = MoveDirection.Left;
                     }
            
                     //Press the Up button to switch the Rigidbody direction to upwards
                     if (GUI.Button(new Rect(100, 60, 150, 30), "Move Up"))
                     {
                         //Switch to Up Direction
                         m_MoveDirection = MoveDirection.Up;
                     }
            
                     //Press the Down button to switch the direction to down
                     if (GUI.Button(new Rect(100, 90, 150, 30), "Move Down"))
                     {
                         //Switch to Down Direction
                         m_MoveDirection = MoveDirection.Down;
                     }
            
                     //Press the right button to switch to the right direction
                     if (GUI.Button(new Rect(100, 120, 150, 30), "Move Right"))
                     {
                         //Switch to Right Direction
                         m_MoveDirection = MoveDirection.Right;
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="F:UnityEngine.EventSystems.MoveDirection.Left">
             <summary>
             This is the Left state of MoveDirection.  Assign functionality for moving to the left.
             </summary>
             <remarks>
             Use the Left state for an easily identifiable way of moving a GameObject to the left (-1 , 0 , 0). This is a state without any predefined functionality. Before using this state, you should define what your GameObject will do in code.
             </remarks>
             <example>
             <code>
             <![CDATA[
             //Assign this script to a visible GameObject (with a Rigidbody attached) to see this in action
            
             using UnityEngine;
             using UnityEngine.EventSystems;
            
             public class Example : MonoBehaviour
             {
                 Vector3 m_StartPosition, m_StartForce;
                 Rigidbody m_Rigidbody;
                 //Use Enum for easy switching between direction states
                 MoveDirection m_MoveDirection;
            
                 //Use these Vectors for moving Rigidbody components
                 Vector3 m_ResetVector;
                 Vector3 m_RightVector;
                 const float speed = 5.0f;
            
                 void Start()
                 {
                     //You get the Rigidbody component attached to the GameObject
                     m_Rigidbody = GetComponent<Rigidbody>();
                     //This starts with the Rigidbody not moving in any direction at all
                     m_MoveDirection = MoveDirection.None;
            
                     //These are the GameObject’s starting position and Rigidbody position
                     m_StartPosition = transform.position;
                     m_StartForce = m_Rigidbody.transform.position;
            
                     //This Vector is set to 1 in the x axis (for moving in the right direction)
                     m_RightVector = Vector3.right;
                     //This Vector is zeroed out for when the Rigidbody should not move
                     m_ResetVector = Vector3.zero;
                 }
            
                 void Update()
                 {
                     //This switches the direction depending on button presses
                     switch (m_MoveDirection)
                     {
                         //The starting state which resets the object
                         case MoveDirection.None:
                             //Reset to the starting position of the GameObject and Rigidbody
                             transform.position = m_StartPosition;
                             m_Rigidbody.transform.position = m_StartForce;
                             //This resets the velocity of the Rigidbody
                             m_Rigidbody.velocity = m_ResetVector;
                             break;
            
                         //This is for moving left
                         case MoveDirection.Left:
                             //This moves the Rigidbody to the left (minus right Vector)
                             m_Rigidbody.velocity = -m_RightVector * speed;
                             break;
                     }
                 }
            
                 void OnGUI()
                 {
                     //Press the reset Button to switch to no mode
                     if (GUI.Button(new Rect(100, 0, 150, 30), "Reset"))
                     {
                         //Switch to start/reset case
                         m_MoveDirection = MoveDirection.None;
                     }
            
                     //Press the Left button to switch the Rigidbody direction to the left
                     if (GUI.Button(new Rect(100, 30, 150, 30), "Move Left"))
                     {
                         //Switch to the left direction
                         m_MoveDirection = MoveDirection.Left;
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="F:UnityEngine.EventSystems.MoveDirection.Up">
             <summary>
             This is the Up state of MoveDirection.  Assign functionality for moving in an upward direction.
             </summary>
             <remarks>
             Use the Up state for an easily identifiable way of moving a GameObject upwards (0 , 1 , 0). This is a state without any predefined functionality. Before using this state, you should define what your GameObject will do in code.
             </remarks>
             <example>
             <code>
             <![CDATA[
             //Attach this script to a GameObject with a Rigidbody component. Press the "Move Up" button in Game view to see it in action.
            
             using UnityEngine;
             using UnityEngine.EventSystems;
            
             public class Example : MonoBehaviour
             {
                 Vector3 m_StartPosition, m_StartForce;
                 Rigidbody m_Rigidbody;
                 //Use Enum for easy switching between direction states
                 MoveDirection m_MoveDirection;
            
                 //Use these Vectors for moving Rigidbody components
                 Vector3 m_ResetVector;
                 Vector3 m_UpVector;
                 const float speed = 10.0f;
            
                 void Start()
                 {
                     //You get the Rigidbody component attached to the GameObject
                     m_Rigidbody = GetComponent<Rigidbody>();
                     //This starts with the Rigidbody not moving in any direction at all
                     m_MoveDirection = MoveDirection.None;
            
                     //These are the GameObject’s starting position and Rigidbody position
                     m_StartPosition = transform.position;
                     m_StartForce = m_Rigidbody.transform.position;
            
                     //This Vector is set to 1 in the y axis (for moving upwards)
                     m_UpVector = Vector3.up;
                     //This Vector is zeroed out for when the Rigidbody should not move
                     m_ResetVector = Vector3.zero;
                 }
            
                 void Update()
                 {
                     //This switches the direction depending on button presses
                     switch (m_MoveDirection)
                     {
                         //The starting state which resets the object
                         case MoveDirection.None:
                             //Reset to the starting position of the GameObject and Rigidbody
                             transform.position = m_StartPosition;
                             m_Rigidbody.transform.position = m_StartForce;
                             //This resets the velocity of the Rigidbody
                             m_Rigidbody.velocity = m_ResetVector;
                             break;
            
                         //This is for moving in an upwards direction
                         case MoveDirection.Up:
                             //Change the velocity so that the Rigidbody travels upwards
                             m_Rigidbody.velocity = m_UpVector * speed;
                             break;
                     }
                 }
            
                 void OnGUI()
                 {
                     //Press the reset Button to switch to no mode
                     if (GUI.Button(new Rect(100, 0, 150, 30), "Reset"))
                     {
                         //Switch to start/reset case
                         m_MoveDirection = MoveDirection.None;
                     }
            
                     //Press the Up button to switch the Rigidbody direction to upwards
                     if (GUI.Button(new Rect(100, 60, 150, 30), "Move Up"))
                     {
                         //Switch to Up Direction
                         m_MoveDirection = MoveDirection.Up;
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="F:UnityEngine.EventSystems.MoveDirection.Right">
             <summary>
             This is the Right state of MoveDirection. Assign functionality for moving to the right.
             </summary>
             <remarks>
             Use the Right state for an easily identifiable way of moving a GameObject to the right (1 , 0 , 0). This is a state without any predefined functionality. Before using this state, you should define what your GameObject will do in code.
             </remarks>
             <example>
             <code>
             <![CDATA[
             //Attach this script to a GameObject with a Rigidbody component. Press the "Move Right" button in Game view to see it in action.
            
             using UnityEngine;
             using UnityEngine.EventSystems;
            
             public class MoveDirectionExample : MonoBehaviour
             {
                 Vector3 m_StartPosition, m_StartForce;
                 Rigidbody m_Rigidbody;
                 //Use Enum for easy switching between direction states
                 MoveDirection m_MoveDirection;
            
                 //Use these Vectors for moving Rigidbody components
                 Vector3 m_ResetVector;
                 Vector3 m_RightVector;
                 const float speed = 5.0f;
            
                 void Start()
                 {
                     //You get the Rigidbody component attached to the GameObject
                     m_Rigidbody = GetComponent<Rigidbody>();
                     //This starts with the Rigidbody not moving in any direction at all
                     m_MoveDirection = MoveDirection.None;
            
                     //These are the GameObject’s starting position and Rigidbody position
                     m_StartPosition = transform.position;
                     m_StartForce = m_Rigidbody.transform.position;
            
                     //This Vector is set to 1 in the x axis (for moving in the right direction)
                     m_RightVector = Vector3.right;
                     //This Vector is zeroed out for when the Rigidbody should not move
                     m_ResetVector = Vector3.zero;
                 }
            
                 void Update()
                 {
                     //This switches the direction depending on button presses
                     switch (m_MoveDirection)
                     {
                         //The starting state which resets the object
                         case MoveDirection.None:
                             //Reset to the starting position of the GameObject and Rigidbody
                             transform.position = m_StartPosition;
                             m_Rigidbody.transform.position = m_StartForce;
                             //This resets the velocity of the Rigidbody
                             m_Rigidbody.velocity = m_ResetVector;
                             break;
            
                         //This is for moving right
                         case MoveDirection.Right:
                             //This moves the Rigidbody to the right
                             m_Rigidbody.velocity = m_RightVector * speed;
                             break;
                     }
                 }
            
                 void OnGUI()
                 {
                     //Press the reset Button to switch to no mode
                     if (GUI.Button(new Rect(100, 0, 150, 30), "Reset"))
                     {
                         //Switch to start/reset case
                         m_MoveDirection = MoveDirection.None;
                     }
            
                     //Press the Left button to switch the Rigidbody direction to the right
                     if (GUI.Button(new Rect(100, 30, 150, 30), "Move Right"))
                     {
                         //Switch to the left direction
                         m_MoveDirection = MoveDirection.Right;
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="F:UnityEngine.EventSystems.MoveDirection.Down">
             <summary>
             The Down State of MoveDirection. Assign functionality for moving in a downward direction.
             </summary>
             <remarks>
             Use the Down state for an easily identifiable way of moving a GameObject downwards (0 , -1 , 0). This is a state without any predefined functionality. Before using this state, you should define what your GameObject will do in code.
             </remarks>
             <example>
             <code>
             <![CDATA[
             //Attach this script to a GameObject with a Rigidbody component. Press the "Move Down" button in Game view to see it in action.
            
             using UnityEngine;
             using UnityEngine.EventSystems;
            
             public class Example : MonoBehaviour
             {
                 Vector3 m_StartPosition, m_StartForce;
                 Rigidbody m_Rigidbody;
                 //Use Enum for easy switching between direction states
                 MoveDirection m_MoveDirection;
            
                 //Use these Vectors for moving Rigidbody components
                 Vector3 m_ResetVector;
                 Vector3 m_UpVector;
                 const float speed = 10.0f;
            
                 void Start()
                 {
                     //You get the Rigidbody component attached to the GameObject
                     m_Rigidbody = GetComponent<Rigidbody>();
                     //This starts with the Rigidbody not moving in any direction at all
                     m_MoveDirection = MoveDirection.None;
            
                     //These are the GameObject’s starting position and Rigidbody position
                     m_StartPosition = transform.position;
                     m_StartForce = m_Rigidbody.transform.position;
            
                     //This Vector is set to 1 in the y axis (for moving upwards)
                     m_UpVector = Vector3.up;
                     //This Vector is zeroed out for when the Rigidbody should not move
                     m_ResetVector = Vector3.zero;
                 }
            
                 void Update()
                 {
                     //This switches the direction depending on button presses
                     switch (m_MoveDirection)
                     {
                         //The starting state which resets the object
                         case MoveDirection.None:
                             //Reset to the starting position of the GameObject and Rigidbody
                             transform.position = m_StartPosition;
                             m_Rigidbody.transform.position = m_StartForce;
                             //This resets the velocity of the Rigidbody
                             m_Rigidbody.velocity = m_ResetVector;
                             break;
            
                         //This is for moving down
                         case MoveDirection.Down:
                             //This moves the Rigidbody down
                             m_Rigidbody.velocity = -m_UpVector * speed;
                             break;
                     }
                 }
            
                 void OnGUI()
                 {
                     //Press the reset Button to switch to no mode
                     if (GUI.Button(new Rect(100, 0, 150, 30), "Reset"))
                     {
                         //Switch to start/reset case
                         m_MoveDirection = MoveDirection.None;
                     }
            
                     //Press the Down button to switch the direction to down
                     if (GUI.Button(new Rect(100, 90, 150, 30), "Move Down"))
                     {
                         //Switch to Down Direction
                         m_MoveDirection = MoveDirection.Down;
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="F:UnityEngine.EventSystems.MoveDirection.None">
             <summary>
             This is the None state. Assign functionality that stops movement.
             </summary>
             <remarks>
             Use the None state for an easily identifiable way of stopping, resetting or initialising a GameObject's movement. This is a state without any predefined functionality. Before using this state, you should define what your GameObject will do in code.
             </remarks>
             <example>
             <code>
             <![CDATA[
             //Attach this script to a GameObject with a Rigidbody attached. This script starts off on the ModeDirection.None state but changes depending on buttons you press.
            
             using UnityEngine;
             using UnityEngine.EventSystems;
            
             public class Example : MonoBehaviour
             {
                 Vector3 m_StartPosition, m_StartForce;
                 Rigidbody m_Rigidbody;
                 //Use Enum for easy switching between direction states
                 MoveDirection m_MoveDirection;
            
                 //Use these Vectors for moving Rigidbody components
                 Vector3 m_ResetVector;
                 Vector3 m_UpVector;
                 const float speed = 10.0f;
            
                 void Start()
                 {
                     //You get the Rigidbody component attached to the GameObject
                     m_Rigidbody = GetComponent<Rigidbody>();
                     //This starts with the Rigidbody not moving in any direction at all
                     m_MoveDirection = MoveDirection.None;
            
                     //These are the GameObject’s starting position and Rigidbody position
                     m_StartPosition = transform.position;
                     m_StartForce = m_Rigidbody.transform.position;
            
                     //This Vector is set to 1 in the y axis (for moving upwards)
                     m_UpVector = Vector3.up;
                     //This Vector is zeroed out for when the Rigidbody should not move
                     m_ResetVector = Vector3.zero;
                 }
            
                 void Update()
                 {
                     //This switches the direction depending on button presses
                     switch (m_MoveDirection)
                     {
                         //The starting state which resets the object
                         case MoveDirection.None:
                             //Reset to the starting position of the GameObject and Rigidbody
                             transform.position = m_StartPosition;
                             m_Rigidbody.transform.position = m_StartForce;
                             //This resets the velocity of the Rigidbody
                             m_Rigidbody.velocity = m_ResetVector;
                             break;
            
                         //This is for moving down
                         case MoveDirection.Down:
                             //This moves the Rigidbody down
                             m_Rigidbody.velocity = -m_UpVector * speed;
                             break;
                     }
                 }
            
                 void OnGUI()
                 {
                     //Press the reset Button to switch to no mode
                     if (GUI.Button(new Rect(100, 0, 150, 30), "Reset"))
                     {
                         //Switch to start/reset case
                         m_MoveDirection = MoveDirection.None;
                     }
            
                     //Press the Down button to switch the direction to down
                     if (GUI.Button(new Rect(100, 90, 150, 30), "Move Down"))
                     {
                         //Switch to Down Direction
                         m_MoveDirection = MoveDirection.Down;
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="T:UnityEngine.EventSystems.IEventSystemHandler">
            <summary>
            Base class that all EventSystem events inherit from.
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.IPointerMoveHandler">
            <summary>
            Interface to implement if you wish to receive OnPointerMove callbacks.
            </summary>
            <remarks>
            Criteria for this event is implementation dependent. For example see StandAloneInputModule.
            </remarks>
        </member>
        <member name="M:UnityEngine.EventSystems.IPointerMoveHandler.OnPointerMove(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Use this callback to detect pointer move events
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.IPointerEnterHandler">
            <summary>
            Interface to implement if you wish to receive OnPointerEnter callbacks.
            </summary>
            <remarks>
            Criteria for this event is implementation dependent. For example see StandAloneInputModule.
            </remarks>
        </member>
        <member name="M:UnityEngine.EventSystems.IPointerEnterHandler.OnPointerEnter(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Use this callback to detect pointer enter events
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.IPointerExitHandler">
            <summary>
            Interface to implement if you wish to receive OnPointerExit callbacks.
            </summary>
            <remarks>
            Criteria for this event is implementation dependent. For example see StandAloneInputModule.
            </remarks>
        </member>
        <member name="M:UnityEngine.EventSystems.IPointerExitHandler.OnPointerExit(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Use this callback to detect pointer exit events
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.IPointerDownHandler">
            <summary>
            Interface to implement if you wish to receive OnPointerDown callbacks.
            </summary>
            <remarks>
            Criteria for this event is implementation dependent. For example see StandAloneInputModule.
            </remarks>
        </member>
        <member name="M:UnityEngine.EventSystems.IPointerDownHandler.OnPointerDown(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Use this callback to detect pointer down events.
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.IPointerUpHandler">
            <summary>
            Interface to implement if you wish to receive OnPointerUp callbacks.
            Note: In order to receive OnPointerUp callbacks, you must also implement the EventSystems.IPointerDownHandler|IPointerDownHandler interface
            </summary>
            <remarks>
            Criteria for this event is implementation dependent. For example see StandAloneInputModule.
            </remarks>
        </member>
        <member name="M:UnityEngine.EventSystems.IPointerUpHandler.OnPointerUp(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Use this callback to detect pointer up events.
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.IPointerClickHandler">
             <summary>
             Interface to implement if you wish to receive OnPointerClick callbacks.
             </summary>
             <remarks>
             Criteria for this event is implementation dependent. For example see StandAloneInputModule.
             </remarks>
             <remarks>
             Use the IPointerClickHandler Interface to handle click input using OnPointerClick callbacks. Ensure an Event System exists in the Scene to allow click detection. For click detection on non-UI GameObjects, ensure a EventSystems.PhysicsRaycaster is attached to the Camera.
             </remarks>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using UnityEngine.EventSystems;
            
             public class Example : MonoBehaviour, IPointerClickHandler
             {
                 //Detect if a click occurs
                 public void OnPointerClick(PointerEventData pointerEventData)
                 {
                     //Output to console the clicked GameObject's name and the following message. You can replace this with your own actions for when clicking the GameObject.
                     Debug.Log(name + " Game Object Clicked!");
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.EventSystems.IPointerClickHandler.OnPointerClick(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Use this callback to detect clicks.
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.IBeginDragHandler">
            <summary>
            Interface to implement if you wish to receive OnBeginDrag callbacks.
            Note: You need to implement IDragHandler in addition to IBeginDragHandler.
            </summary>
            <remarks>
            Criteria for this event is implementation dependent. For example see StandAloneInputModule.
            </remarks>
        </member>
        <member name="M:UnityEngine.EventSystems.IBeginDragHandler.OnBeginDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called by a BaseInputModule before a drag is started.
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.IInitializePotentialDragHandler">
            <summary>
            Interface to implement if you wish to receive OnInitializePotentialDrag callbacks.
            </summary>
            <remarks>
            Criteria for this event is implementation dependent. For example see StandAloneInputModule.
            </remarks>
        </member>
        <member name="M:UnityEngine.EventSystems.IInitializePotentialDragHandler.OnInitializePotentialDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called by a BaseInputModule when a drag has been found but before it is valid to begin the drag.
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.IDragHandler">
             <summary>
             Interface to implement if you wish to receive OnDrag callbacks.
             </summary>
             <remarks>
             Criteria for this event is implementation dependent. For example see StandAloneInputModule.
             </remarks>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using UnityEngine.EventSystems;
             using UnityEngine.UI;
            
             [RequireComponent(typeof(Image))]
             public class DragMe : MonoBehaviour, IBeginDragHandler, IDragHandler, IEndDragHandler
             {
                 public bool dragOnSurfaces = true;
            
                 private GameObject m_DraggingIcon;
                 private RectTransform m_DraggingPlane;
            
                 public void OnBeginDrag(PointerEventData eventData)
                 {
                     var canvas = FindInParents<Canvas>(gameObject);
                     if (canvas == null)
                         return;
            
                     // We have clicked something that can be dragged.
                     // What we want to do is create an icon for this.
                     m_DraggingIcon = new GameObject("icon");
            
                     m_DraggingIcon.transform.SetParent(canvas.transform, false);
                     m_DraggingIcon.transform.SetAsLastSibling();
            
                     var image = m_DraggingIcon.AddComponent<Image>();
            
                     image.sprite = GetComponent<Image>().sprite;
                     image.SetNativeSize();
            
                     if (dragOnSurfaces)
                         m_DraggingPlane = transform as RectTransform;
                     else
                         m_DraggingPlane = canvas.transform as RectTransform;
            
                     SetDraggedPosition(eventData);
                 }
            
                 public void OnDrag(PointerEventData data)
                 {
                     if (m_DraggingIcon != null)
                         SetDraggedPosition(data);
                 }
            
                 private void SetDraggedPosition(PointerEventData data)
                 {
                     if (dragOnSurfaces && data.pointerEnter != null && data.pointerEnter.transform as RectTransform != null)
                         m_DraggingPlane = data.pointerEnter.transform as RectTransform;
            
                     var rt = m_DraggingIcon.GetComponent<RectTransform>();
                     Vector3 globalMousePos;
                     if (RectTransformUtility.ScreenPointToWorldPointInRectangle(m_DraggingPlane, data.position, data.pressEventCamera, out globalMousePos))
                     {
                         rt.position = globalMousePos;
                         rt.rotation = m_DraggingPlane.rotation;
                     }
                 }
            
                 public void OnEndDrag(PointerEventData eventData)
                 {
                     if (m_DraggingIcon != null)
                         Destroy(m_DraggingIcon);
                 }
            
                 static public T FindInParents<T>(GameObject go) where T : Component
                 {
                     if (go == null) return null;
                     var comp = go.GetComponent<T>();
            
                     if (comp != null)
                         return comp;
            
                     Transform t = go.transform.parent;
                     while (t != null && comp == null)
                     {
                         comp = t.gameObject.GetComponent<T>();
                         t = t.parent;
                     }
                     return comp;
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.EventSystems.IDragHandler.OnDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            When dragging is occurring this will be called every time the cursor is moved.
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.IEndDragHandler">
            <summary>
            Interface to implement if you wish to receive OnEndDrag callbacks.
            Note: You need to implement IDragHandler in addition to IEndDragHandler.
            </summary>
            <remarks>
            Criteria for this event is implementation dependent. For example see StandAloneInputModule.
            </remarks>
        </member>
        <member name="M:UnityEngine.EventSystems.IEndDragHandler.OnEndDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called by a BaseInputModule when a drag is ended.
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.IDropHandler">
             <summary>
             Interface to implement if you wish to receive OnDrop callbacks.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using UnityEngine.EventSystems;
            
             public class DropMe : MonoBehaviour, IDropHandler
             {
                 public void OnDrop(PointerEventData data)
                 {
                     if (data.pointerDrag != null)
                     {
                         Debug.Log ("Dropped object was: "  + data.pointerDrag);
                     }
                 }
             }
             ]]>
            </code>
             </example>
             <remarks>
             Criteria for this event is implementation dependent. For example see StandAloneInputModule.
             </remarks>
        </member>
        <member name="M:UnityEngine.EventSystems.IDropHandler.OnDrop(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called by a BaseInputModule on a target that can accept a drop.
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.IScrollHandler">
            <summary>
            Interface to implement if you wish to receive OnScroll callbacks.
            </summary>
            <remarks>
            Criteria for this event is implementation dependent. For example see StandAloneInputModule.
            </remarks>
        </member>
        <member name="M:UnityEngine.EventSystems.IScrollHandler.OnScroll(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Use this callback to detect scroll events.
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.IUpdateSelectedHandler">
            <summary>
            Interface to implement if you wish to receive OnUpdateSelected callbacks.
            </summary>
            <remarks>
            Criteria for this event is implementation dependent. For example see StandAloneInputModule.
            </remarks>
        </member>
        <member name="M:UnityEngine.EventSystems.IUpdateSelectedHandler.OnUpdateSelected(UnityEngine.EventSystems.BaseEventData)">
             <summary>
             Called by the EventSystem when the object associated with this EventTrigger is updated.
             </summary>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using UnityEngine.EventSystems;
            
             public class UpdateSelectedExample : MonoBehaviour, IUpdateSelectedHandler
             {
                 public void OnUpdateSelected(BaseEventData data)
                 {
                     Debug.Log("OnUpdateSelected called.");
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="T:UnityEngine.EventSystems.ISelectHandler">
            <summary>
            Interface to implement if you wish to receive OnSelect callbacks.
            </summary>
            <remarks>
            Criteria for this event is implementation dependent. For example see StandAloneInputModule.
            </remarks>
        </member>
        <member name="T:UnityEngine.EventSystems.IDeselectHandler">
            <summary>
            Interface to implement if you wish to receive OnDeselect callbacks.
            </summary>
            <remarks>
            Criteria for this event is implementation dependent. For example see StandAloneInputModule.
            </remarks>
        </member>
        <member name="M:UnityEngine.EventSystems.IDeselectHandler.OnDeselect(UnityEngine.EventSystems.BaseEventData)">
            <summary>
            Called by the EventSystem when a new object is being selected.
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.IMoveHandler">
            <summary>
            Interface to implement if you wish to receive OnMove callbacks.
            </summary>
            <remarks>
            Criteria for this event is implementation dependent. For example see StandAloneInputModule.
            </remarks>
        </member>
        <member name="M:UnityEngine.EventSystems.IMoveHandler.OnMove(UnityEngine.EventSystems.AxisEventData)">
            <summary>
            Called by a BaseInputModule when a move event occurs.
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.ISubmitHandler">
            <summary>
            Interface to implement if you wish to receive OnSubmit callbacks.
            </summary>
            <remarks>
            Criteria for this event is implementation dependent. For example see StandAloneInputModule.
            </remarks>
        </member>
        <member name="T:UnityEngine.EventSystems.ICancelHandler">
            <summary>
            Interface to implement if you wish to receive OnCancel callbacks.
            </summary>
            <remarks>
            Criteria for this event is implementation dependent. For example see StandAloneInputModule.
            </remarks>
        </member>
        <member name="T:UnityEngine.EventSystems.EventTriggerType">
            <summary>
            This class is capable of triggering one or more remote functions from a specified event.
            Usage: Attach it to an object with a collider, or to a GUI Graphic of your choice.
            NOTE: Doing this will make this object intercept ALL events, and no event bubbling will occur from this object!
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.EventTriggerType.PointerEnter">
            <summary>
            Intercepts a IPointerEnterHandler.OnPointerEnter.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.EventTriggerType.PointerExit">
            <summary>
            Intercepts a IPointerExitHandler.OnPointerExit.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.EventTriggerType.PointerDown">
            <summary>
            Intercepts a IPointerDownHandler.OnPointerDown.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.EventTriggerType.PointerUp">
            <summary>
            Intercepts a IPointerUpHandler.OnPointerUp.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.EventTriggerType.PointerClick">
            <summary>
            Intercepts a IPointerClickHandler.OnPointerClick.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.EventTriggerType.Drag">
            <summary>
            Intercepts a IDragHandler.OnDrag.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.EventTriggerType.Drop">
            <summary>
            Intercepts a IDropHandler.OnDrop.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.EventTriggerType.Scroll">
            <summary>
            Intercepts a IScrollHandler.OnScroll.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.EventTriggerType.UpdateSelected">
            <summary>
            Intercepts a IUpdateSelectedHandler.OnUpdateSelected.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.EventTriggerType.Select">
            <summary>
            Intercepts a ISelectHandler.OnSelect.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.EventTriggerType.Deselect">
            <summary>
            Intercepts a IDeselectHandler.OnDeselect.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.EventTriggerType.Move">
            <summary>
            Intercepts a IMoveHandler.OnMove.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.EventTriggerType.InitializePotentialDrag">
            <summary>
            Intercepts IInitializePotentialDrag.InitializePotentialDrag.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.EventTriggerType.BeginDrag">
            <summary>
            Intercepts IBeginDragHandler.OnBeginDrag.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.EventTriggerType.EndDrag">
            <summary>
            Intercepts IEndDragHandler.OnEndDrag.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.EventTriggerType.Submit">
            <summary>
            Intercepts ISubmitHandler.Submit.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.EventTriggerType.Cancel">
            <summary>
            Intercepts ICancelHandler.OnCancel.
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.Physics2DRaycaster">
            <summary>
            Simple event system using physics raycasts.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.Physics2DRaycaster.Raycast(UnityEngine.EventSystems.PointerEventData,System.Collections.Generic.List{UnityEngine.EventSystems.RaycastResult})">
            <summary>
            Raycast against 2D elements in the scene.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.TouchInputModule.FakeTouches">
            <summary>
            For debugging touch-based devices using the mouse.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.TouchInputModule.ProcessTouchEvents">
            <summary>
            Process all touch events.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.EventSystem.current">
            <summary>
            Return the current EventSystem.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.EventSystem.sendNavigationEvents">
            <summary>
            Should the EventSystem allow navigation events (move / submit / cancel).
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.EventSystem.pixelDragThreshold">
            <summary>
            The soft area for dragging in pixels.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.EventSystem.currentInputModule">
            <summary>
            The currently active EventSystems.BaseInputModule.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.EventSystem.firstSelectedGameObject">
            <summary>
            Only one object can be selected at a time. Think: controller-selected button.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.EventSystem.currentSelectedGameObject">
            <summary>
            The GameObject currently considered active by the EventSystem.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.EventSystem.isFocused">
            <summary>
            Flag to say whether the EventSystem thinks it should be paused or not based upon focused state.
            </summary>
            <remarks>
            Used to determine inside the individual InputModules if the module should be ticked while the application doesnt have focus.
            </remarks>
        </member>
        <member name="M:UnityEngine.EventSystems.EventSystem.UpdateModules">
            <summary>
            Recalculate the internal list of BaseInputModules.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.EventSystem.alreadySelecting">
            <summary>
            Returns true if the EventSystem is already in a SetSelectedGameObject.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.EventSystem.SetSelectedGameObject(UnityEngine.GameObject,UnityEngine.EventSystems.BaseEventData)">
            <summary>
            Set the object as selected. Will send an OnDeselect the the old selected object and OnSelect to the new selected object.
            </summary>
            <param name="selected">GameObject to select.</param>
            <param name="pointer">Associated EventData.</param>
        </member>
        <member name="M:UnityEngine.EventSystems.EventSystem.SetSelectedGameObject(UnityEngine.GameObject)">
            <summary>
            Set the object as selected. Will send an OnDeselect the the old selected object and OnSelect to the new selected object.
            </summary>
            <param name="selected">GameObject to select.</param>
        </member>
        <member name="M:UnityEngine.EventSystems.EventSystem.RaycastAll(UnityEngine.EventSystems.PointerEventData,System.Collections.Generic.List{UnityEngine.EventSystems.RaycastResult})">
            <summary>
            Raycast into the scene using all configured BaseRaycasters.
            </summary>
            <param name="eventData">Current pointer data.</param>
            <param name="raycastResults">List of 'hits' to populate.</param>
        </member>
        <member name="M:UnityEngine.EventSystems.EventSystem.IsPointerOverGameObject">
            <summary>
            Is the pointer with the given ID over an EventSystem object?
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.EventSystem.IsPointerOverGameObject(System.Int32)">
             <summary>
             Is the pointer with the given ID over an EventSystem object?
             </summary>
             <remarks>
             If you use IsPointerOverGameObject() without a parameter, it points to the "left mouse button" (pointerId = -1); therefore when you use IsPointerOverGameObject for touch, you should consider passing a pointerId to it
             Note that for touch, IsPointerOverGameObject should be used with ''OnMouseDown()'' or ''Input.GetMouseButtonDown(0)'' or ''Input.GetTouch(0).phase == TouchPhase.Began''.
             </remarks>
             <example>
             <code>
             <![CDATA[
             using UnityEngine;
             using System.Collections;
             using UnityEngine.EventSystems;
            
             public class MouseExample : MonoBehaviour
             {
                 void Update()
                 {
                     // Check if the left mouse button was clicked
                     if (Input.GetMouseButtonDown(0))
                     {
                         // Check if the mouse was clicked over a UI element
                         if (EventSystem.current.IsPointerOverGameObject())
                         {
                             Debug.Log("Clicked on the UI");
                         }
                     }
                 }
             }
             ]]>
            </code>
             </example>
        </member>
        <member name="M:UnityEngine.EventSystems.EventSystem.SetUITookitEventSystemOverride(UnityEngine.EventSystems.EventSystem,System.Boolean,System.Boolean)">
            <summary>
            Sets how UI Toolkit runtime panels receive events and handle selection
            when interacting with other objects that use the EventSystem, such as components from the Unity UI package.
            </summary>
            <param name="activeEventSystem">
            The EventSystem used to override UI Toolkit panel events and selection.
            If activeEventSystem is null, UI Toolkit panels will use current enabled EventSystem
            or, if there is none, the default InputManager-based event system will be used.
            </param>
            <param name="sendEvents">
            If true, UI Toolkit events will come from this EventSystem
            instead of the default InputManager-based event system.
            </param>
            <param name="createPanelGameObjectsOnStart">
            If true, UI Toolkit panels' unassigned selectableGameObject will be automatically initialized
            with children GameObjects of this EventSystem on Start.
            </param>
        </member>
        <member name="T:UnityEngine.EventSystems.BaseInput">
            <summary>
            Interface to the Input system used by the BaseInputModule. With this it is possible to bypass the Input system with your own but still use the same InputModule. For example this can be used to feed fake input into the UI or interface with a different input system.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.BaseInput.compositionString">
            <summary>
            Interface to Input.compositionString. Can be overridden to provide custom input instead of using the Input class.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.BaseInput.imeCompositionMode">
            <summary>
            Interface to Input.imeCompositionMode. Can be overridden to provide custom input instead of using the Input class.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.BaseInput.compositionCursorPos">
            <summary>
            Interface to Input.compositionCursorPos. Can be overridden to provide custom input instead of using the Input class.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.BaseInput.mousePresent">
            <summary>
            Interface to Input.mousePresent. Can be overridden to provide custom input instead of using the Input class.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.BaseInput.GetMouseButtonDown(System.Int32)">
            <summary>
            Interface to Input.GetMouseButtonDown. Can be overridden to provide custom input instead of using the Input class.
            </summary>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.EventSystems.BaseInput.GetMouseButtonUp(System.Int32)">
            <summary>
            Interface to Input.GetMouseButtonUp. Can be overridden to provide custom input instead of using the Input class.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.BaseInput.GetMouseButton(System.Int32)">
            <summary>
            Interface to Input.GetMouseButton. Can be overridden to provide custom input instead of using the Input class.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.BaseInput.mousePosition">
            <summary>
            Interface to Input.mousePosition. Can be overridden to provide custom input instead of using the Input class.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.BaseInput.mouseScrollDelta">
            <summary>
            Interface to Input.mouseScrollDelta. Can be overridden to provide custom input instead of using the Input class.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.BaseInput.touchSupported">
            <summary>
            Interface to Input.touchSupported. Can be overridden to provide custom input instead of using the Input class.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.BaseInput.touchCount">
            <summary>
            Interface to Input.touchCount. Can be overridden to provide custom input instead of using the Input class.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.BaseInput.GetTouch(System.Int32)">
            <summary>
            Interface to Input.GetTouch. Can be overridden to provide custom input instead of using the Input class.
            </summary>
            <param name="index">Touch index to get</param>
        </member>
        <member name="M:UnityEngine.EventSystems.BaseInput.GetAxisRaw(System.String)">
            <summary>
            Interface to Input.GetAxisRaw. Can be overridden to provide custom input instead of using the Input class.
            </summary>
            <param name="axisName">Axis name to check</param>
        </member>
        <member name="M:UnityEngine.EventSystems.BaseInput.GetButtonDown(System.String)">
            <summary>
            Interface to Input.GetButtonDown. Can be overridden to provide custom input instead of using the Input class.
            </summary>
            <param name="buttonName">Button name to get</param>
        </member>
        <member name="T:UnityEngine.EventSystems.PhysicsRaycaster">
            <summary>
            Simple event system using physics raycasts.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.PhysicsRaycaster.kNoEventMaskSet">
            <summary>
            Const to use for clarity when no event mask is set
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.PhysicsRaycaster.m_EventMask">
            <summary>
            Layer mask used to filter events. Always combined with the camera's culling mask if a camera is used.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.PhysicsRaycaster.m_MaxRayIntersections">
            <summary>
            The max number of intersections allowed. 0 = allocating version anything else is non alloc.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PhysicsRaycaster.depth">
            <summary>
            Depth used to determine the order of event processing.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PhysicsRaycaster.finalEventMask">
            <summary>
            Event mask used to determine which objects will receive events.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PhysicsRaycaster.eventMask">
            <summary>
            Layer mask used to filter events. Always combined with the camera's culling mask if a camera is used.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.PhysicsRaycaster.maxRayIntersections">
            <summary>
            Max number of ray intersection allowed to be found.
            </summary>
            <remarks>
            A value of zero will represent using the allocating version of the raycast function where as any other value will use the non allocating version.
            </remarks>
        </member>
        <member name="M:UnityEngine.EventSystems.PhysicsRaycaster.ComputeRayAndDistance(UnityEngine.EventSystems.PointerEventData,UnityEngine.Ray@,System.Int32@,System.Single@)">
            <summary>
            Returns a ray going from camera through the event position and the distance between the near and far clipping planes along that ray.
            </summary>
            <param name="eventData">The pointer event for which we will cast a ray.</param>
            <param name="ray">The ray to use.</param>
            <param name="eventDisplayIndex">The display index used.</param>
            <param name="distanceToClipPlane">The distance between the near and far clipping planes along the ray.</param>
            <returns>True if the operation was successful. false if it was not possible to compute, such as the eventPosition being outside of the view.</returns>
        </member>
        <member name="F:UnityEngine.EventSystems.StandaloneInputModule.m_VerticalAxis">
            <summary>
            Name of the vertical axis for movement (if axis events are used).
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.StandaloneInputModule.m_SubmitButton">
            <summary>
            Name of the submit button.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.StandaloneInputModule.m_CancelButton">
            <summary>
            Name of the submit button.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.StandaloneInputModule.forceModuleActive">
            <summary>
            Force this module to be active.
            </summary>
            <remarks>
            If there is no module active with higher priority (ordered in the inspector) this module will be forced active even if valid enabling conditions are not met.
            </remarks>
        </member>
        <member name="P:UnityEngine.EventSystems.StandaloneInputModule.inputActionsPerSecond">
            <summary>
            Number of keyboard / controller inputs allowed per second.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.StandaloneInputModule.repeatDelay">
            <summary>
            Delay in seconds before the input actions per second repeat rate takes effect.
            </summary>
            <remarks>
            If the same direction is sustained, the inputActionsPerSecond property can be used to control the rate at which events are fired. However, it can be desirable that the first repetition is delayed, so the user doesn't get repeated actions by accident.
            </remarks>
        </member>
        <member name="P:UnityEngine.EventSystems.StandaloneInputModule.horizontalAxis">
            <summary>
            Name of the horizontal axis for movement (if axis events are used).
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.StandaloneInputModule.verticalAxis">
            <summary>
            Name of the vertical axis for movement (if axis events are used).
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.StandaloneInputModule.submitButton">
            <summary>
            Maximum number of input events handled per second.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.StandaloneInputModule.cancelButton">
            <summary>
            Input manager name for the 'cancel' button.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.StandaloneInputModule.ActivateModule">
            <summary>
            See BaseInputModule.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.StandaloneInputModule.DeactivateModule">
            <summary>
            See BaseInputModule.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.StandaloneInputModule.ProcessTouchPress(UnityEngine.EventSystems.PointerEventData,System.Boolean,System.Boolean)">
            <summary>
            This method is called by Unity whenever a touch event is processed. Override this method with a custom implementation to process touch events yourself.
            </summary>
            <param name="pointerEvent">Event data relating to the touch event, such as position and ID to be passed to the touch event destination object.</param>
            <param name="pressed">This is true for the first frame of a touch event, and false thereafter. This can therefore be used to determine the instant a touch event occurred.</param>
            <param name="released">This is true only for the last frame of a touch event.</param>
            <remarks>
            This method can be overridden in derived classes to change how touch press events are handled.
            </remarks>
        </member>
        <member name="M:UnityEngine.EventSystems.StandaloneInputModule.SendSubmitEventToSelectedObject">
            <summary>
            Calculate and send a submit event to the current selected object.
            </summary>
            <returns>If the submit event was used by the selected object.</returns>
        </member>
        <member name="M:UnityEngine.EventSystems.StandaloneInputModule.SendMoveEventToSelectedObject">
            <summary>
            Calculate and send a move event to the current selected object.
            </summary>
            <returns>If the move event was used by the selected object.</returns>
        </member>
        <member name="M:UnityEngine.EventSystems.StandaloneInputModule.ProcessMouseEvent(System.Int32)">
            <summary>
            Process all mouse events.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.StandaloneInputModule.ProcessMousePress(UnityEngine.EventSystems.PointerInputModule.MouseButtonEventData)">
            <summary>
            Calculate and process any mouse button state changes.
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.UIBehaviour">
            <summary>
            Base behaviour that has protected implementations of Unity lifecycle functions.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.UIBehaviour.IsActive">
            <summary>
            Returns true if the GameObject and the Component are active.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.UIBehaviour.OnRectTransformDimensionsChange">
            <summary>
            This callback is called when the dimensions of an associated RectTransform change. It is always called before Awake, OnEnable, or Start. The call is also made to all child RectTransforms, regardless of whether their dimensions change (which depends on how they are anchored).
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.UIBehaviour.OnCanvasHierarchyChanged">
            <summary>
            Called when the state of the parent Canvas is changed.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.UIBehaviour.IsDestroyed">
            <summary>
            Returns true if the native representation of the behaviour has been destroyed.
            </summary>
            <remarks>
            When a parent canvas is either enabled, disabled or a nested canvas's OverrideSorting is changed this function is called. You can for example use this to modify objects below a canvas that may depend on a parent canvas - for example, if a canvas is disabled you may want to halt some processing of a UI element.
            </remarks>
        </member>
        <member name="F:UnityEngine.EventSystems.BaseInputModule.m_SendPointerHoverToParent">
            <summary>
            True if pointer hover events will be sent to the parent
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.BaseInputModule.input">
            <summary>
            The current BaseInput being used by the input module.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.BaseInputModule.inputOverride">
            <summary>
            Used to override the default BaseInput for the input module.
            </summary>
            <remarks>
            With this it is possible to bypass the Input system with your own but still use the same InputModule. For example this can be used to feed fake input into the UI or interface with a different input system.
            </remarks>
        </member>
        <member name="M:UnityEngine.EventSystems.BaseInputModule.Process">
            <summary>
            Process the current tick for the module.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.BaseInputModule.FindFirstRaycast(System.Collections.Generic.List{UnityEngine.EventSystems.RaycastResult})">
            <summary>
            Return the first valid RaycastResult.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.BaseInputModule.DetermineMoveDirection(System.Single,System.Single)">
            <summary>
            Given an input movement, determine the best MoveDirection.
            </summary>
            <param name="x">X movement.</param>
            <param name="y">Y movement.</param>
        </member>
        <member name="M:UnityEngine.EventSystems.BaseInputModule.DetermineMoveDirection(System.Single,System.Single,System.Single)">
            <summary>
            Given an input movement, determine the best MoveDirection.
            </summary>
            <param name="x">X movement.</param>
            <param name="y">Y movement.</param>
            <param name="deadZone">Dead zone.</param>
        </member>
        <member name="M:UnityEngine.EventSystems.BaseInputModule.FindCommonRoot(UnityEngine.GameObject,UnityEngine.GameObject)">
            <summary>
            Given 2 GameObjects, return a common root GameObject (or null).
            </summary>
            <param name="g1">GameObject to compare</param>
            <param name="g2">GameObject to compare</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.EventSystems.BaseInputModule.GetAxisEventData(System.Single,System.Single,System.Single)">
            <summary>
            Given some input data generate an AxisEventData that can be used by the event system.
            </summary>
            <param name="x">X movement.</param>
            <param name="y">Y movement.</param>
            <param name="deadZone">Dead zone.</param>
        </member>
        <member name="M:UnityEngine.EventSystems.BaseInputModule.GetBaseEventData">
            <summary>
            Generate a BaseEventData that can be used by the EventSystem.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.BaseInputModule.IsPointerOverGameObject(System.Int32)">
            <summary>
            If the module is pointer based, then override this to return true if the pointer is over an event system object.
            </summary>
            <param name="pointerId">Pointer ID</param>
            <returns>Is the given pointer over an event system object?</returns>
        </member>
        <member name="M:UnityEngine.EventSystems.BaseInputModule.ShouldActivateModule">
            <summary>
            Should the module be activated.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.BaseInputModule.DeactivateModule">
            <summary>
            Called when the module is deactivated. Override this if you want custom code to execute when you deactivate your module.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.BaseInputModule.ActivateModule">
            <summary>
            Called when the module is activated. Override this if you want custom code to execute when you activate your module.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.BaseInputModule.UpdateModule">
            <summary>
            Update the internal state of the Module.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.BaseInputModule.IsModuleSupported">
            <summary>
            Check to see if the module is supported. Override this if you have a platform specific module (eg. TouchInputModule that you do not want to activate on standalone.)
            </summary>
            <returns>Is the module supported.</returns>
        </member>
        <member name="M:UnityEngine.EventSystems.BaseInputModule.ConvertUIToolkitPointerId(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Returns Id of the pointer following <see cref="T:UnityEngine.UIElements.PointerId"/> convention.
            </summary>
            <param name="sourcePointerData">PointerEventData whose pointerId will be converted to UI Toolkit pointer convention.</param>
            <seealso cref="T:UnityEngine.UIElements.IPointerEvent" />
        </member>
        <member name="F:UnityEngine.EventSystems.ExecuteEvents.s_InternalTransformList">
            <summary>
            Execute the specified event on the first game object underneath the current touch.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.ExecuteEvents.GetEventList``1(UnityEngine.GameObject,System.Collections.Generic.IList{UnityEngine.EventSystems.IEventSystemHandler})">
            <summary>
            Get the specified object's event event.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.ExecuteEvents.CanHandleEvent``1(UnityEngine.GameObject)">
            <summary>
            Whether the specified game object will be able to handle the specified event.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.ExecuteEvents.GetEventHandler``1(UnityEngine.GameObject)">
            <summary>
            Bubble the specified event on the game object, figuring out which object will actually receive the event.
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.BaseRaycaster">
            <summary>
            Base class for any RayCaster.
            </summary>
            <remarks>
            A Raycaster is responsible for raycasting against scene elements to determine if the cursor is over them. Default Raycasters include PhysicsRaycaster, Physics2DRaycaster, GraphicRaycaster.
            Custom raycasters can be added by extending this class.
            </remarks>
        </member>
        <member name="M:UnityEngine.EventSystems.BaseRaycaster.Raycast(UnityEngine.EventSystems.PointerEventData,System.Collections.Generic.List{UnityEngine.EventSystems.RaycastResult})">
            <summary>
            Raycast against the scene.
            </summary>
            <param name="eventData">Current event data.</param>
            <param name="resultAppendList">List of hit Objects.</param>
        </member>
        <member name="P:UnityEngine.EventSystems.BaseRaycaster.eventCamera">
            <summary>
            The camera that will generate rays for this raycaster.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.BaseRaycaster.sortOrderPriority">
            <summary>
            Priority of the raycaster based upon sort order.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.BaseRaycaster.renderOrderPriority">
            <summary>
            Priority of the raycaster based upon render order.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.BaseRaycaster.rootRaycaster">
            <summary>
            Raycaster on root canvas
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.AbstractEventData">
            <summary>
            A class that can be used for sending simple events via the event system.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.AbstractEventData.Reset">
            <summary>
            Reset the event.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.AbstractEventData.Use">
            <summary>
            Use the event.
            </summary>
            <remarks>
            Internally sets a flag that can be checked via used to see if further processing should happen.
            </remarks>
        </member>
        <member name="P:UnityEngine.EventSystems.AbstractEventData.used">
            <summary>
            Is the event used?
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.BaseEventData">
            <summary>
            A class that contains the base event data that is common to all event types in the new EventSystem.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.BaseEventData.currentInputModule">
            <summary>
            >A reference to the BaseInputModule that sent this event.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.BaseEventData.selectedObject">
            <summary>
            The object currently considered selected by the EventSystem.
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.RaycastResult">
            <summary>
            A hit result from a BaseRaycaster.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.RaycastResult.gameObject">
            <summary>
            The GameObject that was hit by the raycast.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.RaycastResult.module">
            <summary>
            BaseRaycaster that raised the hit.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.RaycastResult.distance">
            <summary>
            Distance to the hit.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.RaycastResult.index">
            <summary>
            Hit index
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.RaycastResult.depth">
            <summary>
            Used by raycasters where elements may have the same unit distance, but have specific ordering.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.RaycastResult.sortingGroupID">
            <summary>
            The sorting group ID when the hit object is influenced by a SortingGroup.
            </summary>
            <remarks>
            For UI.Graphic elements will always be 0.
            For 3D objects this will always be 0.
            For 2D objects if a SortingOrder is influencing the same object as the hit collider then the renderers sortingGroupID will be used; otherwise SortingGroup.invalidSortingGroupID.
            </remarks>
        </member>
        <member name="F:UnityEngine.EventSystems.RaycastResult.sortingGroupOrder">
            <summary>
            The sorting group order when the hit object is influenced by a SortingGroup.
            </summary>
            <remarks>
            For UI.Graphic elements this will always be 0.
            For 3D objects this will always be 0.
            For 2D objects if a SortingOrder is influencing the same object as the hit collider then the renderers sortingGroupOrder will be used.
            </remarks>
        </member>
        <member name="F:UnityEngine.EventSystems.RaycastResult.sortingLayer">
            <summary>
            The SortingLayer of the hit object.
            </summary>
            <remarks>
            For UI.Graphic elements this will be the values from that graphic's Canvas
            For 3D objects this will always be 0.
            For 2D objects if a 2D Renderer (Sprite, Tilemap, SpriteShape) is attached to the same object as the hit collider that sortingLayerID will be used.
            </remarks>
        </member>
        <member name="F:UnityEngine.EventSystems.RaycastResult.sortingOrder">
            <summary>
            The SortingOrder for the hit object.
            </summary>
            <remarks>
            For Graphic elements this will be the values from that graphics Canvas
            For 3D objects this will always be 0.
            For 2D objects if a 2D Renderer (Sprite, Tilemap, SpriteShape) is attached to the same object as the hit collider that sortingOrder will be used.
            </remarks>
        </member>
        <member name="F:UnityEngine.EventSystems.RaycastResult.worldPosition">
            <summary>
            The world position of the where the raycast has hit.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.RaycastResult.worldNormal">
            <summary>
            The normal at the hit location of the raycast.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.RaycastResult.screenPosition">
            <summary>
            The screen position from which the raycast was generated.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.RaycastResult.displayIndex">
            <summary>
            The display index from which the raycast was generated.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.RaycastResult.isValid">
            <summary>
            Is there an associated module and a hit GameObject.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.RaycastResult.Clear">
            <summary>
            Reset the result.
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.AxisEventData">
            <summary>
            Event Data associated with Axis Events (Controller / Keyboard).
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.AxisEventData.moveVector">
            <summary>
            Raw input vector associated with this event.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.AxisEventData.moveDir">
            <summary>
            MoveDirection for this event.
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.PointerInputModule">
            <summary>
            A BaseInputModule for pointer input.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.PointerInputModule.kMouseLeftId">
            <summary>
            Id of the cached left mouse pointer event.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.PointerInputModule.kMouseRightId">
            <summary>
            Id of the cached right mouse pointer event.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.PointerInputModule.kMouseMiddleId">
            <summary>
            Id of the cached middle mouse pointer event.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.PointerInputModule.kFakeTouchesId">
            <summary>
            Touch id for when simulating touches on a non touch device.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.PointerInputModule.GetPointerData(System.Int32,UnityEngine.EventSystems.PointerEventData@,System.Boolean)">
            <summary>
            Search the cache for currently active pointers, return true if found.
            </summary>
            <param name="id">Touch ID</param>
            <param name="data">Found data</param>
            <param name="create">If not found should it be created</param>
            <returns>True if pointer is found.</returns>
        </member>
        <member name="M:UnityEngine.EventSystems.PointerInputModule.RemovePointerData(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Remove the PointerEventData from the cache.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.PointerInputModule.GetTouchPointerEventData(UnityEngine.Touch,System.Boolean@,System.Boolean@)">
            <summary>
            Given a touch populate the PointerEventData and return if we are pressed or released.
            </summary>
            <param name="input">Touch being processed</param>
            <param name="pressed">Are we pressed this frame</param>
            <param name="released">Are we released this frame</param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.EventSystems.PointerInputModule.CopyFromTo(UnityEngine.EventSystems.PointerEventData,UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Copy one PointerEventData to another.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.PointerInputModule.StateForMouseButton(System.Int32)">
            <summary>
            Given a mouse button return the current state for the frame.
            </summary>
            <param name="buttonId">Mouse button ID</param>
        </member>
        <member name="T:UnityEngine.EventSystems.PointerInputModule.MouseButtonEventData">
            <summary>
            Information about a mouse button event.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.PointerInputModule.MouseButtonEventData.buttonState">
            <summary>
            The state of the button this frame.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.PointerInputModule.MouseButtonEventData.buttonData">
            <summary>
            Pointer data associated with the mouse event.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.PointerInputModule.MouseButtonEventData.PressedThisFrame">
            <summary>
            Was the button pressed this frame?
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.PointerInputModule.MouseButtonEventData.ReleasedThisFrame">
            <summary>
            Was the button released this frame?
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.PointerInputModule.GetMousePointerEventData">
            <summary>
            Return the current MouseState. Using the default pointer.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.PointerInputModule.GetMousePointerEventData(System.Int32)">
            <summary>
            Return the current MouseState.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.PointerInputModule.GetLastPointerEventData(System.Int32)">
            <summary>
            Return the last PointerEventData for the given touch / mouse id.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.PointerInputModule.ProcessMove(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Process movement for the current frame with the given pointer event.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.PointerInputModule.ProcessDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Process the drag for the current frame with the given pointer event.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.PointerInputModule.ClearSelection">
            <summary>
            Clear all pointers and deselect any selected objects in the EventSystem.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.PointerInputModule.DeselectIfSelectionChanged(UnityEngine.GameObject,UnityEngine.EventSystems.BaseEventData)">
            <summary>
            Deselect the current selected GameObject if the currently pointed-at GameObject is different.
            </summary>
            <param name="currentOverGo">The GameObject the pointer is currently over.</param>
            <param name="pointerEvent">Current event data.</param>
        </member>
        <member name="F:UnityEngine.EventSystems.EventTrigger.Entry.eventID">
            <summary>
            What type of event is the associated callback listening for.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.EventTrigger.Entry.callback">
            <summary>
            The desired TriggerEvent to be Invoked.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.EventTrigger.triggers">
            <summary>
            All the functions registered in this EventTrigger
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.EventTrigger.OnPointerEnter(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called by the EventSystem when the pointer enters the object associated with this EventTrigger.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.EventTrigger.OnPointerExit(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called by the EventSystem when the pointer exits the object associated with this EventTrigger.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.EventTrigger.OnDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called by the EventSystem every time the pointer is moved during dragging.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.EventTrigger.OnDrop(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called by the EventSystem when an object accepts a drop.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.EventTrigger.OnPointerDown(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called by the EventSystem when a PointerDown event occurs.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.EventTrigger.OnPointerUp(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called by the EventSystem when a PointerUp event occurs.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.EventTrigger.OnPointerClick(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called by the EventSystem when a Click event occurs.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.EventTrigger.OnSelect(UnityEngine.EventSystems.BaseEventData)">
            <summary>
            Called by the EventSystem when a Select event occurs.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.EventTrigger.OnDeselect(UnityEngine.EventSystems.BaseEventData)">
            <summary>
            Called by the EventSystem when a new object is being selected.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.EventTrigger.OnScroll(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called by the EventSystem when a new Scroll event occurs.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.EventTrigger.OnMove(UnityEngine.EventSystems.AxisEventData)">
            <summary>
            Called by the EventSystem when a Move event occurs.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.EventTrigger.OnUpdateSelected(UnityEngine.EventSystems.BaseEventData)">
            <summary>
            Called by the EventSystem when the object associated with this EventTrigger is updated.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.EventTrigger.OnInitializePotentialDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called by the EventSystem when a drag has been found, but before it is valid to begin the drag.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.EventTrigger.OnBeginDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called before a drag is started.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.EventTrigger.OnEndDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Called by the EventSystem once dragging ends.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.EventTrigger.OnSubmit(UnityEngine.EventSystems.BaseEventData)">
            <summary>
            Called by the EventSystem when a Submit event occurs.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.EventTrigger.OnCancel(UnityEngine.EventSystems.BaseEventData)">
            <summary>
            Called by the EventSystem when a Cancel event occurs.
            </summary>
        </member>
        <member name="T:UnityEngine.UIElements.PanelEventHandler">
            <summary>
            Use this class to handle input and send events to UI Toolkit runtime panels.
            </summary>
        </member>
        <member name="P:UnityEngine.UIElements.PanelEventHandler.panel">
            <summary>
            The panel that this component relates to. If panel is null, this component will have no effect.
            Will be set to null automatically if panel is Disposed from an external source.
            </summary>
        </member>
        <member name="T:UnityEngine.UIElements.PanelRaycaster">
            <summary>
            A derived BaseRaycaster to raycast against UI Toolkit panel instances at runtime.
            </summary>
        </member>
        <member name="P:UnityEngine.UIElements.PanelRaycaster.panel">
            <summary>
            The panel that this component relates to. If panel is null, this component will have no effect.
            Will be set to null automatically if panel is Disposed from an external source.
            </summary>
        </member>
    </members>
</doc>
